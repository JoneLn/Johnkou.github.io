<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>paper7</title>
    <link href="/2021/06/21/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper7/"/>
    <url>/2021/06/21/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper7/</url>
    
    <content type="html"><![CDATA[<h1 id="Do-I-really-belong-Impact-of-employment-status-on-information-security-policy-compliance"><a href="#Do-I-really-belong-Impact-of-employment-status-on-information-security-policy-compliance" class="headerlink" title="Do I really belong?:Impact of employment status on information security policy compliance"></a>Do I really belong?:Impact of employment status on information security policy compliance</h1><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Shwadin Sharma, Merrill Warkentin</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>Social exchange theory</p><p>Organizational Support Theory</p><p>Rational Choice Theory</p><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>自变量：<br>perceived Organizational Support</p><p>一级中介变量：<br>Organizational Commitment</p><p>二级中介变量：<br>Response Cost</p><p>因变量：<br>Behavioral Intention</p><p>控制变量：<br>employment status:<br>permanent employees &amp; temporary employees</p><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>Employment status, specifically permanent versus temporary status, can result in different levels of organizational commitment and perceived organizational support.</p><p>The result of the study supports the notion that the effect of organizational commitment and perceived organizational support on behavioral intention to use ISP will be stronger among permanent employees.</p><p>The research also found that perceived response cost of performing a behavior would negatively impact intention to comply with ISP.</p><ul><li>通过划分不同的雇佣关系（长久性和短暂性），研究可感知的组织支持与员工信息安全策略遵守意图的相关关系，及其如何通过影响组织承诺来影响员工信息安全策略遵守意愿；以及可感知的组织支持和组织承诺通过影响员工反应成本来影响员工信息安全策略遵守意图。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paper7</title>
    <link href="/2021/06/21/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper8/"/>
    <url>/2021/06/21/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper8/</url>
    
    <content type="html"><![CDATA[<h1 id="Don’t-Even-Think-About-It-The-Effects-of-Anti-neutralization-Information-and-Normative-Communication-on-Information-Security-Compliance"><a href="#Don’t-Even-Think-About-It-The-Effects-of-Anti-neutralization-Information-and-Normative-Communication-on-Information-Security-Compliance" class="headerlink" title="Don’t Even Think About It! The Effects of Anti-neutralization, Information, and Normative Communication on Information Security Compliance"></a>Don’t Even Think About It! The Effects of Anti-neutralization, Information, and Normative Communication on Information Security Compliance</h1><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Jordan B Barlow, Merrill Warkentin, Dustin Ormond, Alan R.Dennis</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>SETA:security education, training and awareness programs.</p><p>Neutralizing Theory:rationalize noncompliance behavior</p><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>自变量：</p><p>SETA Communication:</p><ol><li>Informational Communication（在SETA项目中，告诉员工信息安全行为遵守的重要性）</li><li>Normative Communication（在SETA项目中，告诉员工其他员工将遵守信息安全行为策略）</li><li>Anti-neutralization Communication（在SETA项目中，告诉员工不能为不遵守行为找借口）</li></ol><p>因变量：<br>Information Security Policy Violation Intention</p><p>控制变量：<br>Neutralization（是否找借口为自己的不遵守行为开脱）</p><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>We found that both informational(weakly) and anti-neutralization communication(strongly) decreased violate intention, but that normative communication had no effect.</p><p>In scenarios where neutralization where explicitly suggested to participants, anti-neutralization communication was the only approach that worked.</p><ul><li>第二中交流方式没用，第一种微弱，第三种强。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paper7</title>
    <link href="/2021/06/21/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper9/"/>
    <url>/2021/06/21/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper9/</url>
    
    <content type="html"><![CDATA[<h1 id="Employees’-information-security-policy-compliance-A-norm-activation-perspective"><a href="#Employees’-information-security-policy-compliance-A-norm-activation-perspective" class="headerlink" title="Employees’ information security policy compliance:A norm activation perspective"></a>Employees’ information security policy compliance:A norm activation perspective</h1><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Adel Yazdanmehr , Jingguo Wang</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>norm activation theory<br>个人规范激励个人</p><p>social norm theory<br>社会规范约束自己</p><p>ethical climate literature</p><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>自变量：<br>道德氛围：</p><ol><li>Principle Ethical Climate</li></ol><p>一级中间变量：<br>社会规范：</p><ol><li>ISP-Related Descriptive Norms</li><li>ISP-Related Injunctive Norms</li><li>ISP-Related subjective Norms</li></ol><p>二级中间变量</p><ol><li>个人规范：<br>ISP-Related Personal Norms</li></ol><p>调节个人规范的变量：</p><ol><li><p>个人意识：<br>ISP-Related Awareness of Consequences</p></li><li><p>个人责任：<br>ISP-Related Ascription of Personal Responsibility</p></li></ol><p>结果变量：<br>ISP Compliance Behavior</p><p>控制变量：</p><ol><li>Deterrence</li><li>Gender</li><li>Age</li><li>Race</li><li>ISP Knowledge</li><li>Type of Job</li><li>Position</li><li>Company Size</li><li>Tenure</li><li>Information Intensity</li><li>IT related Job</li></ol><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>The results show that ISP-Related personal norms lead to ISP compliance behavior, and the effect is strengthened by ISP-related ascription of personal responsibility.</p><p>Social norms related to ISP(including injunctive and subjective norms), awareness of consequences, and ascription of personal responsibility shape personal norms.</p><p>Social norms related to ISP are the product of principe ethical in an organization.</p><ul><li>道德氛围影响社会规范；</li><li>社会规范同个人意识和个人责任一起影响个人规范；</li><li>个人规范同个人意识和个人责任一起影响ISP策略遵守行为；</li><li>个人特征影响不大。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paper6</title>
    <link href="/2021/06/19/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper6/"/>
    <url>/2021/06/19/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper6/</url>
    
    <content type="html"><![CDATA[<h1 id="Cognitive-affective-drivers-of-employees’-daily-compliance-with-information-security-policies-A-multilevel-longitudinal-study"><a href="#Cognitive-affective-drivers-of-employees’-daily-compliance-with-information-security-policies-A-multilevel-longitudinal-study" class="headerlink" title="Cognitive-affective drivers of employees’ daily compliance with information security policies: A multilevel, longitudinal study"></a>Cognitive-affective drivers of employees’ daily compliance with information security policies: A multilevel, longitudinal study</h1><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>John D’Arcy, Paul Benjamin Lowry</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>RCT: rational choice theory</p><ul><li>costs</li><li>benefits</li></ul><p>TPB:the theory of planned behavior</p><ul><li>attitude</li><li>subjective norms</li><li>perceived behavioral control</li></ul><blockquote><p>还有学者想要将personal moral norms添加到TPB理论中，与subjective norms相对应。</p></blockquote><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>自变量：</p><ol><li>Affective Status: positive affect, negative affect</li><li>Appraisal of Consequence(RCT): <ul><li>costs of compliance(Work impediment)</li><li>Benefits of compliance</li><li>costs/risks of noncompliance(Computer monitoring) </li></ul></li></ol><p>中介变量：<br>Attitude towards compliance(TPB理论的内容之一)</p><p>自变量：<br>Compliance behavior</p><p>控制变量：</p><ol><li>subjective norms</li><li>self-efficacy</li><li>moral considerations</li></ol><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>The results of our multilevel analysis suggest that a combination of state-based affective factors and stable, cognitive beliefs work in parallel to predict daily compliance attitude, which in turn predicts daily compliance behavior.</p><p>Consistent with the TPB portion of our model, we found that daily compliance attitudes, moral beliefs, organizational deviance, and descriptive norms were each significantly associated with daily compliance behavior.</p><ul><li>情绪影响态度，态度影响行为。</li><li>TPB理论各因素对信息安全策略遵守行为都有影响</li></ul>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paper5</title>
    <link href="/2021/06/19/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper5/"/>
    <url>/2021/06/19/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper5/</url>
    
    <content type="html"><![CDATA[<h1 id="Building-an-awareness-centered-information-security-policy-compliance-model"><a href="#Building-an-awareness-centered-information-security-policy-compliance-model" class="headerlink" title="Building an awareness-centered information security policy compliance model"></a>Building an awareness-centered information security policy compliance model</h1><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Alex Koohang, Jonathan Anderson</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>本文没有明确的指出理论基础</p><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>自变量：</p><ol><li>Leadership</li><li>trust</li></ol><p>一级中介变量：</p><ol><li>Information security issues awareness</li><li>Information security policy awareness</li></ol><p>二级中介变量：</p><ol><li>understanding of resource vulnerability</li><li>self-efficacy</li></ol><p>结果变量：</p><ol><li>intention to comply</li></ol><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>The findings indicated that IS awareness depends on effective organizational leadership and elevated employees’ trusting beliefs.</p><p>The understanding of resource vulnerability(URV) and SE are influenced by IS awareness resulting from effective leadership and elevated employees trusting beliefs which guide employees to comply with ISP requirements.</p><ul><li>领导力和信任影响员工安全意识；员工安全意识影响员工自我效能和脆弱性感知；员工自我效能和脆弱性感知影响员工信息安全策略遵守意图。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paper4</title>
    <link href="/2021/06/19/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper4/"/>
    <url>/2021/06/19/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper4/</url>
    
    <content type="html"><![CDATA[<h1 id="Theory-Based-Model-and-Prediction-Analysis-of-Information-Security-Compliance-Behavior-in-the-Saudi-Healthcare-Sector"><a href="#Theory-Based-Model-and-Prediction-Analysis-of-Information-Security-Compliance-Behavior-in-the-Saudi-Healthcare-Sector" class="headerlink" title="Theory-Based Model and Prediction Analysis of Information Security Compliance Behavior in the Saudi Healthcare Sector"></a>Theory-Based Model and Prediction Analysis of Information Security Compliance Behavior in the Saudi Healthcare Sector</h1><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Sultan T.Alanazi, Mohammed Anbar, Shouki A.Ebad, Shankar Karuppayah, Hadeer A.Al-Ani</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p><strong>Theory of Planned Behavior:</strong></p><ul><li>attitude</li><li>subjective norms</li><li>perceived behavior control</li></ul><p><strong>General Deterrence Theory/Neutralization Theory</strong></p><p><strong>Protection Motivation Theory:</strong><br>This theory posits that human protection behavior is based on three processes:</p><ul><li>cognitive appraisal</li><li>threat appraisal</li><li>coping response appraisal</li></ul><p><strong>Diffusion of Innovation</strong></p><ul><li>the innovation technology</li><li>the communication channel through which it spreads</li><li>the time it takes to do so</li><li>the social system it cares to</li></ul><p><strong>Th technology acceptance model(TAM)</strong></p><ul><li>perceived usefulness</li><li>perceived ease-of-use</li></ul><p><strong>Rational Choice Theory</strong></p><ul><li>costs</li><li>benefits</li></ul><p><strong>Cognitive Moral Development Theory</strong></p><ul><li>pre-conventional</li><li>conventional</li><li>post-conventional</li></ul><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>自变量<br>Deterrence Theory: </p><ol><li>Legal/punishment</li></ol><p>Protection Motivation Theory: </p><ol><li>Personality</li><li>Self-efficacy</li></ol><p>Rational Choice Theory:</p><ol><li>cost of compliance/noncompliance</li></ol><p>Theory of Planned Behavior:</p><ol><li>subjective norms</li></ol><p>Cognitive Moral Development Theory</p><ol><li>religion and moral</li></ol><p>Diffusion of Innovation</p><ol><li>Information security policy</li><li>general information security</li><li>Technology awareness</li></ol><p>控制变量<br>Controlled variables</p><ol><li>demographics</li></ol><p>因变量<br>Information security compliance behavior</p><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>The results suggests that moderating and non-common factors(e.g., religion and morality) impact ISCB, while demographic characteristics(e.g., age, marital status, and work experice) do not.</p><p>The theory-based model of ISCB establishes the main domains of theory for this study, which were religion,/morality, self-efficacy, legal/punishment, personality traits, cost of compliance/noncompliance, subjective norms, information security policy, general information security, and technology awareness.</p><p>Predictors of ISCB indicate that general information security, followed by self-efficacy and religion/morality, is the most influential factor on ISCB among healthcare workers in the Kingdom of Saudi Arabia.</p><ul><li>主要得出的理论是某些具体的个人特征对ISCB的影响不大。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paper3</title>
    <link href="/2021/06/19/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper3/"/>
    <url>/2021/06/19/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper3/</url>
    
    <content type="html"><![CDATA[<h1 id="Organizational-Governance-Social-Bonds-and-Information-Security-Policy-Compliance-A-Perspective-towards-Oil-and-Gas-Employees"><a href="#Organizational-Governance-Social-Bonds-and-Information-Security-Policy-Compliance-A-Perspective-towards-Oil-and-Gas-Employees" class="headerlink" title="Organizational Governance, Social Bonds and Information Security Policy Compliance:A Perspective towards Oil and Gas Employees"></a>Organizational Governance, Social Bonds and Information Security Policy Compliance:A Perspective towards Oil and Gas Employees</h1><h2 id="作者："><a href="#作者：" class="headerlink" title="作者："></a>作者：</h2><p>Rao Faizan Ali, P.D.D.Dominic and Kashif Ali</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>Organization governance –&gt; Social Bond Theory –&gt; ISPC</p><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>Organization governance:</p><ul><li>SETA Programs(Security education and training programs), </li><li>Security Policies and Procedures, </li><li>Workplace Capabilities.</li></ul><p>Social Bond Theory: </p><ul><li>Attachment to ISec Related Tasks, </li><li>Commitment to ISec Related Tasks, </li><li>Involvement to ISec Related Tasks, </li><li>Personal Norms to ISec Related to ISec Related Tasks</li></ul><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>The results provide evidence that organization governance factors proved to enhance social bonding among employees, and improved social behavior among employees enhances information security policy compliance in the O&amp;G sector.</p><ul><li>组织治理（SETA项目、安全策略和程序、工作场所能力）通过员工（对与安全相关的任务的依恋、承诺、投入与个人规范）影响信息安全遵守意图(ISPC intention)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paper2</title>
    <link href="/2021/06/18/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper2/"/>
    <url>/2021/06/18/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper2/</url>
    
    <content type="html"><![CDATA[<h1 id="A-Model-of-Information-Security-Policy-Compliance-for-Public-Universities-A-Conceptual-Model"><a href="#A-Model-of-Information-Security-Policy-Compliance-for-Public-Universities-A-Conceptual-Model" class="headerlink" title="A Model of Information Security Policy Compliance for Public Universities: A Conceptual Model"></a>A Model of Information Security Policy Compliance for Public Universities: A Conceptual Model</h1><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p> Angraini, Rose Alinda Alias, and Okfalisa</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>combine behavioral theory and organizational theory </p><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>自变量1：self efficacy; attitude; moral belief<br>中介变量： Behavior intention<br>因变量： Information security policy compliance</p><p>自变量2： Organization commitment; Organization culture; reward; perceived of cost<br>因变量： Information security policy compliance</p><p>自变量3： Habit<br>因变量： Information security policy compliance</p><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>The results in the conceptual model found several variables, namely habits, attitudes, moral beliefs, self-efficacy from behavioral theories and human culture, commitment, rewards, cost can be used to evaluate user compliance with information security polices.</p><ul><li>结合行为理论和组织理论，探讨影响ISC的因素：习惯、态度、道德信仰、自我效能和文化、承诺、奖励、成本。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paper1</title>
    <link href="/2021/06/18/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper1/"/>
    <url>/2021/06/18/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%A2%B3%E7%90%86/paper1/</url>
    
    <content type="html"><![CDATA[<h1 id="A-Meta-Analysis-of-Deterrence-Theory-in-Information-Security-Policy-Compliance-Research"><a href="#A-Meta-Analysis-of-Deterrence-Theory-in-Information-Security-Policy-Compliance-Research" class="headerlink" title="A Meta_Analysis of Deterrence Theory in Information Security Policy Compliance Research"></a>A Meta_Analysis of Deterrence Theory in Information Security Policy Compliance Research</h1><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Simon Trang, Benedikt Brendel</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>Deterrence Theory</p><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><p>自变量：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sanction</span> severity; <span class="hljs-attribute">sanction</span> certainty; <span class="hljs-attribute">sanction</span> celerity<br></code></pre></td></tr></table></figure><p>因变量：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ISP compliance behavior</span><br></code></pre></td></tr></table></figure><p>与环境相关的调节变量：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Behavior <span class="hljs-keyword">type</span>(Maliciousness,compliance);<br><br><span class="hljs-constructor">Culture(<span class="hljs-params">power</span> <span class="hljs-params">distance</span>, <span class="hljs-params">uncertainty</span> <span class="hljs-params">avoidance</span>)</span><br></code></pre></td></tr></table></figure><p>与方法论相关的调节变量：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Behaviorally </span>vs. <span class="hljs-keyword">scenario_based </span>measurement;<br><br>Generic vs specific measurement<br></code></pre></td></tr></table></figure><h2 id="基本结论"><a href="#基本结论" class="headerlink" title="基本结论"></a>基本结论</h2><p>Applying a meta-analysis, the results suggest that sanctions have an overall effect on deviant behavior.</p><p>However, the results also indicate that this relationship is dependent on the study’s context.</p><p>Deterrence theory better predicts deviant behavior in malicious contexts, cultures with a high degree of power distance, and cultures with a high uncertainty avoidance.</p><p>The mete-analysis also reveals no meaningful differences arising from the methodological context in terms of scenario-based and behavior-specific measurement.</p>]]></content>
    
    
    <categories>
      
      <category>Papers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文献梳理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础10</title>
    <link href="/2021/06/13/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%8010/"/>
    <url>/2021/06/13/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%8010/</url>
    
    <content type="html"><![CDATA[<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><p>在很多时候，但我们在完成程序后，常常会因各种需求，对该程序进行修改，或者拓展其功能。</p><p>测试代码，就是在拓展程序功能的时候，测试函数是否仍保留其之前的功能，并正确运行。</p><p>一般而言，我们将函数文件、主程序与测试代码分别保存在不同文件中。</p><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><p>测试函数的编写过程就是随着函数编写而编写测试代码的过程。</p><p>具体而言，先完成一段函数，然后编写对应测试代码，再拓展函数功能，再编写对与拓展之后的函数的测试代码的过程。</p><p>首先在名为<code>name_function</code>的文件中编写一个待测试的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_formatted_name</span>(<span class="hljs-params">first_name, last_name</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;获取完整姓名的函数&quot;&quot;&quot;</span><br>    full_name = first_name + <span class="hljs-string">&quot; &quot;</span> + last_name<br>    <span class="hljs-keyword">return</span> full_name.title()<br></code></pre></td></tr></table></figure><p>– 为了证明该代码可以运行，我们还需要编写一个使用该代码的程序。该程序在名为<code>names</code>的文件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> name_function <span class="hljs-keyword">import</span> get_formatted_name<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter &#x27;q&#x27; at any time to quit.&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    first = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\nPlease give me a first name:&quot;</span>)<br>    <span class="hljs-keyword">if</span> first == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    last = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\nPlease give me a last name:&quot;</span>)<br>    <span class="hljs-keyword">if</span> last == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br><br>    formatted_name = get_formatted_name(first, last)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\tNeatly formatted name: &quot;</span> + formatted_name + <span class="hljs-string">&quot;.&quot;</span>)<br></code></pre></td></tr></table></figure><p>上面的程序的运行证明待测试文件可以运行，进一步编写待测试函数的测试代码。代码如下，并存储在名为<code>get_name_test.py</code>的模块中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> name_function <span class="hljs-keyword">import</span> get_formatted_name<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NamesTestCase</span>(<span class="hljs-params">unittest.TestCase</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;测试get_name.py&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_first_last_name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;能够正确处理像John leon的名字吗&quot;&quot;&quot;</span><br>        formatted_name = get_formatted_name(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;leon&#x27;</span>)<br>        self.assertEqual(formatted_name, <span class="hljs-string">&#x27;John Leon&#x27;</span>)<br><br><br>unittest.main()<br><br><span class="hljs-string">&quot;&quot;&quot;---------------输出结果-------------------------&quot;&quot;&quot;</span><br>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s<br><br>OK<br></code></pre></td></tr></table></figure><ul><li>引用unittest模块检测代码；</li><li>在测试模块中创建<code>unittest.TestCase</code>类的子类，其中子类中的函数必须以<code>test_</code>开头；</li><li>测试程序输出结果与自己预期输出结果是否相同时，需要使用断言<code>asserEqual</code>；</li><li>当函数代码改进时，首先运行该测试文件，运行结果正常后，继续编写新的代码的测试文件。</li></ul><table><thead><tr><th align="center">断言方法</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">assertEqual(1,b)</td><td align="center">核实a==b</td></tr><tr><td align="center">assertNotEqual(a,b)</td><td align="center">核实a!=b</td></tr><tr><td align="center">assertTrue(x)</td><td align="center">核实x为True</td></tr><tr><td align="center">assertFalse</td><td align="center">核实x为False</td></tr><tr><td align="center">assertIn(item, list)</td><td align="center">核实item在list中</td></tr><tr><td align="center">assertNotIn(item, list)</td><td align="center">核实item不在list中</td></tr></tbody></table><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><p>类的测试与函数的测试相似————你所做的大部分工作都是测试类中方法的行为。特殊之处在于，在测试类的代码中，可以定义一个<code>setUp()</code>方法，来存储测试过程之中需要的变量以便重复使用来测试类中的多个方法。</p><p>下面来编写一个类进行测试。来看一个帮助管理匿名调查的类。</p><p>首先编写一个待测试的类，文件名为survey.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnonymousSurvey</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;收集匿名调查问卷的答案&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, question</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;存储一个问题，并为存储答案做准备&quot;&quot;&quot;</span><br>        self.question = question<br>        self.responses = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_question</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;显示调查问卷&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(self.question)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">store_response</span>(<span class="hljs-params">self, new_response</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;存储单份调查答卷&quot;&quot;&quot;</span><br>        self.responses.append(new_response)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_results</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;显示收集到的所有答案&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Survey results:&quot;</span>)<br>        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> self.responses:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;- &#x27;</span> + response)<br></code></pre></td></tr></table></figure><p>其次基于该类编写程序，证明该类可正常运行，文件名为language_survey.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><br><span class="hljs-comment"># 定义一个问题，并创建一个表示调查的AnonymousSurvey对象</span><br>question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>my_survey = AnonymousSurvey(question)<br><br><span class="hljs-comment"># 显示问题并存储答案</span><br>my_survey.show_question()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter &#x27;q&#x27; at any time to quit.\n&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Language: &quot;</span>)<br>    <span class="hljs-keyword">if</span> response == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    my_survey.store_response(response)<br><br><span class="hljs-comment"># 显示调查结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nThank you to everyone who participated in the survey!&quot;</span>)<br>my_survey.show_results()<br></code></pre></td></tr></table></figure><p>然后编写测试代码，文件名为test_survey.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnonymousSurvey</span>(<span class="hljs-params">unittest.TestCase</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;针对AnonymousSurvey类的测试&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_store_single_response</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;测试单个答案会被妥善地存储&quot;&quot;&quot;</span><br>        question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>        my_survey = AnonymousSurvey(question)<br>        my_survey.store_response(<span class="hljs-string">&#x27;python&#x27;</span>)<br><br>        self.assertIn(<span class="hljs-string">&#x27;python&#x27;</span>, my_survey.responses)<br><br><br>unittest.main()<br></code></pre></td></tr></table></figure><p>下面使用setUp()对复杂代码进行测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnonymousSurvey</span>(<span class="hljs-params">unittest.TestCase</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;针对AnonymousSurvey类的测试&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        定义一个调查对象和一组答案，以供使用的测试方法使用</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>        self.my_survey = AnonymousSurvey(question)<br>        self.responses = [<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_store_single_response</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;测试单个答案会被妥善地存储&quot;&quot;&quot;</span><br>        self.my_survey.store_response(self.responses[<span class="hljs-number">0</span>])<br>        self.assertIn(self.responses[<span class="hljs-number">0</span>], self.my_survey.responses)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_store_single_response</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;测试三个答案会被妥善存储&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> self.responses:<br>            self.my_survey.store_response(response)<br>        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> self.responses:<br>            self.assertIn(response, self.my_survey.responses)<br><br><br>unittest.main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础9</title>
    <link href="/2021/06/11/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%809/"/>
    <url>/2021/06/11/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%809/</url>
    
    <content type="html"><![CDATA[<h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h1><h2 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h2><h3 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;python.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_project:<br>    <span class="hljs-string">&quot;&quot;&quot;处于同一目录下的文件的打开方式&quot;&quot;&quot;</span><br>    contents = file_project.read()<br>    <span class="hljs-built_in">print</span>(contents)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;txt\python.txt&quot;</span>) <span class="hljs-keyword">as</span> file_project:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    相对路径</span><br><span class="hljs-string">    该python文件目录下的文件夹中的文件的打开方式</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    contents = file_project.read()<br>    <span class="hljs-built_in">print</span>(contents)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\python_work\jichu\python.txt&quot;</span>) <span class="hljs-keyword">as</span> file_project:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    绝对路径：任何位置文件都可以使用</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    contents = file_project.read()<br>    <span class="hljs-built_in">print</span>(contents)<br></code></pre></td></tr></table></figure><p>使用<code>with open()</code>而非<code>open()</code>函数的目的在于让计算机决定何时关闭文档，否则一直保持文档的打开会影响性能。</p><h3 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span> (filename) <span class="hljs-keyword">as</span> file_project:<br>    <span class="hljs-string">&quot;&quot;&quot;逐行读取文件&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_project:<br>        <span class="hljs-built_in">print</span>(line.rstrip())<br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;python.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_project:<br>    <span class="hljs-string">&quot;&quot;&quot;逐行读取数据并生成列表&quot;&quot;&quot;</span><br>    lines = file_project.readlines()<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-built_in">print</span>(line.rstrip())<br></code></pre></td></tr></table></figure><h3 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&#x27;python.txt&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_obj:<br>    contents = file_obj.read()<br><br>words = contents.split()<br><span class="hljs-string">&quot;&quot;&quot;分割文档内容为由每个单词组成的列表&quot;&quot;&quot;</span><br>num_words = <span class="hljs-built_in">len</span>(words)<br><span class="hljs-built_in">print</span>(words)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This file is &quot;</span> + num_words + <span class="hljs-string">&quot; words.&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="处理多个文件"><a href="#处理多个文件" class="headerlink" title="处理多个文件"></a>处理多个文件</h3><p>思路：使用函数或者创建文件类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_words</span>(<span class="hljs-params">filename</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;使用函数统计文件字数&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>            contents = f_obj.read()<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        msg = <span class="hljs-string">&quot;Sorry,this file does not exit&quot;</span><br>        <span class="hljs-built_in">print</span>(msg)<br>    <span class="hljs-keyword">else</span>:<br>        words = contents.split()<br>        num_words = <span class="hljs-built_in">len</span>(words)<br><br>        <span class="hljs-built_in">print</span>(filename + <span class="hljs-string">&quot; has &quot;</span> + <span class="hljs-built_in">str</span>(num_words) + <span class="hljs-string">&quot; words.&quot;</span>)<br><br><br>filenames = [<span class="hljs-string">&#x27;pthon.txt&#x27;</span>, <span class="hljs-string">&#x27;python.txt&#x27;</span>, <span class="hljs-string">&#x27;pythons.txt&#x27;</span>]<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>    count_words(filename)<br></code></pre></td></tr></table></figure><h2 id="将数据写入文件"><a href="#将数据写入文件" class="headerlink" title="将数据写入文件"></a>将数据写入文件</h2><p>保存数据的最简单的方式之一就是将其写入文件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&#x27;programing.txt&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将数据写入文件</span><br><span class="hljs-string">    若文件不存在，则自动创建</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    file_object.write(<span class="hljs-string">&quot;I love programing.\n&quot;</span>)<br>    file_object.write(<span class="hljs-string">&quot;I love python.\n&quot;</span>)<br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br><br>    file_object.write(<span class="hljs-string">&quot;I love python too.\n&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>‘w’(写入模式)、’r’(只读模式)</li><li>‘a’(附加模式)、’r+’(读取和写入)</li><li>谨慎使用写入模式(‘w’)，每次写入都会先清空文件</li><li>写入多行时要注意在需要换行的文本后加换行符\n</li><li>最好在最后一行也加入换行符，以便下次写入</li><li>python只能将字符串写入文本，其他格式需使用str()转换</li></ul><h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><p>python使用被称为异常的特殊对象来管理程序执行期间发生的错误。</p><p>每当发生让python不知所措的错误时，它都会创建一个异常对象。</p><p>如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止运行，并显示<code>traceback</code>。</p><p>异常是使用<code>trace-except</code>代码块处理的。</p><p><strong>python的错误处理结构让你能够细致地控制与用户分享错误信息的程度，要分享多少信息由你决定。</strong></p><p>比如0不能做除数，否则报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>/<span class="hljs-number">0</span>)<br><span class="hljs-string">&quot;&quot;&quot;----------------------------&quot;&quot;&quot;</span><br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><p>我们可以对该错误做如下处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t divide by zero!&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;---------------------------------&quot;&quot;&quot;</span><br>You can<span class="hljs-string">&#x27;t divide by zero!</span><br></code></pre></td></tr></table></figure><p>通常我们将容易引发错误的代码放到<code>try-except</code>代码块中，可提高这个程序低于错误的能力。</p><p>以下为完整的错误处理流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">first_num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;first number:&#x27;</span>)<br>last_num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;last number:&#x27;</span>)<br><span class="hljs-keyword">try</span>:<br>    divide_num = <span class="hljs-built_in">int</span>(first_num) / <span class="hljs-built_in">int</span>(last_num)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t divide by zero!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(divide_num)<br></code></pre></td></tr></table></figure><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>很多程序都要求用户输入某种信息，然后程序将用户提供的信息存储在列表和字典等数据结构中。用户关闭程序时，你几乎总是要保存他们提供的信息；一种简单的方式是使用json模块来存储数据。</p><p>模块json让你能够将简单的python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据。你还可以使用json在python程序之间分享数据，更重要的是与使用其他编程的人员分享数据。</p><blockquote><p>JSON(JavaScript Object Notation)格式最初是为JavaScript开发的，但随后成了一种常见格式，被包括python在内的众多语言使用。</p></blockquote><h3 id="使用JSON"><a href="#使用JSON" class="headerlink" title="使用JSON"></a>使用JSON</h3><p>我们来编写一个存储一组数字的简短程序，再编写一个将这些数字读取到内存中的程序。第一个程序使用<code>json.dump()</code>来存储数字，第二个程序使用<code>json.load()</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br>filename = <span class="hljs-string">&#x27;number.json&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f_obj:<br>    <span class="hljs-string">&quot;&quot;&quot;自动创建文件并保持写入&quot;&quot;&quot;</span><br>    json.dump(numbers, f_obj)<br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>    numbers = json.load(f_obj)<br><br><span class="hljs-built_in">print</span>(numbers)<br></code></pre></td></tr></table></figure><ul><li>使用<code>json.dump()</code>需使可存储数据的文件保持写入或附加的状态；使用<code>json.load()</code>只需保持文件处于打开状态即可；</li><li>保存数据使用<code>json.dump()</code>，使用数据使用<code>json.load()</code>；</li><li>json.dump()需要指定两个参数：要存储的数据与可用于存储数据的文件；</li></ul><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>重构不是一个方式而是一种思维。</p><p>重构指的是将一段不完善可能出错的程序，通过判断语句来尽可能的完善，以应对各种不同的情景，保证程序的运行的同时使程序更加美观，可理解。</p><p>比如下面的一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet_user</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;问候用户并显示其姓名&quot;&quot;&quot;</span><br>    filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>            username = json.load(f_obj)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What is your name?&quot;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f_obj:<br>            json.dump(username, f_obj)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We&#x27;ll remember your name, &quot;</span> + username + <span class="hljs-string">&#x27;!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wellcome back, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br><br><br>greet_user()<br></code></pre></td></tr></table></figure><p>虽然以上程序代码注释为问候用户，但是，事实上，该程序不仅包括问候用户，还包括当用户名不存在时，输入新的用户名。</p><p>下面重构该程序，使其不再执行众多任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_stored_name</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;如果存储了用户名，就获取它&quot;&quot;&quot;</span><br>    filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>            username = json.load(f_obj)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> username<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_new_name</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;如果没有存储用户名，提示输入它&quot;&quot;&quot;</span><br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What is your name?&quot;</span>)<br>    filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f_obj:<br>        json.dump(username, f_obj)<br>    <span class="hljs-keyword">return</span> username<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet_user</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;问候用户&quot;&quot;&quot;</span><br>    username = get_stored_name()<br>    <span class="hljs-keyword">if</span> username:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome back &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        username = get_new_name()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We&#x27;ll remember you, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br><br><br>greet_user()<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节学习了以下主要内容：</p><ul><li>如何打开txt文件，以及将数据存储在其中；</li><li>如何处理异常，避免程序崩溃；</li><li>如何转储数据到json文件中，以及如何让调用其中数据；</li><li>最后，最重要的是一种思想或者说一种逻辑：重构。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础8</title>
    <link href="/2021/06/10/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%808/"/>
    <url>/2021/06/10/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%808/</url>
    
    <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类是什么，其实真正理解起来不是特别难，但是最重要的就是逻辑的架构。</p><p>如何设计出一个合适的类，是比较考验思维的。</p><p>上一节课就说了，python纵向可以分为变量-函数-类。</p><p>变量是python的基础单元，对变量的操纵就是在编写代码，而将一些代码封装起来命名就是函数，同理，将函数（方法）按照特定规则封装起来就称之为类。</p><p>提到了类，就不得不说一下两种编程方法：面向对象编程和面向过程编程。</p><blockquote><p>面向对象编程是指面向对象注重的是某一对象的方法与属性，即该对象是什么，能够做什么。比较符合人的认知。</p></blockquote><blockquote><p>面向过程编程是指一事物从开始到结束的全过程，按照各个步骤，一步一步分析需要怎么做，期间可能涉及在多个对象之间的转换。</p></blockquote><p>在面向对象编程中，你编写表现现实世界中的事物和情景的类，并基于这些类来创建对象。编写类时，你定义一大类对象都有的通用行为。基于类创建对象时，每个对象都自动具备这种通用行为，然后可根据需要赋予每个对象独特的个性。使用面向对象编程可模拟现实情景，其逼真程度达到了令你惊讶的地步。</p><p>根据类创建对象被成为示例化，被创建的对象称之为类。</p><p>理解面向对象编程有助于你像程序员那样看世界，还可以帮助你真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背后的概念可培养逻辑思维，让你能够通过编写程序来解决遇到的几乎任何问题。</p><h2 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h2><p><strong>首先创建一个模拟小狗的类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化属性&quot;&quot;&quot;</span><br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sit</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(self.name.title() + <span class="hljs-string">&quot; is now sitting.&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">roll_over</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(self.name.title() + <span class="hljs-string">&quot; rolled over!&quot;</span>)<br><br><br>my_dog = Dog(<span class="hljs-string">&quot;bai&quot;</span>, <span class="hljs-number">3</span>)<br><span class="hljs-string">&quot;&quot;&quot;创建实例&quot;&quot;&quot;</span><br><br>my_dog.sit()<br>my_dog.roll_over()<br><br><span class="hljs-string">&quot;&quot;&quot;----------------------------------------------&quot;&quot;&quot;</span><br>Bai <span class="hljs-keyword">is</span> now sitting.<br>Bai rolled over!<br></code></pre></td></tr></table></figure><ol><li>类名按照规定，首字母大写。同时由于我们从头开始编写，因此类名后<code>( )</code>为空白；</li><li>第二行为文档字符串，有助于理解；</li><li>在类中，函数被称作方法，但使用方法都是一样的，唯一的区别也只是调用方法；</li><li>第一个方法为默认方法，该方法存储类对象的属性。<ol><li>其中方法名为<code>__init__</code>(左右各两条短横线)，这是一种约定。该方法每次运行类时自动运行。</li><li>形参中必须首先写<code>self</code>这是将类中各个方法联结起来的关键。</li><li>其他形参与函数大致相同。最大的区别是，若形参具有默认值可不在<code>_init_()</code>的括号内编写，而是直接写在该方法内部。</li><li>每当我们要根据类创建实例时，不用给<code>self</code>传递实参。</li></ol></li><li>剩下两个方法（函数）为类对象的通用动作。定义方法时，形参为<code>self</code>，一定不能忘记。只有通过<code>self</code>，才能调用<code>self.name</code>和<code>self.age</code>。将方法所代表的动作赋予给对象。</li><li>根据类可以创建任意多个实例。</li></ol><p><strong>再次创建一个模拟汽车的类（有默认值）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, make, model, year</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化属性&quot;&quot;&quot;</span><br>        self.make = make<br>        self.model = model<br>        self.year = year<br>        self.odometer_reading = <span class="hljs-number">0</span> <span class="hljs-comment"># 添加默认属性</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_descriptive_name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;</span><br>        long_name = <span class="hljs-built_in">str</span>(self.year) + <span class="hljs-string">&#x27; &#x27;</span> + self.make + <span class="hljs-string">&#x27; &#x27;</span> + self.model<br>        <span class="hljs-keyword">return</span> long_name.title()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_odometer</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;打印一条支出汽车里程的消息&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has &quot;</span> + <span class="hljs-built_in">str</span>(self.odometer_reading) + <span class="hljs-string">&quot; miles on it.&quot;</span>)<br><br>my_new_car = Car(<span class="hljs-string">&quot;audi&quot;</span>, <span class="hljs-string">&#x27;a4&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-string">&quot;&quot;&quot;创建实例&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(my_new_car.get_descriptive_name())<br>my_new_car.read_odometer()<br><span class="hljs-string">&quot;&quot;&quot;------------------------------------------------------&quot;&quot;&quot;</span><br><span class="hljs-number">2016</span> Audi A4<br>This car has <span class="hljs-number">0</span> miles on it.<br></code></pre></td></tr></table></figure><p><strong>修改默认值的三种方式</strong></p><ul><li>在创建实例后修改该实例的默认值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>():</span><br>    --snip--<br>    <span class="hljs-string">&quot;&quot;&quot;省略代码&quot;&quot;&quot;</span><br><br>my_new_car = Car(<span class="hljs-string">&quot;audi&quot;</span>, <span class="hljs-string">&#x27;a4&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-string">&quot;&quot;&quot;创建实例&quot;&quot;&quot;</span><br>my_new_car.odometer_reading = <span class="hljs-number">23</span><br><span class="hljs-string">&quot;&quot;&quot;修改默认值&quot;&quot;&quot;</span><br>my_new_car.read_odometer()<br></code></pre></td></tr></table></figure><ul><li>在类中创建新的方法，给默认值指定新值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>():</span><br>    --snip--<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_odometer</span>(<span class="hljs-params">self, mileage</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;将里程表读数设置为指定的值&quot;&quot;&quot;</span><br>        self.odometer_reading = mileage<br><br><br>my_new_car = Car(<span class="hljs-string">&quot;audi&quot;</span>, <span class="hljs-string">&#x27;a4&#x27;</span>, <span class="hljs-number">2016</span>)<br><br>my_new_car.update_odometer(<span class="hljs-number">34</span>)<br><span class="hljs-string">&quot;&quot;&quot;指定里程表读数&quot;&quot;&quot;</span><br>my_new_car.read_odometer()<br><br><span class="hljs-string">&quot;&quot;&quot;---------------------------------------&quot;&quot;&quot;</span><br>This car has <span class="hljs-number">34</span> miles on it.<br></code></pre></td></tr></table></figure><p><strong>使用方法对属性的值进行递增</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>():</span><br>    --snip--<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_odometer</span>():</span><br>        --snip--<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">increment_odometer</span>(<span class="hljs-params">self, miles</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;将里程表读数增加指定的值&quot;&quot;&quot;</span><br>        <span class="hljs-string">&quot;&quot;&quot;通过对miles结合if语句限定其为正，防止回拨里程表&quot;&quot;&quot;</span><br>        self.odometer_reading += miles<br><br><br>my_new_car = Car(<span class="hljs-string">&quot;audi&quot;</span>, <span class="hljs-string">&#x27;a4&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-built_in">print</span>(my_new_car.read_odometer())<br><br>my_new_car.update_odometer(<span class="hljs-number">34</span>)<br><span class="hljs-built_in">print</span>(my_new_car.read_odometer())<br><br>my_new_car.increment_odometer(<span class="hljs-number">2500</span>)<br><span class="hljs-built_in">print</span>(my_new_car.read_odometer())<br><br><span class="hljs-string">&quot;&quot;&quot;----------------------------------&quot;&quot;&quot;</span><br>This car has <span class="hljs-number">0</span> miles on it.<br>This car has <span class="hljs-number">34</span> miles on it.<br>This car has <span class="hljs-number">2534</span> miles on it.<br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>编写类时，并非总是从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用<strong>继承</strong>。</p><p>一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为<em>父类</em>，而新类称为<em>子类</em>。</p><p>子类继承了父类的所有的属性和方法，同时还可以定义自己的属性和方法。</p><h3 id="创建子类"><a href="#创建子类" class="headerlink" title="创建子类"></a>创建子类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectrciCar</span>(<span class="hljs-params">Car</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, make, model, year</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br><br>my_electriccar = ElectricCar(<span class="hljs-string">&#x27;tesla&#x27;</span>, <span class="hljs-string">&#x27;model s&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-built_in">print</span>(my_electriccar.get_descriptive_name())<br><span class="hljs-string">&quot;&quot;&quot;---------------------------------------------&quot;&quot;&quot;</span><br><span class="hljs-number">2016</span> Tesla Model S<br></code></pre></td></tr></table></figure><ol><li>子类类名的<code>( )</code>内为父类类名，父类必须包含在当前文件中，且位于子类前方；</li><li>方法<code>__init__()</code>接受创建父类实例所需的信息（与父类相同）；</li><li><code>super()</code>是一个特殊的函数，帮助python将父类和子类关联起来。让子类的实例包含父类的所有属性。父类又称超类(superclass)，super()由此得名。</li></ol><h3 id="定义子类的属性和方法"><a href="#定义子类的属性和方法" class="headerlink" title="定义子类的属性和方法"></a>定义子类的属性和方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>():</span><br>    --snip--<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span>(<span class="hljs-params">Car</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;电动汽车子类&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, make, model, year</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        电动汽车的独特之处</span><br><span class="hljs-string">        初始化父类的属性，再初始化电动汽车特有的属性</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        self.battery_size = <span class="hljs-number">70</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe_battery</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has a &quot;</span> + <span class="hljs-built_in">str</span>(self.battery_size) + <span class="hljs-string">&quot;-kwh battery.&quot;</span>)<br><br>my_tesla = ElectricCar(<span class="hljs-string">&#x27;tesla&#x27;</span>, <span class="hljs-string">&#x27;model s&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-built_in">print</span>(my_tesla.get_descriptive_name())<br>my_tesla.describe_battery()<br></code></pre></td></tr></table></figure><ol><li>子类添加属性时，先初始化父类属性，再在<code>__init__</code>中添加具有默认值的属性；</li><li>子类添加方法，按照类的原则正常添加。</li></ol><h3 id="重写父类"><a href="#重写父类" class="headerlink" title="重写父类"></a>重写父类</h3><p>在子类继承父类时，由于子类的特殊性，可能有些父类的属性或方法是不适应于子类的，这时，子类需要在自己类中修改父类的某些属性和方法在自己类中的表现，这便是重写父类。</p><p>假设在父类Car中有一个名为<code>fill_gas_tank()</code>的方法，它对全电动汽车来说毫无意义。因此，你需要在ElectricCar类中重写该方法，使其无效。下面演示一种重写方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>():</span><br>    --snip--<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span>(<span class="hljs-params">Car</span>):</span><br>    --snip--<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fill_gas_tank</span>():</span><br>        <span class="hljs-string">&quot;&quot;&quot;电动汽车没有油箱&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car doesn&#x27;t need a gas tank!&quot;</span>)<br></code></pre></td></tr></table></figure><p>在子类中，对父类的方法进行重新定义后，优先执行子类中的方法。</p><h3 id="将其他类的实例做为自己的属性"><a href="#将其他类的实例做为自己的属性" class="headerlink" title="将其他类的实例做为自己的属性"></a>将其他类的实例做为自己的属性</h3><p>使用代码模拟实物时，你可能发现自己给类添加的细节越来越多：属性和方法清单都越来越长。在这种情况下，你可能需要将类的一部分作为一个独立的类提取出来。你可以将大型类拆分为几个协同工作的小类。</p><p>例如，在对电动汽车的模拟中，我们发现针对电瓶可以有很多方法和属性，则将电瓶独立出来成为一个类，然后在电动汽车中添加其电瓶属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>():</span><br>    --snip--<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Battery</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, battery_size=<span class="hljs-number">70</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化电瓶属性&quot;&quot;&quot;</span><br>        self.battery_size = battery_size<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe_battery</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;打印描述电瓶容量的消息&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has a &quot;</span> + <span class="hljs-built_in">str</span>(self.battery_size) + <span class="hljs-string">&quot;-kwh battery.&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span>(<span class="hljs-params">Car</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;电动车的独特之处&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, make, model, year</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化父类的属性，再初始化电动汽车特有的属性</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        self.battery = Battery()<br><br>my_tesla = ElectricCar(<span class="hljs-string">&#x27;tesla&#x27;</span>, <span class="hljs-string">&#x27;model s&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-built_in">print</span>(my_tesla.get_descritive_name())<br>my_tesla.battery.describe_battery()<br></code></pre></td></tr></table></figure><p>由于在子类中<code>self.battery = Battery</code>的存在，当我们想要在ElectricCar类调用<code>Battery.describe_battery()</code>时，需要写作<code>self.battery.describe_battery()</code>。</p><h3 id="模拟实物"><a href="#模拟实物" class="headerlink" title="模拟实物"></a>模拟实物</h3><p>在不断的使用编程模拟并解决现实事物时，我们经常会遇到一些有趣的问题。在这过程我们终将进入另一个境界：从较高的逻辑层面而非语法层面来考虑问题。</p><p>到达这个境界后，你经常会发现，现实世界的建模方法并没有对错之分。有些方法的效率更高，但要找出效率最高的表示法，需要经过一定的实践。</p><p>只要代码像你希望的那样运行，就说明你做的很好！即使你发现自己不得不多次尝试使用不同的方法来重写类，也不必气馁；要编写出高效、准确的代码，都得经过这样的过程。</p><h2 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h2><p>导入类的方式在形式上与导入函数的方式相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> Car<br><span class="hljs-string">&#x27;&#x27;&#x27;导入单个类&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> Car, ElectricCar<br><span class="hljs-string">&#x27;&#x27;&#x27;从一个模块中导入多个类&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> *<br><span class="hljs-string">&#x27;&#x27;&#x27;导入模块中所有类&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;不常使用&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>自定义工作流程</p><p>在代码编写过程中每个人的编写习惯不同。</p><p>有人喜欢先尽可能在一个文件中完成所有的工作，确定一切都能正确运行后，再将类移到独立的模块中。</p><p>还有人习惯模块和文件的交互方式，在项目开始时就尝试将类存储到模块中。</p><p>找到适合自己的最为重要。</p><p>目前还没有编写过如此复杂的代码，因此还不能确定自己适合哪一种。按照以往惯例，大概率习惯先写在一个文件中写一部分，并确保运行。等到合适的时机，将其转移到模块中，然后继续在主文件中编写代码。</p><h2 id="类编码风格"><a href="#类编码风格" class="headerlink" title="类编码风格"></a>类编码风格</h2><p>类名应采用驼峰命名法，即将类名中的每个首字母大写，而不使用下划线。实例名和模块都采用小写格式，并在单词之间加上下划线。</p><p>对于每个类，都应紧跟在类定义后面包含一个文档字符串。这种文档字符串简要地描述类的功能，并遵循编写函数的文档字符串时采用的格式约定。</p><p>每个模块也都应包含一个字符串，对其中的类可用于做什么进行描述。</p><p>可使用空行来组织代码，但不要滥用。在类中，可使用一个空行来分隔方法；而在模块中，可使用两个空行来分隔类。</p><p>需要同时导入标准库中的模块和你的模块时，先导入标准库中的模块，然后添加一个空行，再导入你自己编写的模块。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一节讲的就是类，主要讲了以下几个方面：</p><ol><li>类的定义，如何创建和使用类，如何修改默认值；</li><li>继承：如何编写继承、如何修改父类、如何将独立类作为另一类的属性；</li><li>导入类：导出类、类的某一方法、类的多个方法、类的全部方法到主程序或模块中；</li><li>类编码风格——驼峰命名法。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础7</title>
    <link href="/2021/06/09/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%807/"/>
    <url>/2021/06/09/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%807/</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>基于目前微薄的知识储存，我将python基础知识分为两个方向，横向和纵向。</p><p>横向：变量-列表-字典</p><p>纵向：变量-函数-类</p><p>在变量层次的列表-字典的操作我们已经学习过了，本章学习函数的基础知识及其与字典、列表的结合。</p><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><h3 id="最简形式函数"><a href="#最简形式函数" class="headerlink" title="最简形式函数"></a>最简形式函数</h3><p><strong>函数</strong> 是带名字的代码块。</p><p>即函数是对代码块命名，以便重复使用该代码块。</p><p>对比记忆，变量不就是带名字的数据（数值、字符串等）。</p><p>这一节很考验理解，而且目前而言，我也只是稍微理解了一下，还不太容易以简单直接的方式将自己的理解表达出来，因此，首先来几个最简单的例子，开开胃，自己理解一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># _*_ coding: utf-8_*_</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gree_user</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;定义函数，显示简单问候语&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br><br>gree_user()<br><span class="hljs-string">&quot;&quot;&quot;-----------------------------&quot;&quot;&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gree_user</span>(<span class="hljs-params">username</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;定义函数，显示简单问候语&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello,&quot;</span>+username.title()+<span class="hljs-string">&quot;!&quot;</span>)<br><br><br>gree_user(<span class="hljs-string">&#x27;Johnkou&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;-----------------------------&quot;&quot;&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">favorite_book</span>(<span class="hljs-params">title</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;定义最爱的书&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<br>        <span class="hljs-string">&quot;One of my favorite books is &quot;</span>+title.title()<br>    )<br><br><br>favorite_book(<span class="hljs-string">&quot;Alice in wonderland&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h3><p>形参：函数完成其工作所需的一项信息。</p><p>实参：调用函数时传递给函数的信息。</p><ol><li>无默认值情况</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe_animal</span>(<span class="hljs-params">animal_type, pet_name</span>):</span><br>    <span class="hljs-comment"># 如animal_type, pet_name为形参</span><br>    <span class="hljs-string">&quot;&quot;&quot;&quot;传递实参的几种方式&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nI have a &quot;</span> + animal_type + <span class="hljs-string">&quot;.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nMy &quot;</span> + animal_type + <br>        <span class="hljs-string">&quot;&#x27;s name is &quot;</span> + pet_name + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>describe_animal(<span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;mingming&quot;</span>)  <br><span class="hljs-comment"># 顺序实参，必须注意参数顺序</span><br>describe_animal(animal_type=<span class="hljs-string">&quot;dog&quot;</span>, pet_name=<span class="hljs-string">&quot;mingming&quot;</span>)  <br><span class="hljs-comment"># 关键字实参，无需注意实参顺序</span><br>describe_animal(pet_name=<span class="hljs-string">&quot;mingming&quot;</span>, animal_type=<span class="hljs-string">&quot;dog&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>有默认值情况</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe_animal</span>(<span class="hljs-params">animal_type, pet_name=<span class="hljs-string">&quot;xiongmao&quot;</span></span>):</span>  <br><br>    <span class="hljs-string">&quot;&quot;&quot;&quot;此处对pet_name添加了默认值，传递实参的几种方式&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nI have a &quot;</span> + animal_type + <span class="hljs-string">&quot;.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nMy &quot;</span> + animal_type + <span class="hljs-string">&quot;&#x27;s name is &quot;</span> + pet_name + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>describe_animal(<span class="hljs-string">&quot;dog&quot;</span>)  <br><span class="hljs-comment"># 在设置默认值的情况下，可以只对一个实参进行传递</span><br>describe_animal(<span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;mingming&quot;</span>)  <br><span class="hljs-comment"># 顺序实参，必须注意参数顺序，可以代替默认值</span><br>describe_animal(animal_type=<span class="hljs-string">&quot;dog&quot;</span>, pet_name=<span class="hljs-string">&quot;mingming&quot;</span>)  <br><span class="hljs-comment"># 关键字实参，无需注意实参顺序</span><br>describe_animal(pet_name=<span class="hljs-string">&quot;mingming&quot;</span>, animal_type=<span class="hljs-string">&quot;dog&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数中不仅仅有<code>print()</code>，更重要甚至更常见的是返回值<code>return</code>。</p><ol><li>返回简单值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_formatted_name</span>(<span class="hljs-params">first_name, last_name</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;返回整洁的名字&quot;&quot;&quot;</span><br>    full_name = first_name + <span class="hljs-string">&#x27; &#x27;</span> + last_name<br>    <span class="hljs-keyword">return</span> full_name.title()<br><br><br>formatted_names = []<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;please enter your name below.&quot;</span>)<br>    f_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;First name:&quot;</span>)<br>    l_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Last name:&quot;</span>)<br><br>    form_name = get_formatted_name(f_name, l_name)<br>    formatted_names.append(form_name)<br><br>    tips = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter &quot;quit&quot; to leave!&#x27;</span>)<br>    <span class="hljs-keyword">if</span> tips == <span class="hljs-string">&quot;quit&quot;</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(formatted_names)<br></code></pre></td></tr></table></figure><ol start="2"><li>返回字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_person</span>(<span class="hljs-params">first_name, last_name</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;返回字典&quot;&quot;&quot;</span><br>    person = &#123;<span class="hljs-string">&#x27;first&#x27;</span>: first_name, <span class="hljs-string">&#x27;last&#x27;</span>: last_name&#125;<br>    <span class="hljs-keyword">return</span> person<br><br><br>musician = build_person(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_person</span>(<span class="hljs-params">first_name, last_name, age=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;将参数变为可选&quot;&quot;&quot;</span><br>    person = &#123;<span class="hljs-string">&#x27;first&#x27;</span>: first_name, <span class="hljs-string">&#x27;last&#x27;</span>: last_name&#125;<br><br>    <span class="hljs-keyword">if</span> age:<br>        person[<span class="hljs-string">&#x27;age&#x27;</span>] = age<br>    <span class="hljs-keyword">return</span> person<br><br><br>musician = build_person(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>, <span class="hljs-number">23</span>)<br><span class="hljs-built_in">print</span>(musician)<br><span class="hljs-string">&#x27;&#x27;&#x27;------------------------------------------&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;hendrix&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;hendrix&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">23</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h3><p>传递列表，不是将函数值返回到列表中，而是将已有列表中的值作为函数的输入来处理。</p><ol><li>向列表中用户发送问候</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 向列表中用户发送问候</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet_users</span>(<span class="hljs-params">names</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;函数可以直接处理列表，无需将列表中变量提取出来&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span>+name+<span class="hljs-string">&quot;!&quot;</span>)<br><br>users = [<span class="hljs-string">&#x27;ss&#x27;</span>,<span class="hljs-string">&#x27;ee&#x27;</span>,<span class="hljs-string">&#x27;rr&#x27;</span>,<span class="hljs-string">&#x27;gg&#x27;</span>]<br>greet_users(users)<br></code></pre></td></tr></table></figure><ol start="2"><li>待处理事件处理完毕后存储在已处理列表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将带处理的表格依次处理并传送到已处理列表</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 不使用函数的做法</span><br>undeal_lists = [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>]<br>deal_lists = []<br><br><span class="hljs-keyword">while</span> undeal_lists:<br>    thing = undeal_lists.pop(<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;deal with &quot;</span>+thing)<br>    deal_lists.append(thing)<br><br><span class="hljs-built_in">print</span>(deal_lists)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># 不能在for循环中修改列表，以下为错误循环。</span><br><span class="hljs-string">for thing in undeal_lists:</span><br><span class="hljs-string">    print(thing)</span><br><span class="hljs-string">    things = undeal_lists.remove(thing)</span><br><span class="hljs-string">    print(things)</span><br><span class="hljs-string">    deal_lists.append(thing)</span><br><span class="hljs-string">    print(deal_lists)</span><br><span class="hljs-string">    print(undeal_lists)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;--------------------------------&quot;&quot;&quot;</span><br>deal <span class="hljs-keyword">with</span> one<br>deal <span class="hljs-keyword">with</span> two<br>deal <span class="hljs-keyword">with</span> three<br>[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用函数的做法</span><br><span class="hljs-comment"># 使用函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dealist</span>(<span class="hljs-params">undeal_lists, deal_lists</span>):</span><br>    <span class="hljs-keyword">while</span> undeal_lists:<br>        thing = undeal_lists.pop(<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;deal with &quot;</span>+thing)<br>        deal_lists.append(thing)<br>    <span class="hljs-built_in">print</span>(deal_lists)<br><br><br>undeal_lists = [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>]<br>deal_lists = []<br><br>dealist(undeal_lists, deal_lists)<br><span class="hljs-string">&quot;&quot;&quot;---------------------------------&quot;&quot;&quot;</span><br>deal <span class="hljs-keyword">with</span> one<br>deal <span class="hljs-keyword">with</span> two<br>deal <span class="hljs-keyword">with</span> three<br>[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="3"><li>禁止函数修改列表</li></ol><p>本质上就是使用切片法，在函数中创建待处理列表的副本，所有活动在副本中进行，以不影响原始列表的变化。</p><h3 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参(*)"></a>传递任意数量的实参(*)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_pizza</span>(<span class="hljs-params">*toppings</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;一个形参&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(toppings)<br><br>make_pizza(<span class="hljs-string">&#x27;ss&#x27;</span>, <span class="hljs-string">&#x27;ss&#x27;</span>, <span class="hljs-string">&#x27;ee&#x27;</span>, <span class="hljs-string">&#x27;ff&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_pizza</span>(<span class="hljs-params">size, *toppings</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;结合使用位置实参和任意数量实参&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(size)+<span class="hljs-string">&quot; size pizza need toppings below:&quot;</span>)<br>    <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t&quot;</span>+topping)<br><br>make_pizza(<span class="hljs-number">34</span>, <span class="hljs-string">&#x27;pepperoni&#x27;</span>, <span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;green peppers&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_profile</span>(<span class="hljs-params">first, last, **user_info</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;创建一个字典，其中包含我们知道的有关用户的一切&quot;&quot;&quot;</span><br>    profile = &#123;&#125;<br>    profile[<span class="hljs-string">&#x27;first_name&#x27;</span>] = first<br>    profile[<span class="hljs-string">&#x27;last_name&#x27;</span>] = last<br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> user_info.items():<br>        profile[key] = value<br>    <span class="hljs-keyword">return</span> profile<br><br>user_profile = build_profile(<span class="hljs-string">&#x27;albert&#x27;</span>,<span class="hljs-string">&#x27;einstein&#x27;</span>,<br>                                location=<span class="hljs-string">&#x27;princeton&#x27;</span>field=<span class="hljs-string">&#x27;physics&#x27;</span>)<br><span class="hljs-built_in">print</span>(user_profile)<br><br>----------------------------------------------<br>&#123;<span class="hljs-string">&#x27;first_name&#x27;</span>: <span class="hljs-string">&#x27;albert&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>: <span class="hljs-string">&#x27;einstein&#x27;</span>, <span class="hljs-string">&#x27;location&#x27;</span>: <span class="hljs-string">&#x27;princeton&#x27;</span>, <span class="hljs-string">&#x27;field&#x27;</span>: <span class="hljs-string">&#x27;physics&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h2><p>函数的优点之一是，使用它们可以将代码块与主程序分离。通过给函数指定描述性名称，可让主程序容易理解。</p><p>你可以进一步将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。</p><p>通过将函数存储在独立的文件中，可隐藏程序代码的细节，将重点放在程序的高层逻辑上。</p><ol><li>导入模块的方法</li></ol><p>将函数代码对立存储在一个文件中，这个文件便可被成为模块.</p><p>如将以下函数独立存储并命名为pizza.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_pizza</span>(<span class="hljs-params">size, *toppings</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;结合使用位置实参和任意数量实参&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(size)+<span class="hljs-string">&quot; size pizza need toppings below:&quot;</span>)<br>    <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t&quot;</span>+topping)<br><br>make_pizza(<span class="hljs-number">34</span>, <span class="hljs-string">&#x27;pepperoni&#x27;</span>, <span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;green peppers&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在主程序中导入该模块的方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pizza<br>pizza.make_pizza(<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;pep&#x27;</span>, <span class="hljs-string">&#x27;mushroom&#x27;</span>)<br><br><span class="hljs-keyword">import</span> pizza <span class="hljs-keyword">as</span> pa<br>pa.make_pizza(<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;pep&#x27;</span>.<span class="hljs-string">&#x27;mushroom&#x27;</span>)<br><br><span class="hljs-keyword">import</span> make_pizza <span class="hljs-keyword">from</span> pizza<br>make_pizza(<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;pep&#x27;</span>.<span class="hljs-string">&#x27;mushroom&#x27;</span>)<br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">from</span> pizza<br><span class="hljs-comment"># 导入该模块中的所有的函数，但是一般不会如此使用</span><br><span class="hljs-comment"># 最好还是使用完全限定方式表示函数，以便理解</span><br>make_pizza(<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;pep&#x27;</span>.<span class="hljs-string">&#x27;mushroom&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="函数编写指南"><a href="#函数编写指南" class="headerlink" title="函数编写指南"></a>函数编写指南</h2><ul><li><p>应该函数描述性名称，且只在其中使用小写字母和下划线。</p><blockquote><p>描述性名称可以帮助自己和他人理解代码想要做什么。<br>给模块命名也应如此</p></blockquote></li><li><p>每个函数都应包含简要的阐述其功能的注释，该注释紧跟函数名之后，并采用文档字符串的格式。</p><blockquote><p>文档良好的函数让其他程序员只需阅读文档字符串中的描述就能够使用它们。</p></blockquote></li><li><p>给形参指定默认值时，等号两边不要有空格。对于函数调用的关键词实参也应如此。</p></li><li><p>建议代码行的长度不超过79个字符。如果形参很多，可以在回车缩进在下一行形参开始处继续编写。</p></li><li><p>如果程序包含多个函数，可使用两个空行将相邻的函数分开，这样更容易理解函数的起始位置。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础6</title>
    <link href="/2021/06/08/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%806/"/>
    <url>/2021/06/08/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%806/</url>
    
    <content type="html"><![CDATA[<h1 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a>用户输入和while循环</h1><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your name:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi, &quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>)<br>--------------------------<br>your name: john <span class="hljs-comment">#(这里需要自己输入)</span><br>Hi john!<br></code></pre></td></tr></table></figure><p><code>input()</code>在刚开始学习python时就在使用了，不再多讲。</p><p>如果需要输入的如 age 之类的数值，input函数会自动转换为字符串，<br>需要使用<code>int()</code>函数转换为数值。</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>一般来说，循环有两类：for循环和while循环。判断语句就是if判断。</p><p>for循环以及其与if判断的结合，我们已经讲过并且一直在使用。</p><p>本章介绍while循环，及其适用场景。</p><h3 id="基础循环"><a href="#基础循环" class="headerlink" title="基础循环"></a>基础循环</h3><p>while循环的含义为直到不满足其后的条件，结束循环。第一个不满足条件的值不进入循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">current_num = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> current_num &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(current_num)<br>    current_num += <span class="hljs-number">1</span> <br>    <span class="hljs-comment"># current_num = current_num + 1</span><br><span class="hljs-comment">#----------------------------------</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">tip1 = <span class="hljs-string">&#x27;what you sade, what I say&#x27;</span><br>tip1 += <span class="hljs-string">&#x27;\nif you want to leave, enter &quot;quit&quot;&#x27;</span><br><br>mess = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> mess != <span class="hljs-string">&#x27;quit&#x27;</span>:<br>    mess = <span class="hljs-built_in">input</span>(tip1)<br><br>    <span class="hljs-keyword">if</span> mess != <span class="hljs-string">&#x27;quit&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(mess)<br></code></pre></td></tr></table></figure><p>这里面有一些小细节：</p><ul><li><code>+=</code>代表的含义，将自己与其后的数据相加并重新赋值给自己</li><li>首先定义一个变量才能进入循环，即使这个变量是个空字符串</li><li>在很多情况下<code>!=</code>比<code>=</code>用的还要多 </li></ul><h3 id="使用标志-active"><a href="#使用标志-active" class="headerlink" title="使用标志(active)"></a>使用标志(active)</h3><p>在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否出活动状态。这个变量被称作<strong>标志</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自己编写标志</span><br>message = <span class="hljs-string">&quot; &quot;</span><br><br><span class="hljs-keyword">if</span> message != <span class="hljs-string">&quot;quit&quot;</span>:<br>    active = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">while</span> active:<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your name:&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> message != <span class="hljs-string">&quot;quit&quot;</span>:<br>        <span class="hljs-built_in">print</span>(message)<br>    <br>    <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 这是后来添加的，否则进入无限循环</span><br>        active = Fals<br></code></pre></td></tr></table></figure><p>上面的代码，反映出自己对while标志和多情形判断的理解不够。</p><p>while 循环的条件为 active，但是 “active = ture” 在循环开始前就已经成立了，并且并没有再次出现在循环中，以至于成为了一个无限循环。</p><p>来看看书中的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">active = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">while</span> active:<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your name:&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;quit&quot;</span>:<br>        active = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><p>从行数上来看，它也就是比我少一两行而已。</p><p>但是我用了两个判断，范例用了一个。</p><h3 id="退出循环-break"><a href="#退出循环-break" class="headerlink" title="退出循环(break)"></a>退出循环(break)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">&quot;\nPlease enter the name of a city you have visited:&quot;</span><br>prompt += <span class="hljs-string">&quot;\n(Enter &#x27;quit&#x27; when you are finished.)&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    city = <span class="hljs-built_in">input</span>(prompt)<br><br>    <span class="hljs-keyword">if</span> city == <span class="hljs-string">&quot;quit&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;d love to go to &quot;</span> + city.title() + <span class="hljs-string">&quot;!&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>while true</code>表示循环将不断运行，一直满足条件。</li><li>直到遇见<code>break</code>语句，将结束运行。</li><li>在任何<code>python</code>循环中都可以使用<code>break</code>语句，无论<code>for循环</code>还是<code>while循环</code></li></ul><h3 id="继续循环-continue"><a href="#继续循环-continue" class="headerlink" title="继续循环(continue)"></a>继续循环(continue)</h3><p>有时，我们需要让循环在满足一些条件时，不打印任何信息，然后返回循环开头，重新进入循环。这时可以用到<code>continue</code>。</p><p>比如只打印10以内的奇数时。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不使用 &#x27;continue&#x27;</span><br>x = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> x &lt;= <span class="hljs-number">10</span>:<br>    x += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-comment"># 使用&#x27;continue&#x27;</span><br><br>x = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> x&lt;= <span class="hljs-number">10</span>:<br>    x += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h3 id="避免无限循环-CTRL-C"><a href="#避免无限循环-CTRL-C" class="headerlink" title="避免无限循环(CTRL+C)"></a>避免无限循环(CTRL+C)</h3><p>有时在使用循环时，由于失误会造成无限循环。</p><p>我们需要极力避免这种情况，但是若真的发生，可用以下两种方法：</p><ol><li>CTRL+C强制结束终端运行</li><li>关闭显示程序输出的终端窗口</li></ol><h2 id="使用循环处理列表和字典"><a href="#使用循环处理列表和字典" class="headerlink" title="使用循环处理列表和字典"></a>使用循环处理列表和字典</h2><p>for循环是一种遍历列表的有效方式，但在for循环中不应该修改列表，否则将导致python难以跟踪其中的元素。</p><p>要在遍历列表的同时对其进行修改，可使用while循环。</p><h3 id="在列表之间移动元素"><a href="#在列表之间移动元素" class="headerlink" title="在列表之间移动元素"></a>在列表之间移动元素</h3><p>假设有一个列表，其中包含新注册但还未验证的网站用户；验证这些用户后，如何将他们移到另外一个已验证用户列表中呢？一种方法是使用一个while循环，在验证用户的同时将其从未验证用户列表中提取出来，再将其添加到已验证列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先，创建一个待验证用户列表</span><br><span class="hljs-comment"># 和一个用于存储已验证用户的列表</span><br>unconfirmed_users = [<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;chen&quot;</span>,<span class="hljs-string">&quot;leon&quot;</span>]<br>confirmed_users = []<br><br><span class="hljs-comment"># 验证每个用户，直到没有未验证用户为止</span><br><span class="hljs-comment"># 将每个经过验证的用户都移到已验证用户列表中</span><br><br><span class="hljs-keyword">while</span> unconfirmed_users:<br>    current_user = unconfirmed_users.pop()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Verifying user: &quot;</span> + current_user.title())<br>    confirmed_users.append(current_user)<br><br><span class="hljs-comment"># 显示所有已验证用户</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nThe following users have been confirmed:&quot;</span>)<br><span class="hljs-keyword">for</span> confirmed_user <span class="hljs-keyword">in</span> confirmed_users:<br>    <span class="hljs-built_in">print</span>(confirmed_user.title())<br></code></pre></td></tr></table></figure><h3 id="删除包含特定值的所有列表元素"><a href="#删除包含特定值的所有列表元素" class="headerlink" title="删除包含特定值的所有列表元素"></a>删除包含特定值的所有列表元素</h3><p>一开始，我以为只是在while循环中使用判断语句，但是看了范例才知道，没那么麻烦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">pets = [<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;goldfish&quot;</span>,<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;rabbit&quot;</span>]<br><span class="hljs-built_in">print</span>(pets)<br><br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">in</span> pets:<br>    pets.remove(<span class="hljs-string">&#x27;cat&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(pets)<br></code></pre></td></tr></table></figure><h3 id="使用用户输入来填充字典"><a href="#使用用户输入来填充字典" class="headerlink" title="使用用户输入来填充字典"></a>使用用户输入来填充字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用用户输入来填充字典</span><br><br>responses = &#123;&#125;<br><br><span class="hljs-comment"># 设置一个标志，指出调查是否继续</span><br>polling_active = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">while</span> polling_active:<br>    <span class="hljs-comment"># 提示输入被调查者的姓名和回答</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\nWhat&#x27;s your name?&quot;</span>)<br>    response = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How old are you?&quot;</span>)<br>    <span class="hljs-comment"># 在这里若是可以限定并提示填写者只能填写数字就好了</span><br><br>    <span class="hljs-comment"># 将答案存储在字典中</span><br>    responses[name] = response<br><br>    <span class="hljs-comment"># 看看是否还有人要参与调查</span><br>    repeat = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Would you like to let another person respond?(yes/no)&quot;</span>)<br>    <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&quot;no&quot;</span>:<br>        polling_active = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 调查结束，显示结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---Poll Results---&quot;</span>)<br><span class="hljs-keyword">for</span> name, respond <span class="hljs-keyword">in</span> responses.items():<br>    <span class="hljs-built_in">print</span>(name + <span class="hljs-string">&#x27;:&#x27;</span> + respond)<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节课内容较多，但主要还是在于while循环。</p><p>循环的基本知识、标志、结束循环、继续循环，</p><p>以及如何使用while循环对列表进行增删修改，</p><p>和如何使用while循环进行字典的交互式内容添加。</p>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础5</title>
    <link href="/2021/06/07/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%805/"/>
    <url>/2021/06/07/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%805/</url>
    
    <content type="html"><![CDATA[<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>在python中，字典是一系列键-值对。每个键都与一个值相关联，你可以使用键来访问相关联的值。相关联的值可以是数字、字符串、列表乃至字典。事实上可以将任何python对象用作字典中的值。</p><p>字典的形式是唯一的，但是向字典中添加内容时，是有逻辑的。</p><p>按照向字典中添加的内容，字典可以被分为两类：同一对象的不同属性的字典 + 相似对象的同一属性的字典。</p><h2 id="字典的基础知识"><a href="#字典的基础知识" class="headerlink" title="字典的基础知识"></a>字典的基础知识</h2><h3 id="创建与简单操作"><a href="#创建与简单操作" class="headerlink" title="创建与简单操作"></a>创建与简单操作</h3><blockquote><p>创建字典</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">alien_0 = &#123;<span class="hljs-string">&#x27;color&#x27;</span>:<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;point&#x27;</span>:<span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(alien_0)<br><span class="hljs-built_in">print</span>(alien_0[<span class="hljs-string">&#x27;color&#x27;</span>])<br>----------------------------------------<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;point&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>green<br></code></pre></td></tr></table></figure><ul><li>在python中，字典用<code>&#123; &#125;</code>表示；</li><li>每个键都与一个值相关联，键和值直接用<code>:</code>隔开，键值对之间用<code>,</code>隔开；</li><li>指定字典名和键名时，将返回其对应的值。</li></ul><blockquote><p>添加键-值对</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">alien_0[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">5</span><br>alien_0[<span class="hljs-string">&#x27;y_position&#x27;</span>] = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(alien_0)<br>----------------------------------------<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;point&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">20</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>直接给字典指定新的键-值对，即可完成添加。</li></ul><blockquote><p>修改键-值对</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">alien_0[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(alien_0)<br>----------------------------------------<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;point&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">20</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>对已有的键名重新指定值，即可修改-键值对。</li></ul><blockquote><p>删除键-值对或字典</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> alien_0[<span class="hljs-string">&#x27;point&#x27;</span>]<br><span class="hljs-built_in">print</span>(alien_0)<br><span class="hljs-keyword">del</span> alien_0<br>------------------------------------------<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">20</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="两类字典的逻辑"><a href="#两类字典的逻辑" class="headerlink" title="两类字典的逻辑"></a>两类字典的逻辑</h3><p>上述知识都只是字典的基础知识，在实际中，往往会遇到数量较大的字典创建，这时，我们常常会用到以下两种技巧。</p><blockquote><p>同一对象不同属性字典的创建</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">alien_0 = &#123;&#125;<br><br>alien_0[<span class="hljs-string">&#x27;color&#x27;</span>] = <span class="hljs-string">&#x27;green&#x27;</span><br>alien_0[<span class="hljs-string">&#x27;point&#x27;</span>] = <span class="hljs-number">5</span><br>alien_0[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">0</span><br>alien_0[<span class="hljs-string">&#x27;y_position&#x27;</span>] = <span class="hljs-number">20</span><br><br><span class="hljs-built_in">print</span>(alien_0)<br></code></pre></td></tr></table></figure><ul><li>先创建一个空的字典，然后不断向里面增加新的键-值对。</li></ul><blockquote><p>类似对象同一属性的字典</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">favorite_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: <span class="hljs-string">&quot;python&quot;</span>,<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: <span class="hljs-string">&#x27;java&#x27;</span>,<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    &#125;<br><span class="hljs-built_in">print</span>(favorite_languages)<br></code></pre></td></tr></table></figure><ul><li>这种方法和最初的方法类似，只是结构要好一点，同时有一个细节：在最后一组键-值对后写上<code>,</code>方便后续添加。</li></ul><p>上面两代码，同时展现了两种类型的字典，这两种类型与现实世界一一对应。比如我们有时需要统计一个人的所用信息，有时需要统计一个学院各个班级的班长的姓名等。灵活运用字典，是对现实世界建模的关键。</p><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><p>与列表相同，字典也可以被遍历以便使用。同样使用FOR循环。</p><p>但是有一个细节，需要指定遍历字典的那一部分。</p><blockquote><p>遍历字典中的键-值对(.items())</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> alien_0.items():<br>    <span class="hljs-built_in">print</span>(key + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">str</span>(value))<br><span class="hljs-keyword">for</span> name, language <span class="hljs-keyword">in</span> favorite_languages.items():<br>    <span class="hljs-built_in">print</span>(name + <span class="hljs-string">&quot;&#x27;s favorite languages is &quot;</span> + language)<br>------------------------<br>color:green<br>point:<span class="hljs-number">5</span><br>x_position:<span class="hljs-number">0</span><br>y_position:<span class="hljs-number">20</span><br>jen<span class="hljs-string">&#x27;s favorite languages is python</span><br><span class="hljs-string">sarah&#x27;</span>s favorite languages <span class="hljs-keyword">is</span> java<br>edward<span class="hljs-string">&#x27;s favorite languages is c</span><br><span class="hljs-string">phil&#x27;</span>s favorite languages <span class="hljs-keyword">is</span> python<br></code></pre></td></tr></table></figure><ul><li>在遍历所有键和值时，需要使用<code>.items()</code>指令，并指定进入for循环的两个变量，第一个变量对应键，第二个变量对应值；</li><li>原则上两个变量名可随意命名，但是，最好是遵循以下规则:<ol><li>同一对象不同属性的字典使用变量名为：key,value</li><li>类似对象同一属性的字典使用变量名为可描述性的词</li></ol></li></ul><blockquote><p>遍历字典中的键(.keys())</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> alien_0.keys():<br>    <span class="hljs-built_in">print</span>(key)<br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> favorite_languages.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name:&#x27;</span>+name)<br></code></pre></td></tr></table></figure><blockquote><p>遍历字典中的值(.values())</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> alien_0.values():<br>    <span class="hljs-built_in">print</span>(value)<br><span class="hljs-keyword">for</span> language <span class="hljs-keyword">in</span> favorite_languages.values():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;language:\t&#x27;</span>+language)<br></code></pre></td></tr></table></figure><h2 id="字典嵌套"><a href="#字典嵌套" class="headerlink" title="字典嵌套"></a>字典嵌套</h2><p>字典与列表之间的相互嵌套与字典之间的嵌套。</p><p>通过相互嵌套，完成对复杂事物的建模。</p><h3 id="字典列表（在列表中存储字典）"><a href="#字典列表（在列表中存储字典）" class="headerlink" title="字典列表（在列表中存储字典）"></a>字典列表（在列表中存储字典）</h3><blockquote><p><strong>大致是对同一对象不同属性的字典的扩展，多个对象都具有多个相同的属性</strong></p></blockquote><p>字典列表即包含字典的列表。</p><p>对某一个具体的对象，我们可以使用一个字典来包含它的全部信息，但是当需要使用多个具有相同特征的对象时，我们还能使用单纯的字典来表达吗？</p><p>比如，我们制作消灭外星人的游戏，一个外星人的所有信息比如颜色，大小，分值，位置等等可以放在一个字典里，但是，我们往往需要多个外星人，他们具有相同的属性，只是属性值是不相同的。这时我们需要用到字典列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">aliens = []<br><span class="hljs-comment"># 创建10个相同的外星人的字典列表</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    new_alien = &#123;<br>                <span class="hljs-string">&#x27;color&#x27;</span> : <span class="hljs-string">&#x27;green&#x27;</span>,<br>                <span class="hljs-string">&#x27;point&#x27;</span> : <span class="hljs-number">5</span>,<br>                <span class="hljs-string">&#x27;x_position&#x27;</span> : <span class="hljs-number">0</span>,<br>                <span class="hljs-string">&#x27;y_position&#x27;</span> : <span class="hljs-number">20</span>,<br>                &#125;<br>    aliens.append(new_alien)<br><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens:<br>    <span class="hljs-built_in">print</span>(alien)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;total &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(aliens)) + <span class="hljs-string">&#x27; rows&#x27;</span>)<br><br><span class="hljs-comment"># 将第3到第6各外星人的颜色改变为蓝色</span><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens[<span class="hljs-number">3</span>:<span class="hljs-number">7</span>]:<br>    alien[<span class="hljs-string">&#x27;color&#x27;</span>] = <span class="hljs-string">&#x27;blue&#x27;</span><br>    <span class="hljs-built_in">print</span>(alien)<br><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens:<br>    <span class="hljs-built_in">print</span>(alien)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;total &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(aliens)) + <span class="hljs-string">&#x27; rows&#x27;</span>)<br><br><span class="hljs-comment"># 如果外星人颜色为blue，则将其位置向左移动5</span><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens:<br>    <span class="hljs-keyword">if</span> alien[<span class="hljs-string">&#x27;color&#x27;</span>] == <span class="hljs-string">&#x27;blue&#x27;</span>:<br>        alien[<span class="hljs-string">&#x27;x_position&#x27;</span>] = alien[<span class="hljs-string">&#x27;x_position&#x27;</span>]+<span class="hljs-number">5</span><br>    <span class="hljs-built_in">print</span>(alien)<br></code></pre></td></tr></table></figure><h3 id="列表字典（在字典中存储列表）"><a href="#列表字典（在字典中存储列表）" class="headerlink" title="列表字典（在字典中存储列表）"></a>列表字典（在字典中存储列表）</h3><blockquote><p><strong>大致是对类似对象相同属性的扩展，将相同属性的具体属性值拓展到多个</strong></p></blockquote><p>我们知道在字典中，一个键只能对应一个值，该值可以是数字、字符串、列表等等。</p><p>在上述例子中，我们都是一个键对应一个值（字符串或者数字），如果我们需要处理<strong>一个键对应多条字符串</strong>之类的情况，比如上面 favorite_language 的例子，有一个人最爱两三个语言，该如何存储呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">favorite_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: [<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-string">&#x27;java&#x27;</span>],<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: [<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>],<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: [<span class="hljs-string">&#x27;c&#x27;</span>],<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: [<span class="hljs-string">&#x27;python&#x27;</span>],<br>&#125;<br><span class="hljs-keyword">for</span> name, language <span class="hljs-keyword">in</span> favorite_languages.items():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(language) == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>+name.title() + <span class="hljs-string">&#x27; loves the language:&#x27;</span>+language[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(language) &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>+name.title()+<span class="hljs-string">&#x27;s favorite languages is:&#x27;</span>)<br>        <span class="hljs-keyword">for</span> language <span class="hljs-keyword">in</span> language:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t&#x27;</span> + language.title())<br>--------------------------------<br>Jens favorite languages <span class="hljs-keyword">is</span>:<br>Python<br>Java<br><br>Sarahs favorite languages <span class="hljs-keyword">is</span>:<br>Java<br>C<br><br>Edward loves the language:c<br><br>Phil loves the language:python<br></code></pre></td></tr></table></figure><h3 id="字典字典-在字典中存储字典"><a href="#字典字典-在字典中存储字典" class="headerlink" title="字典字典(在字典中存储字典)"></a>字典字典(在字典中存储字典)</h3><p>将同一个对象的所用信息存储到一个字典中，然后将对应多个对象的多个字典，以对象名为键，存储到一个字典中。</p><p>其逻辑与字典列表相同。都是在处理具有多个相同属性的多个对象的信息存储问题。</p><p>与字典列表相比，在字典中存储字典的代码更加复杂。但或许有时候不得不用呢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建以三个城市名为键的存储对应城市的城市情形的字典的字典</span><br>cites = &#123;&#125;<br><br>shijiazhuang = &#123;<br>    <span class="hljs-string">&#x27;location&#x27;</span>:<span class="hljs-string">&#x27;hebei&#x27;</span>,<br>    <span class="hljs-string">&#x27;population&#x27;</span>:<span class="hljs-number">1000</span>,<br>&#125;<br>beijing = &#123;<br>    <span class="hljs-string">&#x27;location&#x27;</span>:<span class="hljs-string">&#x27;beijing&#x27;</span>,<br>    <span class="hljs-string">&#x27;population&#x27;</span>:<span class="hljs-number">10000</span>,<br>&#125;<br>tianjin = &#123;<br>    <span class="hljs-string">&#x27;location&#x27;</span>:<span class="hljs-string">&#x27;tianjin&#x27;</span>,<br>    <span class="hljs-string">&#x27;population&#x27;</span>:<span class="hljs-number">800</span><br>&#125;<br><br>cites[<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>] = shijiazhuang<br>cites[<span class="hljs-string">&#x27;beijing&#x27;</span>] = beijing<br>cites[<span class="hljs-string">&#x27;tianjin&#x27;</span>] = tianjin<br><br><span class="hljs-keyword">for</span> cite, status <span class="hljs-keyword">in</span> cites.items():<br>    <span class="hljs-keyword">if</span> status[<span class="hljs-string">&#x27;population&#x27;</span>] &gt;= <span class="hljs-number">1000</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>+ cite + <span class="hljs-string">&#x27; is big.&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>+cite+<span class="hljs-string">&#x27; is ok.&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础4</title>
    <link href="/2021/06/06/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%804/"/>
    <url>/2021/06/06/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%804/</url>
    
    <content type="html"><![CDATA[<h1 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h1><h2 id="等值检验"><a href="#等值检验" class="headerlink" title="等值检验"></a>等值检验</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 等值检验 (==必须使用双等号)(!=代表不等检验)</span><br>name = <span class="hljs-string">&#x27;jody&#x27;</span><br><span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;jody&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello,jody!&#x27;</span>)<br><span class="hljs-keyword">elif</span> name != <span class="hljs-string">&#x27;jody&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;who are you&#x27;</span>)<br>--------------------------------------<br>hello,jody!<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">names = [<span class="hljs-string">&#x27;Anan&#x27;</span>,<span class="hljs-string">&#x27;Jody&#x27;</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;wang&#x27;</span>]<br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;wang&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(name.upper())<br>    <span class="hljs-keyword">elif</span> name.lower() == <span class="hljs-string">&#x27;jody&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(name.title())<br>    <span class="hljs-keyword">elif</span> name.upper() == <span class="hljs-string">&#x27;ANAN&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(name)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you may be &#x27;</span>+name)<br>------------------------------------------<br>Anan<br>Jody<br>you may be John<br>WANG<br></code></pre></td></tr></table></figure><ul><li>IF语句可以使用<code>and</code>,<code>or</code>语句来增加检验条件</li><li>else是一条保罗万象但并非必须具备的语句，只要不满足if和elif中的条件，else就会被执行，即使在输入错误的情况下。因此，若知道else语句具体指那种条件，应该使用elif语句。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">available_toppings = [<span class="hljs-string">&#x27;mushroom&#x27;</span>,<span class="hljs-string">&#x27;olives&#x27;</span>,<span class="hljs-string">&#x27;green peppers&#x27;</span>,<br>                      <span class="hljs-string">&#x27;pepperoni&#x27;</span>,<span class="hljs-string">&#x27;pineapple&#x27;</span>]<br>request_toppings = [<span class="hljs-string">&#x27;mushroom&#x27;</span>,<span class="hljs-string">&#x27;fries&#x27;</span>,<span class="hljs-string">&#x27;cheese&#x27;</span>]<br><span class="hljs-keyword">for</span> request_topping <span class="hljs-keyword">in</span> request_toppings:<br>    <span class="hljs-keyword">if</span> request_topping <span class="hljs-keyword">in</span> available_toppings:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a &#x27;</span>+request_topping)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sorry,we don&#x27;t have this&quot;</span>)<br>------------------------------------------------<br>a mushroom<br>sorry,we don<span class="hljs-string">&#x27;t have this</span><br><span class="hljs-string">sorry,we don&#x27;</span>t have this    <br></code></pre></td></tr></table></figure><ul><li>这两个表的if检验挺有意思。</li></ul><h1 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">ages = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>,<span class="hljs-number">9</span>))<br><span class="hljs-keyword">for</span> age <span class="hljs-keyword">in</span> ages:<br>    <span class="hljs-keyword">if</span> age &lt;= <span class="hljs-number">8</span>:<br>            <span class="hljs-built_in">print</span>(age)<br>    <span class="hljs-keyword">elif</span> age <span class="hljs-keyword">in</span> [<span class="hljs-number">9</span>,<span class="hljs-number">20</span>]:<br>        <span class="hljs-built_in">print</span>(age-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">elif</span> age &gt;= <span class="hljs-number">20</span>:<br>        <span class="hljs-built_in">print</span>(age-<span class="hljs-number">10</span>)<br>----------------------------------------------<br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>if 与 for 循环的结合；</li><li>if 与 <code>.title()</code> <code>.upper()</code> <code>.lower()</code> 的结合；</li><li>if 判断语句的等值(==)，不等(!=)以及其他数值判断符号(&gt;,&gt;=,&lt;,&lt;=)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础3</title>
    <link href="/2021/06/06/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%803/"/>
    <url>/2021/06/06/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%803/</url>
    
    <content type="html"><![CDATA[<h1 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h1><p>遍历列表，数值列表，切片与元组。</p><h2 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(bicycles))<br><br><span class="hljs-keyword">for</span> bicycle <span class="hljs-keyword">in</span> bicycles:<br>    <span class="hljs-built_in">print</span>(bicycle)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> bicycles:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>bicycle只是一个符号，或者说临时变量，便于我们理解</li><li>不需提前定义，而且脱离该环境就不起该作用。</li><li>这是FOR循环，列表中有多少元素，print就依次执行多少遍。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">for</span> bicycle <span class="hljs-keyword">in</span> bicycles:<br>    <span class="hljs-built_in">print</span>(bicycle.title() + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;is very good&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Thank you for watching!&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>python 通过缩进来控制语句之间的逻辑关系。</li><li>第一条 print 语句缩进，隶属于 for 循环，故执行三次；</li><li>第二条 print 语句没有缩进，与 for 循环相对独立，故执行一次。</li><li>对于该缩进的语句必须缩进，不该缩进的语句最好不要缩进。</li><li>for 循环的 ： 千万别丢了，否则报错还不知道自己错在哪。</li></ul><h2 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h2><p>使用<code>range()</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建到5就止，不包括5的数组</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(value)<br>----------------------------------<br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment"># 创建从0开始到5为止，不包括5的数值列表</span><br>values = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(values)<br>--------------------------------------<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment"># 步长为2的0-5的数值列表</span><br>values = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(values)<br>--------------------------------------<br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment"># for循环与数值列表的创建</span><br>values = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    value = x**<span class="hljs-number">2</span><br>    values.append(value)<br><span class="hljs-built_in">print</span>(values)<br>----------------------------------------<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment"># 数值列表简单统计计算</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(values))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(values))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(values))<br>----------------------------------------<br><span class="hljs-number">81</span><br><span class="hljs-number">0</span><br><span class="hljs-number">285</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment"># 列表解析，简化数值列表创建</span><br>values = [value**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(values)<br>------------------------------------------<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br></code></pre></td></tr></table></figure><h2 id="切片列表"><a href="#切片列表" class="headerlink" title="切片列表"></a>切片列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(values[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>])<br><span class="hljs-comment"># 从索引2开始，遇见索引3停止，不包括索引3</span><br><span class="hljs-built_in">print</span>(values[:<span class="hljs-number">4</span>])<br><span class="hljs-comment"># 从头开始，到索引4为止，不包括索引4</span><br><span class="hljs-built_in">print</span>(values[<span class="hljs-number">2</span>:])<br><span class="hljs-comment"># 从索引2开始，直到最后一个元素</span><br><span class="hljs-built_in">print</span>(values[-<span class="hljs-number">3</span>:])<br><span class="hljs-comment"># 切片倒数第三个元素到最后</span><br><span class="hljs-built_in">print</span>(values[:])<br><span class="hljs-comment"># 切片所有元素</span><br>-------------------------------------------<br>[<span class="hljs-number">4</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]<br>[<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br>[<span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br></code></pre></td></tr></table></figure><ul><li>切片结果仍为列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment"># 切片后与正常列表没区别，比如FOR循环的使用</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> values[:-<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(value)<br>--------------------------------------------<br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">4</span><br><span class="hljs-number">9</span><br><span class="hljs-number">16</span><br><span class="hljs-number">25</span><br><span class="hljs-number">36</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment"># 复制列表</span><br>numbers = values[:]<br><span class="hljs-built_in">print</span>(numbers)<br>values.append(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(values)<br><span class="hljs-built_in">print</span>(numbers)<br>------------------------------------------<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>, <span class="hljs-number">100</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br></code></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组一般放在了列表内容之中来讲，因为元组本身也是列表，只不过是一种特殊的列表。</p><ul><li>python 将不能修改的值称为不可变的，而不可变的列表被成为元组。</li><li>元组一旦确定，就不可以像列表一样进行增删修改等命令。</li><li>想要修改元组的唯一方式在于重新定义元组，即对该元组所对应的变量名重新赋值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(numbers[<span class="hljs-number">3</span>])<br><br>numbers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(numbers[:])<br>--------------------------<br><span class="hljs-number">4</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><ul><li>元组的形式为<code>()</code>;</li><li>元组可以如列表般正常创建，但不能使用<code>FOR</code>循环创建，因为<code>FOR</code>循环的本质在于一遍一遍的增加值；</li><li>元组可以使用<code>FOR</code>循环遍历元组；</li><li>相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，可使用元组。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础2</title>
    <link href="/2021/06/05/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%802/"/>
    <url>/2021/06/05/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%802/</url>
    
    <content type="html"><![CDATA[<h1 id="列表简介"><a href="#列表简介" class="headerlink" title="列表简介"></a>列表简介</h1><p>在python中用<code>[ ]</code>表示列表，并用逗号来分隔其中元素。</p><p>给列表指定一个复数名称(letters,names,and so on)是个不错的注意。</p><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">bicycles = [<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]<br><span class="hljs-built_in">print</span>(bicycles)<br><span class="hljs-built_in">print</span>(bicycles[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(bicycles[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(bicycles[-<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;my bicycle is &#x27;</span> + bicycles[<span class="hljs-number">2</span>].title())<br>----------------------------------------------------<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]<br>trek<br>specialized<br>redline<br>my bicycle <span class="hljs-keyword">is</span> Redline<br></code></pre></td></tr></table></figure><ul><li>索引从0开始，而非1；</li><li>列表中的元素被提取出来就是一个具体的数据类型，比如字符串、数字等，可以被使用。</li></ul><h2 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h2><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">bicycles[-<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;tata&#x27;</span><br><span class="hljs-built_in">print</span>(bicycles)<br>----------------------------<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;tata&#x27;</span>]<br></code></pre></td></tr></table></figure><ul><li>将新值赋予位置标记</li></ul><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表末尾添加元素</span><br>bicycles.append(<span class="hljs-string">&#x27;fhuang&#x27;</span>)<br><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 列表中任意位置插入元素</span><br>bicycles.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;cona&#x27;</span>)<br><span class="hljs-built_in">print</span>(bicycles)<br><br>----------------------------<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;tata&#x27;</span>, <span class="hljs-string">&#x27;fhuang&#x27;</span>]<br>[<span class="hljs-string">&#x27;cona&#x27;</span>, <span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;tata&#x27;</span>, <span class="hljs-string">&#x27;fhuang&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 根据索引删除值，删除后该值不可再用</span><br><span class="hljs-keyword">del</span> bicycles[-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 根据索引弹出值，该值弹出时可赋值到其他对象</span><br>popped_bicycle = bicycles.pop(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(popped_bicycle)<br><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 根据列表值移除该值</span><br>remove_bicycle = <span class="hljs-string">&#x27;tata&#x27;</span><br>bicycles.remove(remove_bicycle)<br><span class="hljs-built_in">print</span>(remove_bicycle)<br><span class="hljs-built_in">print</span>(bicycles)<br><br>------------------------------------<br>[<span class="hljs-string">&#x27;cona&#x27;</span>, <span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;tata&#x27;</span>, <span class="hljs-string">&#x27;fhuang&#x27;</span>]<br>[<span class="hljs-string">&#x27;cona&#x27;</span>, <span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;tata&#x27;</span>]<br>cona<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;tata&#x27;</span>]<br>tata<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="组织列表-元素排序"><a href="#组织列表-元素排序" class="headerlink" title="组织列表(元素排序)"></a>组织列表(元素排序)</h2><h3 id="永久排序"><a href="#永久排序" class="headerlink" title="永久排序"></a>永久排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 字母升序</span><br>bicycles.sort()<br><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 字母降序</span><br>bicycles.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(bicycles)<br>----------------------------------------<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>]<br>[<span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;trek&#x27;</span>]<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="临时排序"><a href="#临时排序" class="headerlink" title="临时排序"></a>临时排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 临时输出字母升序排序，但原始列表中顺序未变动</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(bicycles))<br><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 临时输出字母降序排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(bicycles,reverse=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(bicycles)<br>----------------------------------------<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>]<br>[<span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;trek&#x27;</span>]<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>]<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>]<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="反转列表"><a href="#反转列表" class="headerlink" title="反转列表"></a>反转列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 倒着打印列表元素，实现列表反转</span><br>bicycles.reverse()<br><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 永久改变列表中元素排序，但是随时可以回到之前的状态</span><br><span class="hljs-comment"># 再反转一次列表就可以了</span><br>bicycles.reverse()<br><span class="hljs-built_in">print</span>(bicycles)<br>--------------------------------------------------<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>]<br>[<span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;trek&#x27;</span>]<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="确定列表长度"><a href="#确定列表长度" class="headerlink" title="确定列表长度"></a>确定列表长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(bicycles)<br><br><span class="hljs-comment"># 从1开始计数，长度为元素真实数量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(bicycles))<br>--------------------------------------<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>]<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础1</title>
    <link href="/2021/06/04/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%801/"/>
    <url>/2021/06/04/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%801/</url>
    
    <content type="html"><![CDATA[<h1 id="变量和简单的数据类型"><a href="#变量和简单的数据类型" class="headerlink" title="变量和简单的数据类型"></a>变量和简单的数据类型</h1><p>第一章本来应讲Python的安装，但是由于本人已经用过一段时间了，因此安装就不讲了。只是稍微提一句ANACONDA。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON">message = <span class="hljs-string">&quot;Hello world!&quot;</span><br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><p>我们添加了一个名为message的变量。每个变量都存储了一个值–与变量相关联的信息。</p><ul><li>在程序中可以随时修改变量的值，而Python将始终记录变量的最新值；</li><li>变量名只能包含字母、数字和下划线，且不能以数字开头。尽量使用小写字母；</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串就是一系列字符。在python中用引号括起来的都是字符串，其中引号可以是单引号也可以是双引号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">name0 = <span class="hljs-string">&#x27;Johnkou London&#x27;</span><br>name1 = <span class="hljs-string">&quot;Jone Ln&quot;</span><br>message0 = <span class="hljs-string">&#x27;&quot;Hi!&quot;,she told to me.&#x27;</span><br>message1 = <span class="hljs-string">&quot;we&#x27;re the world&quot;</span><br>message = name0 + <span class="hljs-string">&quot;:&quot;</span> + message0<br><br><span class="hljs-built_in">print</span>(name0.title())  <span class="hljs-comment">#首字母大写</span><br><span class="hljs-built_in">print</span>(message0.upper())  <span class="hljs-comment">#字符串全部大写</span><br><span class="hljs-built_in">print</span>(message1.lower())  <span class="hljs-comment">#字符串全部小写</span><br><br><span class="hljs-built_in">print</span>(name0 + <span class="hljs-string">&quot;:&quot;</span> + message)    <span class="hljs-comment">#字段拼接</span><br><span class="hljs-built_in">print</span>(message)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;python&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\tpython&quot;</span>)   <span class="hljs-comment"># \t 制表符 空两格</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I\nLove\nPython&quot;</span>)   <span class="hljs-comment"># \n 换行符 换行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You know:\n\tI love Python&quot;</span>)<br><br>language = <span class="hljs-string">&quot; python &quot;</span>   <span class="hljs-comment">#左右都有空白格</span><br><span class="hljs-built_in">print</span>(language.rstrip())  <span class="hljs-comment">#去除右边末尾空格</span><br><span class="hljs-built_in">print</span>(language.lstrip())    <span class="hljs-comment">#去除左边开头空格</span><br><br>language = <span class="hljs-string">&quot; python &quot;</span> <br>language = language.rstrip()    <br>language = language.lstrip()<br><span class="hljs-built_in">print</span>(language)<br></code></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><blockquote><p>整数、浮点数、以及数字转字符<br>+加、-减、*乘、/除、**乘方、%求模（取余数）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON">age = <span class="hljs-number">23</span><br>message = <span class="hljs-string">&quot;Happy &quot;</span> + age + <span class="hljs-string">&quot;rd Birthday&quot;</span> <br><span class="hljs-comment"># 这是错误的，会报错。</span><br><br>age = <span class="hljs-number">23</span><br>message = <span class="hljs-string">&quot;Happy &quot;</span> + <span class="hljs-built_in">str</span>(age) + <span class="hljs-string">&quot;rd Birthday&quot;</span> <br><span class="hljs-comment"># str() 将数据转化为字符串</span><br></code></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment"># 第一种注释方法</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第二种注释</span><br><span class="hljs-string">多行注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--改善性能</title>
    <link href="/2021/06/04/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/"/>
    <url>/2021/06/04/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/</url>
    
    <content type="html"><![CDATA[<h1 id="回顾复习提出要点"><a href="#回顾复习提出要点" class="headerlink" title="回顾复习提出要点"></a>回顾复习提出要点</h1><ul><li>首先，接受硬件建议。</li><li>一般来说，关键的生产DBMS应该运行在自己的专用服务器上。</li><li>MySQL是用一系列的默认设置预先配置的，从这些设置开始通常是很好的。但是过一段时间你可能需要调整内存分配、缓冲区大小等（为查看当前设置，可使用<code>SHOW VARIABLES;</code>和<code>SHOW STATUS</code>）。</li><li>MySQL是一个多用户多线程的DBMS，换言之，它经常同时执行多个任务。一个执行缓慢，降低所有执行。若遇显著性能不良，可使用<code>SHOW PROCESSLIST</code>显示所有活动进程，然后用<code>KILL</code>命令终结某个特定进程。</li><li>总是有布置一种方法编写同一条<code>SELECT</code>语句。应该实验联结、并、子查询等，找出最佳方法。</li><li>使用EXPLAIN语句让MySQL解释它将如何执行一条SELECT语句。</li><li>一般来说，存储过程执行得比一条一条地执行其中各条MySQL语句快。</li><li>应该总是使用正确的数据类型</li><li>决不要检索比需求还要多的数据。谨慎使用<code>SELECT *</code>。</li><li>有的操作（包括INSERT）支持一个可选的<code>DELAYED</code>关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。</li><li>在导入数据时，应该关闭自动提交。</li><li>必须索引数据库表以改善数据检索的性能。</li><li>拒绝过度使用<code>OR</code>条件，可用<code>UNION</code>代替。</li><li>LIKE很慢，最好使用FULLTEXT。</li><li>最重要的规则就是，每条规则在某些条件下都会被打破。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--数据库维护</title>
    <link href="/2021/06/04/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%959/"/>
    <url>/2021/06/04/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%959/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h1><h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><p>MySQL文件总是处于打开或使用的状态，因此，普通的文件备份方式不一定有效。</p><p>下面给出这个问题的可能的解决方案：</p><ul><li>使用命令行实用程序 mysqldump 转储所有数据库内容到某个外部文件。在进行常规备份前这个实用程序应该正常运行，以便能正确地备份转储文件。</li><li>可用命令行实用程序 mysqlhotcopy 从一个数据库复制所有数据（并非所有引擎都可）</li><li>可以使用 MySQL 的 BACKUP TABLE 或 SELECT INTO OUTFILE 转储所有数据到某个外部文件。这两条语句都接受将要创建的系统文件名，此系统文件必须不存在，否则会出错。数据可以用RESTORE TABLE来复原。</li></ul><h2 id="进行数据库维护"><a href="#进行数据库维护" class="headerlink" title="进行数据库维护"></a>进行数据库维护</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SQL">ANALYZE <span class="hljs-keyword">TABLE</span> orders;<br><span class="hljs-comment">-- 检查表键是否正确</span><br><span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">TABLE</span> orders;<br><span class="hljs-comment">-- 检查各种问题</span><br><span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">TABLE</span> CHANGED;<br><span class="hljs-comment">-- 检查自最后一次检查以来改动过的表</span><br><span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">TABLE</span> EXTENDED;<br><span class="hljs-comment">-- 执行最彻底的检查</span><br><span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">TABLE</span> FAST;<br><span class="hljs-comment">-- 只检查未正常关闭的表</span><br><span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">TABLE</span> MEDIUM;<br><span class="hljs-comment">-- 检查所有被删除的链接并进行键检验</span><br><span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">TABLE</span> QUICK;<br><span class="hljs-comment">-- 快速扫描</span><br>REPAIR <span class="hljs-keyword">TABLE</span> orders;<br><span class="hljs-comment">-- 修复表格，但不能常用</span><br></code></pre></td></tr></table></figure><h2 id="诊断启动问题"><a href="#诊断启动问题" class="headerlink" title="诊断启动问题"></a>诊断启动问题</h2><p>命令行选项：</p><ul><li>–help 显示帮助——一个选项列表；</li><li>–safe_mode 装载减去某些最佳配置的服务器；</li><li>–verbose 显示全文本消息</li><li>–version 显示版本信息然后退出。</li></ul><h2 id="查看日志文件"><a href="#查看日志文件" class="headerlink" title="查看日志文件"></a>查看日志文件</h2><p>主要日志文件有以下几种：</p><ul><li>错误文件。它包含启动和关闭问题以及任意关键错误的细节。此日志通常名为hostname.err，位于 data 目录中。此日志名可用<code>--log-error</code>命令行选项更改。</li><li>查询日志。它记录所有MySQL活动，在诊断问题时非常重要。此日志可能变得很大，因此不应该长期使用它。此日志通常名为<code>hostname.log</code>，位于 data 目录中。此名字可以用<code>--log</code>命令行选项更改。</li><li>二进制日志。它记录更新过数据（或可能更新数据）的所有语句。通常名为<code>hostname-bin</code>，位于data目录。可用<code>--log-bin</code>命令行选项更改。</li><li>缓慢查询日志。顾名思义，此日志记录执行缓慢的任何查询。这个日志在确定数据库何处需要优化很有用。通常名为<code>hostname-slow.log</code>，位于data目录中。用<code>--log-slow-queries</code>命令行选项更改。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--安全管理</title>
    <link href="/2021/06/03/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%958/"/>
    <url>/2021/06/03/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%958/</url>
    
    <content type="html"><![CDATA[<h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><p>数据库服务器通常包含关键的数据，确保这些数据的安全和完整需要利用访问控制。本章将学习MySQL的访问控制和用户管理。</p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>针对不同需求人员，授予不同控制权限。</p><p>在现实系统中，严肃使用root权限，仅在不得不使用时使用。</p><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><p>MySQL用户账号和信息存储在名为mysql的MySQL数据库中。一般不需要直接访问mysql数据库和表，但有时需要直接访问。</p><p>比如需要获取所有用户账号列表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL">USE mysql;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h3 id="创建用户账号"><a href="#创建用户账号" class="headerlink" title="创建用户账号"></a>创建用户账号</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> ben IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;p@$$word&#x27;</span>;<br><span class="hljs-comment">-- 创建用户时不一定需要口令，但本代码用`IDENTIFIED BY`给出了一个口令</span><br>RENAME <span class="hljs-keyword">USER</span> ben <span class="hljs-keyword">TO</span> bforta;<br><span class="hljs-comment">-- 重命名用户名</span><br></code></pre></td></tr></table></figure><h3 id="删除用户账号"><a href="#删除用户账号" class="headerlink" title="删除用户账号"></a>删除用户账号</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> bforta;<br></code></pre></td></tr></table></figure><h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h3><p>在创建用户账号后，必须接着分配访问权限。新创建的用户账号没有访问权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> bforta;<br><span class="hljs-comment">-- 现实用户当前所具有的权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> mustknow.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> bforta;<br><span class="hljs-comment">-- 授予bforta对数据库mustknow中所有表的查看的权限</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> mustknow.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> bforta;<br><span class="hljs-comment">-- 取消授予bforta对数据库mustknow中所有表的查看的权限</span><br></code></pre></td></tr></table></figure><p><code>GRANT</code>和<code>REVOKE</code>可在几个层次上控制访问权限：</p><ul><li>整个服务器—-GRANT ALL//REVOKE ALL;</li><li>整个数据库—-(GRANT/REVOKE) ON database.*;</li><li>特定的表—-(GRANT/REVOKE) ON database.table;</li><li>特定的列;</li><li>特定的存储过程。</li></ul><p>下面列出可以授予或撤销的权限</p><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL</td><td align="center">除GRANT OPTION外的所有权限</td></tr><tr><td align="center">ALTER</td><td align="center">使用ALTER TABLE</td></tr><tr><td align="center">ALTER ROUTINE</td><td align="center">使用ALTER PROCEDURE 和DROP PROCEDURE</td></tr><tr><td align="center">CREATE</td><td align="center">使用CREATE TABLE</td></tr><tr><td align="center">CREATE ROUTINE</td><td align="center">使用CREATE ROUTINE</td></tr><tr><td align="center">CREATE TEMPORARY TABLES</td><td align="center">使用CREATE TEMPORARY TABLE</td></tr><tr><td align="center">CREATE USER</td><td align="center">使用CREATE USER, DROP USER, RENAME USER, REVOKE ALL PRIVILEGES</td></tr><tr><td align="center">CREATE VIEW</td><td align="center">使用CREATE VIEW</td></tr><tr><td align="center">DELETE</td><td align="center">使用DELETE</td></tr><tr><td align="center">DROP</td><td align="center">使用DROP TABLE</td></tr><tr><td align="center">EXECUTE</td><td align="center">使用CALL和存储过程</td></tr><tr><td align="center">FILE</td><td align="center">使用SELECT INTO OUTFILE 和LOAD DATA INFILE</td></tr><tr><td align="center">GRANT OPTION</td><td align="center">使用GRANT和REVOKE</td></tr><tr><td align="center">INSERT</td><td align="center">使用INSERT</td></tr><tr><td align="center">LOCK TABLES</td><td align="center">使用LOCK TABLES</td></tr><tr><td align="center">PROCESS</td><td align="center">使用SHOW FULL PROCESSLIST</td></tr><tr><td align="center">RELOAD</td><td align="center">使用FLUSH</td></tr><tr><td align="center">REPLICATION CLIENT</td><td align="center">服务器位置的访问</td></tr><tr><td align="center">REPLICATION SLAVE</td><td align="center">由复制从属关系</td></tr><tr><td align="center">SELECT</td><td align="center">使用SELECT</td></tr><tr><td align="center">SHOW DATABASES</td><td align="center">使用SHOW DATABASES</td></tr><tr><td align="center">SHOW VIEW</td><td align="center">使用SHOW CREATE VIEW</td></tr><tr><td align="center">SHUTDOWN</td><td align="center">使用mysqladmin shutdown(用来关闭MySQL)</td></tr><tr><td align="center">SUPER</td><td align="center">使用CHANGE MASTER, KILL, LOGS, PURGE, MASTER和SET GLOBAL。还允许mysqladmin调试登录</td></tr><tr><td align="center">UPDATE</td><td align="center">使用UPDATE</td></tr><tr><td align="center">USAGE</td><td align="center">无访问权限</td></tr></tbody></table><h3 id="更改口令"><a href="#更改口令" class="headerlink" title="更改口令"></a>更改口令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-keyword">FOR</span> bforta <span class="hljs-operator">=</span> Password(<span class="hljs-string">&#x27;n3w p@$$w0rd&#x27;</span>);<br><span class="hljs-comment">-- 更新用户口令</span><br><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-operator">=</span> Password(<span class="hljs-string">&#x27;joneln&#x27;</span>);<br><span class="hljs-comment">-- 更改自己的口令</span><br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>对于管理MySQL还是很重要的。而且在权限中可以发现，还有一些自己目前没有接触过的指令。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--字符集和校对顺序</title>
    <link href="/2021/06/03/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%957/"/>
    <url>/2021/06/03/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%957/</url>
    
    <content type="html"><![CDATA[<h1 id="全球化和本地化"><a href="#全球化和本地化" class="headerlink" title="全球化和本地化"></a>全球化和本地化</h1><h2 id="字符集和校对顺序"><a href="#字符集和校对顺序" class="headerlink" title="字符集和校对顺序"></a>字符集和校对顺序</h2><p>数据库被用来存储和检索数据。不同的语言和字符需要以不同的方式存储和检索。<br>因此，MySQL需要适应不同的字符集（不同的字母和字符），适应不同的排序和检索数据的方法。</p><ul><li>字符集为字母和符号的集合；</li><li>编码为某个字符集成员的内部集合；</li><li>校对为规定字符如何比较的指令。</li></ul><h2 id="使用字符集和校对顺序"><a href="#使用字符集和校对顺序" class="headerlink" title="使用字符集和校对顺序"></a>使用字符集和校对顺序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span>;<br><span class="hljs-comment">-- 显示所有可用的字符集以及每个字符集的描述和默认校对。</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">COLLATION</span>;<br><span class="hljs-comment">-- 显示所有可用的校对，以及它们适用的字符集。</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable<br>(   column1    <span class="hljs-type">INT</span>,<br>    column2    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>)<br>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> hebrew<br>  <span class="hljs-keyword">COLLATE</span> hebrew_general_ci;<br><br><span class="hljs-comment">-- 创建包含两列的表，并且指定一个字符集和一个校对顺序。</span><br><span class="hljs-comment">-- 如不指定，则系统默认。</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable<br>(<br>        column1    <span class="hljs-type">INT</span>,<br>        column2    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>),<br>        column3    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> latin1 <span class="hljs-keyword">COLLATE</span> latin1_general_ci<br>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> hebrew<br>  <span class="hljs-keyword">COLLATE</span> hebrew_general_ci;<br><br><span class="hljs-comment">-- 在column3处指定区分大小写</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> last_name,first_name <span class="hljs-keyword">COLLATE</span> latin1_general_cs;<br><br><span class="hljs-comment">-- 指定检索结果校对顺序区分大小写。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--管理事务处理</title>
    <link href="/2021/06/02/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%956/"/>
    <url>/2021/06/02/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%956/</url>
    
    <content type="html"><![CDATA[<h1 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h1><p>事务处理（transanction processing）可以用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行。</p><h2 id="ROLLBACK撤销"><a href="#ROLLBACK撤销" class="headerlink" title="ROLLBACK撤销"></a>ROLLBACK撤销</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ordertotals;<br><span class="hljs-keyword">start</span> transaction<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> ordertotals;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ordertotals;<br><span class="hljs-keyword">rollback</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ordertotals;<br></code></pre></td></tr></table></figure><h2 id="COMMIT提交"><a href="#COMMIT提交" class="headerlink" title="COMMIT提交"></a>COMMIT提交</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">start</span> transaction;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> orderitems <span class="hljs-keyword">where</span> order_num <span class="hljs-operator">=</span> <span class="hljs-number">20010</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> orders <span class="hljs-keyword">where</span> order_num <span class="hljs-operator">=</span> <span class="hljs-number">20010</span>;<br><span class="hljs-keyword">commit</span>; <br></code></pre></td></tr></table></figure><ul><li>只有两个DELETE都操作成功，该删除命令才会执行，否则都不执行。</li></ul><h2 id="SAVEPOINT保留点"><a href="#SAVEPOINT保留点" class="headerlink" title="SAVEPOINT保留点"></a>SAVEPOINT保留点</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">savepoint</span> delete1;<br><span class="hljs-comment">-- 设置保留点</span><br><span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> dalete1;<br><span class="hljs-comment">-- 撤销回退到该保留点</span><br></code></pre></td></tr></table></figure><h2 id="更改默认提交行为"><a href="#更改默认提交行为" class="headerlink" title="更改默认提交行为"></a>更改默认提交行为</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">-- 关闭默认提交行为，需使用commit进行手动提交；</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 开启默认提交。</span><br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>就先这样吧，以后刷题的时候再深入学习。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--触发器</title>
    <link href="/2021/06/01/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/"/>
    <url>/2021/06/01/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/</url>
    
    <content type="html"><![CDATA[<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="什么是触发器"><a href="#什么是触发器" class="headerlink" title="什么是触发器"></a>什么是触发器</h2><p>在学习本章之前，所有的SQL命令都是在需要时被我们主动执行。</p><p>而触发器便是让某条命令在特定时间发生时自动执行，具体来讲就是在某个表发生更改时自动处理。</p><p>触发器是响应以下任意语句而自动执行的一条MySQL语句（或位于BEGIN和END语句之间的一组语句）：</p><ul><li>DELETE</li><li>INSERT</li><li>UPDATE</li></ul><p>其他MySQL语句不支持触发器。</p><h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><p>在创建触发器时，需要给出4条信息：</p><ul><li>唯一的触发器名；</li><li>触发器关联的表；</li><li>触发器应该响应的活动 (DELETE、INSERT或UPDATE)；</li><li>触发器何时执行（处理之前或之后）。</li></ul><p>创建触发器命令示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> newproduct AFTER <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> products<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;Product added&#x27;</span>;<br></code></pre></td></tr></table></figure><p>示例分析：</p><blockquote><p>CREATE TRIGGER 用来创建新的触发器；<br>指定触发器触发事件：INSERT\DELETE\UPDATE；<br>指定在事件发生之前还是之后触发：AFTER\BEFORE；<br>这个触发器还指定了<code>FOR EACH ROW</code>因此代码对每个插入行执行；<br>该触发器的含义为，每当products表输入新的记录后，显示<code>Product added</code>。</p></blockquote><ul><li>只有表才支持触发器，视图和临时表不支持；</li><li>每张表最多支持6个触发器：[AFTER\BEFORE][INSERT\DELETE\UPDATE]；</li><li>单一触发器不能与多个事件或多个表关联（一个触发器对应一个事件）</li></ul><h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> newproduct;<br></code></pre></td></tr></table></figure><p>触发器不能更新或覆盖，为了修改一个触发器必须先删除它。</p><h2 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h2><h3 id="INSERT-触发器"><a href="#INSERT-触发器" class="headerlink" title="INSERT 触发器"></a>INSERT 触发器</h3><p>INSERT 触发器在 INSERT 语句执行之前或之后执行。需要知道以下几点：</p><ul><li>在<code>INSERT</code>触发器代码内，可引用一个名为<code>NEW</code>的虚拟表，访问被插入的行；</li><li>在<code>BEFORE INSERT</code>触发器中，<code>NEW</code>中的值也可以被更新（允许更改被插入的值）；</li><li>对于AUTO_INCREMENT列，<code>NEW</code>在<code>INSERT</code>执行之前包含0，在执行之后包含新的自动生成值。</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> neworder AFTER <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> orders<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span> <span class="hljs-keyword">SELECT</span> NEW.order_num;<br></code></pre></td></tr></table></figure><p>分析：</p><blockquote><p>创建名为 neworder 触发器；<br>在 INSERT 之后执行；<br>每次插入新纪录自动生成 order_num。</p></blockquote><h3 id="DELETE-触发器"><a href="#DELETE-触发器" class="headerlink" title="DELETE 触发器"></a>DELETE 触发器</h3><p>DELETE 触发器在 DELETE 语句执行之前或之后执行。需要知道以下几点：</p><ul><li>在<code>DELETE</code>触发器代码内，你可以引用一个名为<code>OLD</code>的虚拟表，访问被删除的行；</li><li><code>OLD</code>中的值全是只读的，不能更新。</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> deleteorder BEFORE <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> orders<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> archive_orders(order_num, order_date, cust_id)<br>    <span class="hljs-keyword">VALUES</span>(OLD.order_num, OLD.order_date, OLD.cust_id);<br><span class="hljs-keyword">END</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>分析：</p><blockquote><p>在订单被删除前执行此触发器；<br>OLD虚拟表中暂时保存将要被删除的记录；<br>在执行该命令之前需要首先创建一个名为<code>archive_orders</code>的表格，在执行该命令时，触发器将会把被删除的数据备份到该表中。</p></blockquote><h3 id="UPDATE-触发器"><a href="#UPDATE-触发器" class="headerlink" title="UPDATE 触发器"></a>UPDATE 触发器</h3><p>UPDATE 触发器在 UPDATE 语句执行之前或之后执行。需要知道以下几点：</p><ul><li>在<code>UPDATE</code>触发器代码内，你可以引用一个名为<code>OLD</code>的虚拟表访问以前(UPDATE之前)的值，引用一个名为<code>NEW</code>的虚拟表访问新更新的值；</li><li>在<code>BEFORE UPDATE</code>触发器中，<code>NEW</code>中的值也可能被更新（允许更改将要用于 UPDATE 语句中的值）；</li><li><code>OLD</code>中的值全部是只读的，不可以更新。</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> updatevendor BEFORE UPDATE <span class="hljs-keyword">ON</span> vendors<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">SET</span> NEW.vend_state <span class="hljs-operator">=</span> <span class="hljs-built_in">Upper</span>(NEW.vend_state);<br></code></pre></td></tr></table></figure><p>分析：<br>大致与上述示例相同，只不过该触发器的作用是在更新vend_state时将其首字母大写。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>MySQL可以支持的触发器功能有限，但是单单这些也挺有用的。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--游标</title>
    <link href="/2021/05/31/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/"/>
    <url>/2021/05/31/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/</url>
    
    <content type="html"><![CDATA[<h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>游标(cursor)是一个存储在MySQL服务器上的数据库查询，它并不是一条SELECT语句，而是被该语句检索出来的结果集。</p><p>在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。</p><p>游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或更改。</p><blockquote><p>MySQL游标只能用于存储过程和存储函数。</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 在存储过程中创建游标</span><br>DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> processorders()<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> ordernumbers <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>    <span class="hljs-keyword">select</span> order_num <span class="hljs-keyword">from</span> orders;<br><br><span class="hljs-keyword">end</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br><br><span class="hljs-comment">-- 删除该存储过程，以便重新创建</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> processorders;<br><br><span class="hljs-comment">-- 在存储过程中创建以及使用游标</span><br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> processorders()<br><span class="hljs-keyword">begin</span><br><br><span class="hljs-comment">-- declare local variables</span><br>    <span class="hljs-keyword">declare</span> o <span class="hljs-type">INT</span>;<br>    <br>    <span class="hljs-comment">-- declare the cursor</span><br>    <span class="hljs-keyword">declare</span> ordernumbers <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>    <span class="hljs-keyword">select</span> order_num <span class="hljs-keyword">from</span> orders;<br>    <br>    <span class="hljs-comment">-- open the cursor</span><br>    <span class="hljs-keyword">open</span> ordernumbers;<br>    <br>    <span class="hljs-comment">-- get order number</span><br>    <span class="hljs-keyword">fetch</span> ordernumbers <span class="hljs-keyword">into</span> o;<br>    <br>    <span class="hljs-comment">-- close the cursor</span><br>    <span class="hljs-keyword">close</span> ordernumbers; <br><span class="hljs-keyword">end</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后这几章就是又不常用又难理解的东西，先大致学习一下，等以后熟悉了基础再回来解决遗留问题。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--存储过程</title>
    <link href="/2021/05/30/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/"/>
    <url>/2021/05/30/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</url>
    
    <content type="html"><![CDATA[<h1 id="存储过程（存储程序）"><a href="#存储过程（存储程序）" class="headerlink" title="存储过程（存储程序）"></a>存储过程（存储程序）</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>存储过程简单来说，就是为了以后的使用而保存的一条或多条MySQL语句的集合。可将其视为批处理文件，虽然他们的作用不仅限于批处理。</li></ul><h2 id="为什么使用存储过程？"><a href="#为什么使用存储过程？" class="headerlink" title="为什么使用存储过程？"></a>为什么使用存储过程？</h2><ul><li>通过把处理封装在容易使用的单元中，简化复杂的操作；</li><li>由于不要求反复建立一系列处理步骤，这保证了数据的完整性（所有开发人员使用同一代码，减少出错的机率）；</li><li>简化对变动的管理（只需在存储过程中修改变动，使用人员甚至可能都不知道已经发生了改变）；</li><li>提高性能（使用存储过程比单独使用SQL语句要更快）；</li><li>简单而言就是：简单、安全、高性能。</li></ul><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><p>存储过程有两种形式，一是没有参数的存储过程，一是包含参数的存储过程。具体形式见代码，及其后解读。</p><p>无参数存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> product_avg_price()<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(prod_price) <span class="hljs-keyword">as</span> priceaverage<br>    <span class="hljs-keyword">from</span> products;<br><span class="hljs-keyword">end</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ；<br></code></pre></td></tr></table></figure><p>有参数存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs SQL">delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> productpricing(<br><span class="hljs-keyword">out</span> pl <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">out</span> ph <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">out</span> pa <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(prod_price)<br>    <span class="hljs-keyword">into</span> pl<br>    <span class="hljs-keyword">from</span> products;<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(prod_price)<br>    <span class="hljs-keyword">INTO</span> ph<br>    <span class="hljs-keyword">from</span> products;<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(prod_price)<br><span class="hljs-keyword">INTO</span> PA<br>    <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">end</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ；<br><br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> ordertotal(<br><span class="hljs-keyword">IN</span> onumber <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">OUT</span> ototal <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">sum</span>(item_price<span class="hljs-operator">*</span>quantity)<br>    <span class="hljs-keyword">FROM</span> orderitems<br>    <span class="hljs-keyword">where</span> order_num <span class="hljs-operator">=</span> onumber<br>    <span class="hljs-keyword">INTO</span> ototal;<br><span class="hljs-keyword">END</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br></code></pre></td></tr></table></figure><ul><li>在MySQL WORKBENCH 中使用存储过程需要首先使用<code>DELIMITER</code>将分隔符从<code>;</code> 转换为<code>//</code>，以便在存储过程中存储<code>;</code>；</li><li>在存储过程编写完毕后不要忘记将默认分隔符转换为<code>;</code>；</li><li>关键字<code>OUT</code>指出相应的参数用来从存储过程传出一个值；MySQL还支持<code>IN</code>（传递给存储过程）和<code>ONOUT</code>（对存储过程传入和传出）类型的参数；</li><li>存储过程写在<code>BEGIN</code>与<code>END</code>之间；</li><li>无论是否需要使用参数，命名的存储过程后必须有<code>( )</code>，当使用参数时，将参数写入<code>( )</code>中；</li><li>每个参数必须指定参数类型，本代码中制定为十进制类型。</li></ul><h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2><p>对应上面两类型的存储过程，有两种存储过程使用类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 无参数类型：</span><br><span class="hljs-keyword">call</span> product_avg_price();<br><br><span class="hljs-comment">-- 有参数类型：</span><br><span class="hljs-keyword">call</span> productpricing(<span class="hljs-variable">@pricelow</span>,<br> <span class="hljs-variable">@procehigh</span>,<br>                    <span class="hljs-variable">@priceaverage</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@pricelow</span>;<br><span class="hljs-comment">-- 有IN的参数类型</span><br><span class="hljs-keyword">call</span> ordertotal(<span class="hljs-number">20005</span>, <span class="hljs-variable">@ototal</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@ototal</span>;<br></code></pre></td></tr></table></figure><ul><li>没有参数的存储过程直接使用<code>CALL</code>语句加存储过程名就可以；</li><li>对于包含<code>OUT</code>参数的存储过程，首先对各自参数命名一个对应的变量名；</li><li><code>IN</code>参数代表需要向存储过程输入数据，因此需要先<code>IN</code>对应的输入参数数据和<code>OUT</code>对应的变量名。</li><li>MySQL系统中所有的变量名必须以<code>@</code>开头。</li></ul><h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> product_avg_price;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> productpricing IF <span class="hljs-keyword">EXISTS</span>; <br></code></pre></td></tr></table></figure><ul><li>删除存储过程不用在存储过程名后加<code>( )</code>;</li><li>第一条代码是直接删除，如果该存储过程不存在，则系统会报错；</li><li>第二条代码是仅当存在删除，如果不存在也不会产生错误。</li></ul><h2 id="建立智能存储过程"><a href="#建立智能存储过程" class="headerlink" title="建立智能存储过程"></a>建立智能存储过程</h2><p>至今为止使用的所有存储过程基本上都是封装MySQL简单的SELECT语句。虽然有效，但是效率或许甚至不如直接使用这些简单的SELECT语句。</p><p>只有在存储过程内包含业务规则和智能处理时，存储过程的威力才能显示出来。</p><p>考虑这个场景。你获得和以前一样的订单合计，但是需要对合计增加营业税，不过只针对某些客户。那么，你需要做下面几件事：</p><ol><li>获得合计（与以前一样）；</li><li>把营业税有条件地添加到合计；</li><li>返回合计（带或者不带税）。</li></ol><p>存储过程完整工作如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> ordertotal;<br><span class="hljs-comment">-- 在之前已经创建该存储过程，需要先删除</span><br>DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-comment">-- NAME: ordertotal</span><br><span class="hljs-comment">-- Parameters: onumber = order number</span><br><span class="hljs-comment">-- taxable = 0 if not taxable, 1 if tanable</span><br><span class="hljs-comment">-- ototal = order total variable</span><br><span class="hljs-comment">-- -----------------------------------------------------</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> ordertotal(<br><span class="hljs-keyword">in</span> onumber <span class="hljs-type">int</span>,<br>    <span class="hljs-keyword">in</span> taxable <span class="hljs-type">boolean</span>,<br>    <span class="hljs-keyword">OUT</span> ototal <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br>comment<span class="hljs-string">&#x27;Obtain order total, optionally adding tax&#x27;</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">-- declare variable for total</span><br>    <span class="hljs-keyword">DECLARE</span> total <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">-- declare tax percentage</span><br>    <span class="hljs-keyword">declare</span> taxrate <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">6</span>;<br>    <br>    <span class="hljs-comment">-- Get the order total</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">sum</span>(item_price<span class="hljs-operator">*</span>quantity)<br>    <span class="hljs-keyword">FROM</span> orderitems<br>    <span class="hljs-keyword">where</span> order_num <span class="hljs-operator">=</span> onumber<br>    <span class="hljs-keyword">INTO</span> total;<br>    <br>    <span class="hljs-comment">-- Is this taxable?</span><br>    IF taxable <span class="hljs-keyword">THEN</span><br><span class="hljs-keyword">select</span> total<span class="hljs-operator">+</span>(total<span class="hljs-operator">/</span><span class="hljs-number">100</span><span class="hljs-operator">*</span>taxrate) <span class="hljs-keyword">INTO</span> total;<br><span class="hljs-keyword">END</span> IF;<br>    <br><span class="hljs-comment">-- AND finally, save to out variable</span><br>        <span class="hljs-keyword">SELECT</span> total <span class="hljs-keyword">INTO</span> ototal;<br><span class="hljs-keyword">END</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><ul><li>当代码复杂时，增加注释是一个好习惯。</li><li>使用<code>DECLARE</code>定义局部变量。其中taxable为布尔值，taxrate为整数型且定义了默认值。</li><li>IF语句检查taxable是否为真，若为真增加营业税。</li><li><code>COMMENT</code>不是必须的，但如果给出将在<code>SHOW PROCEDURE STATUS</code>的结果中显示。</li></ul><p>那么该代码如何运行呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CALL</span> ordertotal(<span class="hljs-number">20005</span>, <span class="hljs-number">1</span>, <span class="hljs-variable">@total</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@total</span>;<br><br><span class="hljs-keyword">call</span> ordertotal(<span class="hljs-number">20005</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">@total</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@total</span>;<br></code></pre></td></tr></table></figure><blockquote><p>taxable为<code>BOOLEAN</code>（布尔值），指定为0表示假，指定为1表示为真（实际上指定非零值都表示为真）</p></blockquote><h2 id="检查存储过程"><a href="#检查存储过程" class="headerlink" title="检查存储过程"></a>检查存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">procedure</span> ordertotal;<br></code></pre></td></tr></table></figure><p>使用该命令可以查看该存储过程何时、由谁创建等详细信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">PROCEDURE</span> STATUS;<br></code></pre></td></tr></table></figure><p>该代码可以列出所有存储过程。为限制其输出，可使用LIKE指定一个过滤模式，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">PROCEDURE</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;ordertotal&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这是自学习SQL语言后遇到的第一章很难理解的章节，并不像其他章节一样看一遍，然后就可以输入了。</p><p>尤其是最后一个例子需要再次好好研究研究。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--视图</title>
    <link href="/2021/05/29/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/"/>
    <url>/2021/05/29/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</url>
    
    <content type="html"><![CDATA[<h1 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h1><h2 id="什么是视图"><a href="#什么是视图" class="headerlink" title="什么是视图"></a>什么是视图</h2><p>视图是对检索过程的封装。<br>我们知道，当使用计算字段时，我们可以对其进行别名命名，以简化检索命令。<br>同样的道理，当我们需要重复使用某一段检索命令时，我们也可以对其进行“别名命名”，也即打包，使其成为视图，以供我们使用。</p><p>我们为什么要使用视图呢？</p><ol><li>重复SQL语句；</li><li>简化复杂的SQL操作；</li><li>使用表的组成部分而不是整个表；</li><li>保护数据；</li><li>更改数据格式和表示</li></ol><p>创建视图的规则：</p><ul><li>与表一样，视图必须唯一命名；</li><li>对于可以创建的视图数目没有限制；</li><li>为了创建视图，必须具有一定的权限；</li><li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图；</li><li><code>ODER BY</code> 可以出现在视图中，但是，如果从该视图检索数据的<code>SELECT</code>语句中也包含<code>ORDER BY</code>，那么，该视图中<code>ORDER BY</code>语句将被覆盖；</li><li>视图不能有索引，也不能有关联的触发器或默认值；</li><li>视图可以和表一起使用。</li></ul><p>使用视图的基本语句：</p><blockquote><p><code>CREATE VIEW view_name</code>来创建视图；<br><code>SHOE CREATE VIEW view_name</code>来查看创建视图的语句；<br><code>DROP VIEW view_name</code>来删除视图；<br>跟新视图时，可以先DROP 后CREATE，也可以直接用<code>CREATE OR REPLACE VIEW</code>。</p></blockquote><h2 id="如何创建视图"><a href="#如何创建视图" class="headerlink" title="如何创建视图"></a>如何创建视图</h2><p>下面讲述几种创建视图的场景，也可以说是创建视图的形式，或者是视图的几种作用。</p><h3 id="联结性质视图"><a href="#联结性质视图" class="headerlink" title="联结性质视图"></a>联结性质视图</h3><p>使用视图来简化联结语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-------------------------</span><br><span class="hljs-comment">-- 未使用视图时的语句</span><br><span class="hljs-comment">-------------------------</span><br><span class="hljs-keyword">select</span> cust_name, prod_id<br><span class="hljs-keyword">from</span> customers, orders, orderitems<br><span class="hljs-keyword">where</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id<br>  <span class="hljs-keyword">and</span> orders.order_num <span class="hljs-operator">=</span> orderitems.order_num<br>      <span class="hljs-keyword">and</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BNBG01&#x27;</span>;<br><br><span class="hljs-comment">-------------------------</span><br><span class="hljs-comment">-- 创建视图</span><br><span class="hljs-comment">-------------------------</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> cust_prod <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> cust_name, prod_id<br><span class="hljs-keyword">from</span> customers, orders, orderitems<br><span class="hljs-keyword">where</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id<br>  <span class="hljs-keyword">and</span> orders.order_num <span class="hljs-operator">=</span> orderitems.order_num;<br><br><br><span class="hljs-comment">-------------------------</span><br><span class="hljs-comment">-- 使用视图时的语句</span><br><span class="hljs-comment">-------------------------</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-comment">-- 或者SELECT cust_name或者SELECT cust_name, prod_id</span><br><span class="hljs-keyword">from</span> cust_prod<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BNBG01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="格式化性质视图"><a href="#格式化性质视图" class="headerlink" title="格式化性质视图"></a>格式化性质视图</h3><p>使用视图重新定义数据输出格式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-------------------------------------</span><br><span class="hljs-comment">-- 在第一个视图的基础上检索特殊格式的数据</span><br><span class="hljs-comment">-------------------------------------</span><br><span class="hljs-keyword">select</span> concat(cust_name, <span class="hljs-string">&#x27;(&#x27;</span>, cust_email, <span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">from</span> cust_prod<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BNBG01&#x27;</span>;<br><br><span class="hljs-comment">-----------------------------</span><br><span class="hljs-comment">-- 视图嵌套</span><br><span class="hljs-comment">-----------------------------</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> Name_Email <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span>  prod_id, cust_name, cust_email, concat(cust_name, <span class="hljs-string">&#x27;(&#x27;</span>, cust_email, <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">AS</span> name_email<br><span class="hljs-keyword">from</span> cust_prod;<br><br><span class="hljs-comment">----------------------------</span><br><span class="hljs-comment">-- 使用视图后的格式化检索</span><br><span class="hljs-comment">----------------------------</span><br><span class="hljs-keyword">select</span> name_email<br><span class="hljs-keyword">from</span> Name_Email<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BNBG01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="过滤性质的视图"><a href="#过滤性质的视图" class="headerlink" title="过滤性质的视图"></a>过滤性质的视图</h3><p>使用视图可以用来过滤不想要的数据。</p><p>比如上面的例子检索结果会包含<code>NULL</code>值，当我们只想检索出不含该值的数据时，也可以使用视图封装，具体如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">------------------------</span><br><span class="hljs-comment">-- 未使用过滤性质视图前</span><br><span class="hljs-comment">------------------------</span><br><span class="hljs-keyword">select</span> name_email<br><span class="hljs-keyword">from</span> name_email<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BNBG01&#x27;</span><br>  <span class="hljs-keyword">AND</span> name_email <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">-------------------------</span><br><span class="hljs-comment">-- 创建过滤性质视图</span><br><span class="hljs-comment">-------------------------  </span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> NameViewNN <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">select</span> prod_id, cust_name, cust_email, concat(cust_name, <span class="hljs-string">&#x27;(&#x27;</span>, cust_email, <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">AS</span> name_email<br><span class="hljs-keyword">from</span> name_email<br><span class="hljs-keyword">where</span> name_email <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">--------------------------</span><br><span class="hljs-comment">-- 使用过滤性质视图</span><br><span class="hljs-comment">--------------------------</span><br><span class="hljs-keyword">select</span> name_email<br><span class="hljs-keyword">from</span> NameViewNN<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BNBG01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="计算字段性质视图"><a href="#计算字段性质视图" class="headerlink" title="计算字段性质视图"></a>计算字段性质视图</h3><p>也可以使用视图包装计算字段，具体形式与格式化视图创建类似，本章进行简单的展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-------------------</span><br><span class="hljs-comment">-- 未使用视图前</span><br><span class="hljs-comment">-------------------</span><br><span class="hljs-keyword">select</span> prod_id, <br>   order_num,<br>       quantity,<br>       item_price,<br>       order_item,<br>       quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">as</span> expanded_price<br><span class="hljs-keyword">from</span> orderitems<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BNBG01&#x27;</span>;<br><br><span class="hljs-comment">-------------------</span><br><span class="hljs-comment">-- 视图创建</span><br><span class="hljs-comment">-------------------</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> orderitemsexpanded <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> prod_id, <br>   order_num,<br>       quantity,<br>       item_price,<br>       order_item,<br>       quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">as</span> expanded_price<br><span class="hljs-keyword">from</span> orderitems;<br><br><span class="hljs-comment">-------------------</span><br><span class="hljs-comment">-- 使用视图</span><br><span class="hljs-comment">-------------------</span><br><span class="hljs-keyword">select</span> order_num, expanded_price<br><span class="hljs-keyword">from</span> orderitemsexpanded<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BNBG01&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>视图为虚拟的表，只包含检索结构，不包含数据。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL必知必会》--正则表达式</title>
    <link href="/2021/05/27/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
    <url>/2021/05/27/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>由于MySQL的基础语句已经在上一系列学习过，因此，本系列重在补充尚未涉足之处。</p><h2 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h2><p>在学习python，尤其是学习数据清理时，我们就经常听到正则表达式。<br>我们知道，正则表达式是用来过滤检索数据的。<br>那么，在SQL语句中，我们应该如何使用正则表达式呢？</p><p>在之前，我们已经学过使用<code>LIKE</code>操作符来过滤检索数据了。<br>但是，正如我们所看见的，该方法使用<code>% _</code>等来进行检索过滤明显是过于简单。</p><p>比如，当我们需要检索所有包括数字的文本块时，或者查找并替换所有URL时，<br><code>LIKE</code>操作符这种只能过滤具体某个字母、数字或字符串的方法就显得不合适了。</p><p>这时就需要我们的正则表达式登场了。</p><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><p>正则表达式作为一种相对独立的语言，具有自己特殊的语法和指令。<br>在MySQL语句仅支持部分正则表达式语句，本章介绍的也只是该部分中的大多数。</p><h3 id="基本字符匹配"><a href="#基本字符匹配" class="headerlink" title="基本字符匹配"></a>基本字符匹配</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- ---------------------------</span><br><span class="hljs-comment">-- 检索包含数字 ‘12’ 的prod_name</span><br><span class="hljs-comment">-- ---------------------------</span><br><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;12&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br></code></pre></td></tr></table></figure><p>如果使用<code>LIKE</code>则形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%12%&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br></code></pre></td></tr></table></figure><h3 id="进行OR匹配"><a href="#进行OR匹配" class="headerlink" title="进行OR匹配"></a>进行OR匹配</h3><p>在<code>REGEXP</code>（正则表达式）中使用<code>|</code>代表<code>OR</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;8|12&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br></code></pre></td></tr></table></figure><p>如果使用<code>LIKE</code>则应：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%8%&#x27;</span><br><span class="hljs-keyword">or</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%12%&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- ------------</span><br><span class="hljs-comment">-- MySQL不支持LIKE &#x27;[]&#x27;</span><br><span class="hljs-comment">-- ------------</span><br><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%[8,12]%&#x27;</span> <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br></code></pre></td></tr></table></figure><h3 id="匹配特定的字符"><a href="#匹配特定的字符" class="headerlink" title="匹配特定的字符"></a>匹配特定的字符</h3><p>在正则表达式中使用<code>[ ]</code>来指定特定的字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;[12|18|8] inch&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br><br><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;[128] inch&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br><span class="hljs-comment">-- 这两个结果是一样的，即[128]=[1|2|8]=[12|18|8]=[12188]</span><br><br><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;[^128] inch&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br><span class="hljs-comment">-- ^ = not</span><br></code></pre></td></tr></table></figure><h3 id="匹配范围"><a href="#匹配范围" class="headerlink" title="匹配范围"></a>匹配范围</h3><p>使用<code>-</code>代表范围：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;[12345678] inch&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br><br><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;[1-8] inch&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br></code></pre></td></tr></table></figure><h3 id="匹配特殊字符"><a href="#匹配特殊字符" class="headerlink" title="匹配特殊字符"></a>匹配特殊字符</h3><p>由于很多特殊字符如<code>- .</code>等在正则表达式中常代表特殊含义，直接使用正则表达式来匹配数据中包含<code>.</code>等特殊字符的本身形式会引发错误的匹配。<br>因此，需要使用<code>\\</code>转义符号来强制匹配特殊字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;\\.&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br><span class="hljs-comment">----------------------</span><br><span class="hljs-comment">-- 检索带有 . 的数据</span><br><span class="hljs-comment">----------------------</span><br></code></pre></td></tr></table></figure><blockquote><p>在正则表达式中使用<code>\</code>来代表转义符号，而在SQL中需要再带一个<code>\</code>来代表转义。一个是正则表达式本身来识别，一个是给SQL来识别。<br>下面常用空白元字符：<br>\\f  代表换页<br>\\n  代表换行<br>\\r  代表回车<br>\\t  代表制表<br>\\v  纵向制表</p></blockquote><h3 id="匹配字符类"><a href="#匹配字符类" class="headerlink" title="匹配字符类"></a>匹配字符类</h3><p>为简化字符集合的使用，正则表达式预定义了一些字符集合，成为字符类。</p><table><thead><tr><th align="center">类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">[:alnum:]</td><td align="center">任意字母和数字（同[a-zA-Z0-9])</td></tr><tr><td align="center">[:alpha:]</td><td align="center">任意字符（同[a-zA-Z])</td></tr><tr><td align="center">[:blank:]</td><td align="center">空格和制表（同[\\t]）</td></tr><tr><td align="center">[:cntrl:]</td><td align="center">ASCII控制字符(ASCII 0-31 127)</td></tr><tr><td align="center">[:digit:]</td><td align="center">任意数字[0-9]</td></tr><tr><td align="center">[:graph:]</td><td align="center">与[:print:]相同，但不包含空格</td></tr><tr><td align="center">[:lower:]</td><td align="center">任意小写字母[a-z])</td></tr><tr><td align="center">[:print:]</td><td align="center">任意可打印字符</td></tr><tr><td align="center">[:punct:]</td><td align="center">即不在[:alnum:]也不在[:cntrl:]中的任意字符</td></tr><tr><td align="center">[:space:]</td><td align="center">包括空格在内的任意空白字符[\\f\\n\\r\\t\\v]</td></tr><tr><td align="center">[:upper:]</td><td align="center">任意大写字母[A-Z]</td></tr><tr><td align="center">[:xdigit:]</td><td align="center">任意十六制数字[a-fA-F0-9]</td></tr></tbody></table><h3 id="匹配多个实例"><a href="#匹配多个实例" class="headerlink" title="匹配多个实例"></a>匹配多个实例</h3><p>重复元字符</p><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">0个或多个匹配</td></tr><tr><td align="center">+</td><td align="center">1个或多个匹配</td></tr><tr><td align="center">?</td><td align="center">0各或1各匹配</td></tr><tr><td align="center">{n}</td><td align="center">制定数目匹配</td></tr><tr><td align="center">{n,}</td><td align="center">不少于制定数目的匹配</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配数目的范围(m=&lt;255)</td></tr></tbody></table><p>举个例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name regexp <span class="hljs-string">&#x27;[0-9] inch?&#x27;</span>;<br><span class="hljs-comment">-- -----------</span><br><span class="hljs-comment">-- ? 代表紧邻inch后可以有0个或1各字母，如inchs</span><br><span class="hljs-comment">-- -----------</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name REGEXP <span class="hljs-string">&#x27;[[:digit:]]&#123;4&#125;&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br><span class="hljs-comment">-- 匹配连在一起的4个数字</span><br></code></pre></td></tr></table></figure><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>定位元字符</p><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">文本的开始</td></tr><tr><td align="center">$</td><td align="center">文本的结尾</td></tr><tr><td align="center">[[:&lt;:]]</td><td align="center">词的开始</td></tr><tr><td align="center">[[:&gt;:]]</td><td align="center">词的结尾</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name REGEXP <span class="hljs-string">&#x27;^[0-9\\.]&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_name;<br><span class="hljs-comment">-- 找出以数字（包含小数点）开头的数据</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&gt;</code> 在[ ]之内表示否定NOT<br><code>&gt;</code> 在[ ]之前表示文本开始处</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>除去简单介绍就是各种元字符。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习总结2</title>
    <link href="/2021/05/26/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%932/"/>
    <url>/2021/05/26/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%932/</url>
    
    <content type="html"><![CDATA[<h1 id="总结2"><a href="#总结2" class="headerlink" title="总结2"></a>总结2</h1><p>上一节课总结到第6课数据过滤，本章将总结完剩下的两大主体高级检索数据和跨表操作数据。</p><h2 id="高级检索数据"><a href="#高级检索数据" class="headerlink" title="高级检索数据"></a>高级检索数据</h2><p>拼接字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> prod_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">||</span> prod_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">SELECT</span> Concat(prod_name, <span class="hljs-string">&#x27;(&#x27;</span>, prod_id, <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><p>使用别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> prod_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">as</span> prod_title <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">||</span> prod_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">as</span> prod_title <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">SELECT</span> Concat(prod_name, <span class="hljs-string">&#x27;(&#x27;</span>, prod_id, <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">as</span> prod_title <span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><p>算数计算：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_id, order_price, quantity,<br>        order_price<span class="hljs-operator">*</span>quantity <span class="hljs-keyword">as</span> order_total<br>        quantity0<span class="hljs-operator">+</span>quantity1 <span class="hljs-keyword">as</span> quantity_sum<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">where</span> order_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;20005&#x27;</span>;<br></code></pre></td></tr></table></figure><p>函数计算：</p><blockquote><p>每个DBMS中基本没有一致的命名，本处不再写。</p></blockquote><p>聚集函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(order_price) <span class="hljs-keyword">as</span> price_avg,<br>        <span class="hljs-built_in">COUNT</span>(order_price) <span class="hljs-keyword">as</span> price_count,<br>        <span class="hljs-built_in">MAX</span>(order_price) <span class="hljs-keyword">as</span> price_max,<br>        <span class="hljs-built_in">MIN</span>(order_price) <span class="hljs-keyword">as</span> price_min,<br>        <span class="hljs-built_in">SUM</span>(order_price) <span class="hljs-keyword">as</span> price_sum<br><span class="hljs-keyword">FROM</span> Orders<br><span class="hljs-keyword">WHERE</span> order_price <span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>;<br></code></pre></td></tr></table></figure><p>数据分组：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(order_price) <span class="hljs-keyword">as</span> price_avg,<br>        <span class="hljs-built_in">COUNT</span>(order_price) <span class="hljs-keyword">as</span> price_count,<br>        <span class="hljs-built_in">MAX</span>(order_price) <span class="hljs-keyword">as</span> price_max,<br>        <span class="hljs-built_in">MIN</span>(order_price) <span class="hljs-keyword">as</span> price_min,<br>        <span class="hljs-built_in">SUM</span>(order_price) <span class="hljs-keyword">as</span> price_sum<br><span class="hljs-keyword">FROM</span> Orders<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> prod_id;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(order_price) <span class="hljs-keyword">as</span> price_avg,<br>        <span class="hljs-built_in">COUNT</span>(order_price) <span class="hljs-keyword">as</span> price_count,<br>        <span class="hljs-built_in">MAX</span>(order_price) <span class="hljs-keyword">as</span> price_max,<br>        <span class="hljs-built_in">MIN</span>(order_price) <span class="hljs-keyword">as</span> price_min,<br>        <span class="hljs-built_in">SUM</span>(order_price) <span class="hljs-keyword">as</span> price_sum<br><span class="hljs-keyword">FROM</span> Orders<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> prod_id<br><span class="hljs-keyword">HAVING</span> order_price <span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>;<br></code></pre></td></tr></table></figure><h2 id="跨表操作数据"><a href="#跨表操作数据" class="headerlink" title="跨表操作数据"></a>跨表操作数据</h2><p>利用子查询过滤：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> cust_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> cust_id<br>                 <span class="hljs-keyword">FROM</span> Orders<br>                 <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                    <span class="hljs-keyword">FROM</span> orderItems<br>                                    <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>))<br></code></pre></td></tr></table></figure><p>作为计算字段的子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> cust_name,<br>        cust_state,<br>        (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>        <span class="hljs-keyword">from</span> Orders<br>        <span class="hljs-keyword">WHERE</span> Orders.cust_id <span class="hljs-operator">=</span> Customers.cust_id) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cust_name;<br></code></pre></td></tr></table></figure><p>联结<br>内联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, prod_name, prod_price<br><span class="hljs-keyword">from</span> vendors, products<br><span class="hljs-keyword">WHERE</span> products.vend_id <span class="hljs-operator">=</span> vendors.vend_id;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, prod_name, prod_price<br><span class="hljs-keyword">from</span> vendors <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> products <br>     <span class="hljs-keyword">on</span> vendors.vend_id <span class="hljs-operator">=</span> products.vend_id;<br></code></pre></td></tr></table></figure><p>内联结（多表）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, prod_name, prod_price, order_num<br><span class="hljs-keyword">from</span> vendors, products, orderitems <br><span class="hljs-keyword">where</span> vendors.vend_id <span class="hljs-operator">=</span> products.vend_id <span class="hljs-keyword">and</span><br>products.prod_id <span class="hljs-operator">=</span> orderitems.prod_id; <br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name, cust_contact<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> C, orders <span class="hljs-keyword">AS</span> O, orderitems <span class="hljs-keyword">AS</span> OI<br><span class="hljs-keyword">where</span> C.cust_id <span class="hljs-operator">=</span> O.cust_id <br><span class="hljs-keyword">and</span> O.order_num <span class="hljs-operator">=</span> OI.order_num<br>    <span class="hljs-keyword">and</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>; <br></code></pre></td></tr></table></figure><p>自联结：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> c1.cust_id, c1.cust_name, c2.cust_contact<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> c1, customers <span class="hljs-keyword">as</span> c2<br><span class="hljs-keyword">where</span> c1.cust_name <span class="hljs-operator">=</span> c2.cust_name<br><span class="hljs-keyword">and</span> c1.cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;jim jones&#x27;</span>;<br></code></pre></td></tr></table></figure><p>自然联结：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> C.<span class="hljs-operator">*</span>, O.order_num,O.order_date, <br>OI.item_price, OI.prod_id, OI.quantity<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> C, orders <span class="hljs-keyword">AS</span> O, orderitems <span class="hljs-keyword">AS</span> OI<br><span class="hljs-keyword">where</span> C.cust_id <span class="hljs-operator">=</span> O.cust_id <br><span class="hljs-keyword">and</span> O.order_num <span class="hljs-operator">=</span> OI.order_num<br>    <span class="hljs-keyword">and</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>; <br></code></pre></td></tr></table></figure><p>外联结：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> customers.cust_id, customers.cust_name, orders.order_num<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> orders<br><span class="hljs-keyword">on</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> customers.cust_id, customers.cust_name, orders.order_num<br><span class="hljs-keyword">from</span>  orders <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> customers<br><span class="hljs-keyword">on</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id;<br></code></pre></td></tr></table></figure><p>组合查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fun4All&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_name;<br></code></pre></td></tr></table></figure><p>到这里本系列真正的结束了，明天开始《MySQL必知必会》。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习总结</title>
    <link href="/2021/05/25/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/25/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以整个DBMS操作流程为主线，总结全部已经学习的知识。</p><h2 id="创建表格（17课）"><a href="#创建表格（17课）" class="headerlink" title="创建表格（17课）"></a>创建表格（17课）</h2><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs SQL">USE mustknown;<br><br><span class="hljs-comment">-- ----------------------</span><br><span class="hljs-comment">-- Create Customers table(注释)</span><br><span class="hljs-comment">-- ----------------------</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Customers<br>(<br>  cust_id      <span class="hljs-type">char</span>(<span class="hljs-number">10</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  cust_name    <span class="hljs-type">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  cust_address <span class="hljs-type">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NULL</span> ,<br>  cust_city    <span class="hljs-type">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NULL</span> ,<br>  cust_state   <span class="hljs-type">char</span>(<span class="hljs-number">5</span>)   <span class="hljs-keyword">NULL</span> ,<br>  cust_zip     <span class="hljs-type">char</span>(<span class="hljs-number">10</span>)  <span class="hljs-keyword">NULL</span> ,<br>  cust_country <span class="hljs-type">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NULL</span> ,<br>  cust_contact <span class="hljs-type">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NULL</span> ,<br>  cust_email   <span class="hljs-type">char</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NULL</span> <br>);<br><br></code></pre></td></tr></table></figure><p>定义主键:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- -------------------</span><br><span class="hljs-comment">-- Define primary keys</span><br><span class="hljs-comment">-- -------------------</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Customers <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (cust_id);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> OrderItems <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (order_num, order_item);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Orders <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (order_num);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Products <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (prod_id);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Vendors <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (vend_id);<br></code></pre></td></tr></table></figure><p>定义外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- -------------------</span><br><span class="hljs-comment">-- Define foreign keys</span><br><span class="hljs-comment">-- -------------------</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> OrderItems <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> FK_OrderItems_Orders <span class="hljs-keyword">FOREIGN</span> KEY (order_num) <span class="hljs-keyword">REFERENCES</span> Orders (order_num);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> OrderItems <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> FK_OrderItems_Products <span class="hljs-keyword">FOREIGN</span> KEY (prod_id) <span class="hljs-keyword">REFERENCES</span> Products (prod_id);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Orders <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> FK_Orders_Customers <span class="hljs-keyword">FOREIGN</span> KEY (cust_id) <span class="hljs-keyword">REFERENCES</span> Customers (cust_id);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Products <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> FK_Products_Vendors <span class="hljs-keyword">FOREIGN</span> KEY (vend_id) <span class="hljs-keyword">REFERENCES</span> Vendors (vend_id);<br></code></pre></td></tr></table></figure><p>删除表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">table</span> customers:<br></code></pre></td></tr></table></figure><h2 id="插入、更新和删除数据（15、16课）"><a href="#插入、更新和删除数据（15、16课）" class="headerlink" title="插入、更新和删除数据（15、16课）"></a>插入、更新和删除数据（15、16课）</h2><p>插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- ---------------------</span><br><span class="hljs-comment">-- Populate Orders table</span><br><span class="hljs-comment">-- ---------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Orders(order_num, order_date, cust_id)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">20005</span>, <span class="hljs-string">&#x27;2020-05-01&#x27;</span>, <span class="hljs-string">&#x27;1000000001&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Orders(order_num, order_date, cust_id)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">20006</span>, <span class="hljs-string">&#x27;2020-01-12&#x27;</span>, <span class="hljs-string">&#x27;1000000003&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Orders(order_num, order_date, cust_id)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">20007</span>, <span class="hljs-string">&#x27;2020-01-30&#x27;</span>, <span class="hljs-string">&#x27;1000000004&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Orders(order_num, order_date, cust_id)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">20008</span>, <span class="hljs-string">&#x27;2020-02-03&#x27;</span>, <span class="hljs-string">&#x27;1000000005&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Orders(order_num, order_date, cust_id)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">20009</span>, <span class="hljs-string">&#x27;2020-02-08&#x27;</span>, <span class="hljs-string">&#x27;1000000001&#x27;</span>);<br></code></pre></td></tr></table></figure><p>更新数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL">update customers <span class="hljs-keyword">set</span> cust_email <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;johnkou@github.io&#x27;</span><br><span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000005&#x27;</span>;<br>update customers <span class="hljs-keyword">set</span> cust_email <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;johnkou@github.io&#x27;</span>, cust_state <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CH&#x27;</span><br><span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000005&#x27;</span>;<br></code></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000005&#x27;</span>;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000006&#x27;</span>;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">where</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jon&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="初级检索数据（2、3课）"><a href="#初级检索数据（2、3课）" class="headerlink" title="初级检索数据（2、3课）"></a>初级检索数据（2、3课）</h2><p>完全检索：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> customers;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> products;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> vendors;<br></code></pre></td></tr></table></figure><p>限制检索：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> cust_id, cust_name, cust_state <span class="hljs-keyword">from</span> customers;<br></code></pre></td></tr></table></figure><p>限定检索出的数据不可重复：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> cust_id<br>customers;<br></code></pre></td></tr></table></figure><p>限制检索出的数据的数量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> customers limit <span class="hljs-number">3</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> customers limit <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>添加注释：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 注释</span><br><span class="hljs-comment">/*注释*/</span><br></code></pre></td></tr></table></figure><p>对检索出的数据进行排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> cust_id, cust_name <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_id;<br><span class="hljs-keyword">SELECT</span> cust_id, cust_name <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_id, cust_name;<br><span class="hljs-keyword">SELECT</span> cust_id, cust_name <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_id <span class="hljs-keyword">desc</span>, cust_name;<br></code></pre></td></tr></table></figure><h2 id="过滤数据（4、5、6课）"><a href="#过滤数据（4、5、6课）" class="headerlink" title="过滤数据（4、5、6课）"></a>过滤数据（4、5、6课）</h2><p>初级数据过滤：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> cust_name <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000003&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">where</span> cust_name <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;Jon&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">where</span> cust_name <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;Jon&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> vend_name <span class="hljs-keyword">from</span> vendors <span class="hljs-keyword">where</span> vend_price <span class="hljs-operator">&lt;</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> vend_name <span class="hljs-keyword">from</span> vendors <span class="hljs-keyword">where</span> vend_price <span class="hljs-operator">&lt;=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> vend_name <span class="hljs-keyword">from</span> vendors <span class="hljs-keyword">where</span> vend_price <span class="hljs-operator">!</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> orders <span class="hljs-keyword">where</span> order_price <span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> orders <span class="hljs-keyword">where</span> order_price <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> orders <span class="hljs-keyword">where</span> order_price <span class="hljs-operator">!</span><span class="hljs-operator">&lt;</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> orders <span class="hljs-keyword">where</span> order_price <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">55</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> orders <span class="hljs-keyword">where</span> order_price <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><p>高级数据过滤：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">from</span> orders <span class="hljs-keyword">where</span> order_price <span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> <span class="hljs-keyword">AND</span> cust_id <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;Jon&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> cust_name <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;10000003&#x27;</span> <span class="hljs-keyword">OR</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100000004&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> cust_name <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">where</span> cust_id <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;10000003&#x27;</span> ,<span class="hljs-string">&#x27;100000004&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> cust_name <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">where</span> <span class="hljs-keyword">NOT</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100000003&#x27;</span>;<br><span class="hljs-comment">------------------------</span><br><span class="hljs-comment">-- 计算顺序：AND 优先于 OR</span><br><span class="hljs-comment">-------------------------</span><br></code></pre></td></tr></table></figure><p>特殊数据过滤（通配符）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;FISH%&#x27;</span>;<span class="hljs-comment">--以fish开头的任意数据</span><br><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%FISH&#x27;</span>;<span class="hljs-comment">--以fish结尾的任意数据</span><br><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%fish%&#x27;</span>;<span class="hljs-comment">--任意位置包含fish的数据</span><br><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;F%Y&#x27;</span>;<span class="hljs-comment">--以F开头，以Y结尾的数据</span><br><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_ inch teddy bear&#x27;</span><span class="hljs-comment">--只代表一个字符串</span><br><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;[JM]%&#x27;</span>;<span class="hljs-comment">--任意以J或者M开头的数据</span><br></code></pre></td></tr></table></figure><h2 id="高级检索数据（7、8、9、10课）"><a href="#高级检索数据（7、8、9、10课）" class="headerlink" title="高级检索数据（7、8、9、10课）"></a>高级检索数据（7、8、9、10课）</h2><h2 id="跨表操作数据（11、12、13、14课）"><a href="#跨表操作数据（11、12、13、14课）" class="headerlink" title="跨表操作数据（11、12、13、14课）"></a>跨表操作数据（11、12、13、14课）</h2><p>今天先写这些，明天继续7-14课。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--创建和操纵表</title>
    <link href="/2021/05/24/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9517/"/>
    <url>/2021/05/24/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9517/</url>
    
    <content type="html"><![CDATA[<h1 id="第17课-创建和操纵表"><a href="#第17课-创建和操纵表" class="headerlink" title="第17课 创建和操纵表"></a>第17课 创建和操纵表</h1><p>在此说明：本节课将是该课程系列的最后一节课。本书后面还有几节课，但是由于此后内容在各DBMS中具体实现有所差异，因此书中并未深入讲解各知识的灵活应用。</p><p>敬请期待下一系列《MySQL必知必会》。</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>一般说来，创建表有两种形式：</p><ol><li>多数DBNS都具有交互式创建和管理数据库表的工具；</li><li>表也可以直接用SQL语句操纵。</li></ol><p>表创建基础：</p><ul><li>新表的名字，在关键字<code>CREATE TABLE</code>之后给出；</li><li>表列的名字和定义之间用空格隔开，不同表列和定义之间用逗号隔开；</li><li>有的DBMS还要求指定表的位置。</li></ul><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Products<br>(<br>    prod_id     <span class="hljs-type">char</span>(<span class="hljs-number">10</span>)         <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    prod_name   <span class="hljs-type">char</span>(<span class="hljs-number">254</span>)        <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    prod_price  <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)     <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>  <span class="hljs-keyword">default</span> <span class="hljs-number">10</span>,<br>    prod_desc   text(<span class="hljs-number">1000</span>)       <span class="hljs-keyword">null</span>      <span class="hljs-keyword">default</span>(<span class="hljs-built_in">current_date</span>())<br>);<br></code></pre></td></tr></table></figure><blockquote><p>第一列为列名；<br>第二列为数据类型；<br>第三列为是否允许有空值；<br>第四列为是否设置默认值，不写则默认没有默认值；<br>因各系统差异，上述代码可能在某些DBMS中无法运行。</p></blockquote><h2 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h2><p>更新表<code>ALTER TABLE</code>在各个DBMS中的规定与应用更是有着显著差异。<br>以下是使用<code>ALTER TABLE</code>时需要考虑的事情：</p><ul><li>理想情况下，不要在表中包含数据时对其进行更新。</li><li>所有DBMS都允许给现有的表增加列，不过对所增加的列的数据类型有所限制；</li><li>许多DBMS不允许删除可更改表中已有的列；</li><li>多数DBMS允许重新命名表中的列；</li><li>许多DBMS限制对已经填有数据的列进行更改，对未填写数据的列几乎没有限制。</li></ul><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>删除整个表非常简单，使用<code>DROP TABLE</code>语句即可：</p><p><code>DROP table class;</code></p><h2 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h2><p>各有不同！！！</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本课可以很明显的感觉由于各个DBMS规定不同导致的无法深入学习的无奈。<br>剩下的几章会看完，会做笔记，但是不会再更新到博客上，请见谅。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--更新和删除数据</title>
    <link href="/2021/05/23/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9516/"/>
    <url>/2021/05/23/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9516/</url>
    
    <content type="html"><![CDATA[<h1 id="第16课-更新和删除数据"><a href="#第16课-更新和删除数据" class="headerlink" title="第16课 更新和删除数据"></a>第16课 更新和删除数据</h1><p>上一节课的时候提到SQL常用的四个语句。前面已经讲过了两个<code>SELECT</code>  <code>INSERT</code>，下面将后面两个 <code>UPDATE</code> <code>DELETE</code>。</p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>两种更新数据的  <code>UPDATE</code> 方式：</p><ol><li>更新表中的特定行</li><li>更新表中的所有行</li></ol><p>使用<code>UPDATE</code>语句的三个要素：</p><ol><li>要更新的表</li><li>列名和新值</li><li>确定更新那些行的过滤条件</li></ol><p><strong>某条记录中某个列的数据更新</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">update customers<br><span class="hljs-keyword">set</span> cust_email <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;johnkou@github.io&#x27;</span><br><span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000005&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>某条记录中多列数据更新</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL">update customers<br><span class="hljs-keyword">set</span> cust_email <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;johnkou@github.io&#x27;</span>,<br>cust_state <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CH&#x27;</span><br><span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000005&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>不要忘记列名之间的逗号<code>,</code><br>不要忘记<code>WHERE</code>子句，如果没写该子句，则更新全部行。</p></blockquote><p><strong>更新某条记录中某列的数据为空值</strong>（即删除该数据）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">update customers<br><span class="hljs-keyword">set</span> cust_email <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000005&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除数据的两种<code>DELETE</code>形式：</p><ol><li>删除表中特定行</li><li>删除表中所有行</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000006&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>带着过滤条件则删除特定行，去掉过滤条件则删除所有行；<br><code>DELETE</code>删除整行，删除指定列请使用<code>UPDATE</code>语句；<br><code>DELETE</code>语句从标中删除数据，但不是删除整个表；<br>如果想删除所有行，不要用<code>DELETE</code>，而要使用<code>TRUNCATE TABLE</code>，速度更快（下节课详解）。</p></blockquote><h2 id="更新和删除的指导原则"><a href="#更新和删除的指导原则" class="headerlink" title="更新和删除的指导原则"></a>更新和删除的指导原则</h2><ol><li>除非确实打算更新和删除每一行，否则绝对不要使用不带<code>WHERE</code>子句的<code>UPDATE</code> <code>DELETE</code>语句。</li><li>保证每个表都有主键，并尽可能使用它。</li><li>在<code>UPDATE</code>或<code>DELETE</code>语句使用<code>WHERE</code>子句前，应该先用<code>SELECT</code>进行测试，保证过滤条件的正确性。</li><li>使用强制实施引用完整性的数据库（见第12课？也没提如何操作啊！），这样DBMS将不允许删除其数据与其他表相关联的行。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>更新删除很简单，操作错误很危险。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--插入数据</title>
    <link href="/2021/05/22/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9515/"/>
    <url>/2021/05/22/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9515/</url>
    
    <content type="html"><![CDATA[<h1 id="第15课-插入数据"><a href="#第15课-插入数据" class="headerlink" title="第15课 插入数据"></a>第15课 插入数据</h1><p>本节课介绍如何利用SQL的<code>INSERT</code>语句将数据插入表中。</p><h2 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h2><p>SQL最常用的语句有四个：<code>SELECT</code>  <code>INSERT</code>   <code>UPDATE</code>  <code>DELETE</code>。</p><p>本节课介绍<code>INSERT</code>语句。<br><code>INSERT</code>用来将行插入（或添加）到数据库表。插入的方式有三种：</p><ol><li>插入完整的行；</li><li>插入行的一部分；</li><li>插入某些查询的结果。</li></ol><h3 id="插入完整行"><a href="#插入完整行" class="headerlink" title="插入完整行"></a>插入完整行</h3><p><strong>第一种形式</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> customers<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1000000006&#x27;</span>, <br><span class="hljs-string">&#x27;Toy Land&#x27;</span>,<br>        <span class="hljs-string">&#x27;123 Any Street&#x27;</span>,<br>        <span class="hljs-string">&#x27;New York&#x27;</span>,<br>        <span class="hljs-string">&#x27;NY&#x27;</span>,<br>        <span class="hljs-string">&#x27;11111&#x27;</span>,<br>        <span class="hljs-string">&#x27;USA&#x27;</span>,<br>        <span class="hljs-keyword">null</span>,<br>        <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p><strong>第二种形式</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> customers(cust_id,<br>  cust_name,<br>                      cust_address,<br>                      cust_city,<br>                      cust_state,<br>  cust_zip,<br>                      cust_country,<br>                      cust_contact,<br>                      cust_email)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1000000006&#x27;</span>, <br><span class="hljs-string">&#x27;Toy Land&#x27;</span>,<br>        <span class="hljs-string">&#x27;123 Any Street&#x27;</span>,<br>        <span class="hljs-string">&#x27;New York&#x27;</span>,<br>        <span class="hljs-string">&#x27;NY&#x27;</span>,<br>        <span class="hljs-string">&#x27;11111&#x27;</span>,<br>        <span class="hljs-string">&#x27;USA&#x27;</span>,<br>        <span class="hljs-keyword">null</span>,<br>        <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><blockquote><p>第一种形式相对简单，但是出错率更高，表次序依赖性强，而且移植性差；<br>第二种形式相对繁琐，但是安全性高，应成为我们使用的主要形式；<br>第一种形式中输入的数据必须与表列一一对应，一个也不能少；<br>第二种形式中输入的数据与指定的列名一一对应，且指定的列名不必与原始表格中的次序相同；</p></blockquote><h3 id="插入部分行"><a href="#插入部分行" class="headerlink" title="插入部分行"></a>插入部分行</h3><p>插入部分行的方法，已经给出来了，就是上面的第二种形式。</p><p>在插入记录时，有一部分我们可以省略不写，但是其对应的列必须允许<code>NULL</code>值，或者有默认值，若非如此则报错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> customers(cust_id,<br>  cust_name,<br>                      cust_address,<br>                      cust_city,<br>                      cust_state,<br>  cust_zip,<br>                      cust_country,)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1000000006&#x27;</span>, <br><span class="hljs-string">&#x27;Toy Land&#x27;</span>,<br>        <span class="hljs-string">&#x27;123 Any Street&#x27;</span>,<br>        <span class="hljs-string">&#x27;New York&#x27;</span>,<br>        <span class="hljs-string">&#x27;NY&#x27;</span>,<br>        <span class="hljs-string">&#x27;11111&#x27;</span>,<br>        <span class="hljs-string">&#x27;USA&#x27;</span>,);<br></code></pre></td></tr></table></figure><h3 id="插入检索结果"><a href="#插入检索结果" class="headerlink" title="插入检索结果"></a>插入检索结果</h3><p><code>INSERT INTO...VALUES();</code><br><code>INSERT INTO...SELECT...FROM...;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> customers(cust_id,<br>  cust_name,<br>                      cust_address,<br>                      cust_city,<br>                      cust_state,<br>  cust_zip,<br>                      cust_country,<br>                      cust_contact,<br>                      cust_email)<br><span class="hljs-keyword">select</span> cust_id,<br>   cust_name,<br>   cust_address,<br>   cust_city,<br>   cust_state,<br>   cust_zip,<br>   cust_country,<br>   cust_contact,<br>   cust_email<br><span class="hljs-keyword">from</span> CUSTNEW;<br></code></pre></td></tr></table></figure><h2 id="复制表数据"><a href="#复制表数据" class="headerlink" title="复制表数据"></a>复制表数据</h2><p>将一个表复制到一章全新的表中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">into</span> CustCopy<br><span class="hljs-keyword">from</span> customers;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> CustCopy <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> customers;<br></code></pre></td></tr></table></figure><blockquote><p>不同DBMS语法不同；<br>可以指定具体列复制部分数据，而非使用通配符复制全部数据；<br>同样也可以对数据进行过滤处理后复制，本语法正常使用<code>WHERE</code> <code>ORDER</code>等操作符；<br>可以利用联结，从多个表中取数据。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;c1_date&#x27;</span>,<span class="hljs-string">&#x27;c2_data&#x27;</span>,,,<span class="hljs-string">&#x27;c0_date&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name(c1,c2,,,c0) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;c1_date&#x27;</span>,<span class="hljs-string">&#x27;c2_data&#x27;</span>,,,<span class="hljs-string">&#x27;c0_date&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name(c1,c2) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;c1_date&#x27;</span>,<span class="hljs-string">&#x27;c2_date&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table0_name(c1,c2) <span class="hljs-keyword">SELECT</span> c1,c2 <span class="hljs-keyword">FROM</span> table1_name;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">INTO</span> new_table_name <span class="hljs-keyword">FROM</span> table0_name;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> new_table_name <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name where... <span class="hljs-keyword">order</span> by...;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--组合查询</title>
    <link href="/2021/05/21/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9514/"/>
    <url>/2021/05/21/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9514/</url>
    
    <content type="html"><![CDATA[<h1 id="第14课-组合查询"><a href="#第14课-组合查询" class="headerlink" title="第14课 组合查询"></a>第14课 组合查询</h1><p>本课讲述如何利用<code>UNION</code>操作符将多条<code>SELECT</code>语句组成一个结果集。</p><p>多数SQL查询只含从一个或多个表中返回数据的单条<code>SELECT</code>语句。但是SQL也允许执行多个查询（多条<code>SELECT</code>语句），并将结果作为一个查询结果集返回。</p><p>如下示例一</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">输入：<br><span class="hljs-keyword">select</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fun4All&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_name;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">输出：<br>cust_name       cust_contact        cust_email<br><span class="hljs-comment">--------------------------------------------------</span><br>Fun4All        Jim Jones        jjones<span class="hljs-variable">@fun4all</span>.com<br>Fun4All        Denise L. Stephensdstephens<span class="hljs-variable">@fun4all</span>.com<br>The Toy         Store            Kim Howard<br>Village ToysJohn Smith        sales<span class="hljs-variable">@villagetoys</span>.com<br></code></pre></td></tr></table></figure><p>注意事项：</p><ol><li>使用<code>UNION</code>操作符时，每条<code>SELECT</code>指令必须包含相同的列名、表达式或聚集函数；</li><li>可以使用<code>UNION</code>进行多个<code>SELECT</code>指令合并。但是，每条指令之间都需要使用<code>UNION</code>进行间隔；</li><li>使用<code>UNION</code>操作符且对结果进行排序时，必须只在最后一条<code>SELECT</code>指令的最后一行使用<code>ORDER</code>命令；</li><li>使用<code>UNION</code>操作符的效果也相当于单条<code>SELECT</code>指令中<code>WHERE</code>限定条件中的<code>AND\OR</code>等操作符的使用效果（见示例二）；</li><li>使用<code>UNION</code>指令时，会默认重复记录只显示一次，若想重复记录重复显示，则可以使用<code>UNION ALL</code>操作符（见示例三）；</li><li>在简单的例子中，或许<code>UNION</code>操作符的作用尚且不如直接使用<code>WHERE</code>子句更简洁。但是对于复杂的过滤条件，或者从多个表中检索数据的情形，使用<code>UNION</code>可能会使处理更简单。</li></ol><p>示例二</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL">输入：<br><span class="hljs-keyword">select</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span>  cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">or</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fun4All&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_name;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">输出：<br>cust_name       cust_contact        cust_email<br><span class="hljs-comment">--------------------------------------------------</span><br>Fun4All        Jim Jones        jjones<span class="hljs-variable">@fun4all</span>.com<br>Fun4All        Denise L. Stephensdstephens<span class="hljs-variable">@fun4all</span>.com<br>The Toy         Store            Kim Howard<br>Village ToysJohn Smith        sales<span class="hljs-variable">@villagetoys</span>.com<br></code></pre></td></tr></table></figure><p>示例三</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">输入：<br><span class="hljs-keyword">select</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fun4All&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_name;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">输出：<br>cust_name       cust_contact        cust_email<br><span class="hljs-comment">--------------------------------------------------</span><br>Fun4All        Jim Jones        jjones<span class="hljs-variable">@fun4all</span>.com<br>Fun4All        Jim Jones        jjones<span class="hljs-variable">@fun4all</span>.com<br>Fun4All        Denise L. Stephensdstephens<span class="hljs-variable">@fun4all</span>.com<br>The Toy         Store            Kim Howard<br>Village ToysJohn Smith        sales<span class="hljs-variable">@villagetoys</span>.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--高级联结</title>
    <link href="/2021/05/20/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9513/"/>
    <url>/2021/05/20/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9513/</url>
    
    <content type="html"><![CDATA[<h1 id="第13课-创建高级联结"><a href="#第13课-创建高级联结" class="headerlink" title="第13课 创建高级联结"></a>第13课 创建高级联结</h1><p>上一节课已经讲了简单的等值联结或者说，内联结。<br>本节课介绍高级联结。</p><h2 id="简单等值联结的简单进阶–使用表别名"><a href="#简单等值联结的简单进阶–使用表别名" class="headerlink" title="简单等值联结的简单进阶–使用表别名"></a>简单等值联结的简单进阶–使用表别名</h2><p>这一节相当简单，大致就一件事，可以对表命名表别名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name, cust_contact<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> C, orders <span class="hljs-keyword">AS</span> O, orderitems <span class="hljs-keyword">AS</span> OI<br><span class="hljs-keyword">where</span> C.cust_id <span class="hljs-operator">=</span> O.cust_id <br><span class="hljs-keyword">and</span> O.order_num <span class="hljs-operator">=</span> OI.order_num<br>    <span class="hljs-keyword">and</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>; <br></code></pre></td></tr></table></figure><h2 id="使用不同类型的联结"><a href="#使用不同类型的联结" class="headerlink" title="使用不同类型的联结"></a>使用不同类型的联结</h2><p>除内联结外还有三种联结方式————自联结、自然联结和外联结。</p><h3 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h3><p>首先，独立思考一个问题，并自己在数据库管理系统中进行实操。</p><p>假如要给与$Jim Jones$同一个公司的顾客发送一封邮件。这个查询要求首先找出$Jim Jones$工作的公司，然后找出在该公司工作的顾客。</p><ol><li>首先找出$Jim Jones$工作的公司<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jim Jones&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li>然后找出在该公司工作的顾客<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_contact<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_name <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">select</span> cust_name<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jim Jones&#x27;</span>);<br></code></pre></td></tr></table></figure>以上的方法使用的是我们之前学过的子查询。<br>除此之外，我们应该如何建立其他联结呢？请看代码示例。</li></ol><p>首先看一个<strong>错误</strong>的示例：<br><em><strong>INPUT</strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> c1.cust_contact, c2.cust_name, c2.cust_id<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> c1, customers <span class="hljs-keyword">as</span> c2<br><span class="hljs-keyword">where</span> c1.cust_id <span class="hljs-operator">=</span> c2.cust_id<br><span class="hljs-keyword">and</span> c1.cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;jim jones&#x27;</span>;<br></code></pre></td></tr></table></figure><p><em><strong>OUTPUT</strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">cust_contact  cust_name  cust_id<br><span class="hljs-comment">------------------------------------</span><br>Jim Jones  Fun4All <span class="hljs-number">1000000003</span><br></code></pre></td></tr></table></figure><p>在我的思维定式中，总是认为需要使用XXX_id才可以作为完全限定列名以联结两个表列，于是就被教育了。</p><p>再看看人家课本上的<strong>正确</strong>代码示例：</p><p><em><strong>INPUT</strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> c1.cust_id, c1.cust_name, c2.cust_contact<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> c1, customers <span class="hljs-keyword">as</span> c2<br><span class="hljs-keyword">where</span> c1.cust_name <span class="hljs-operator">=</span> c2.cust_name<br><span class="hljs-keyword">and</span> c1.cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;jim jones&#x27;</span>;<br></code></pre></td></tr></table></figure><p><em><strong>OUTPUT</strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL">cust_id     cust_name   cust_contact<br><span class="hljs-comment">------------------------------------</span><br><span class="hljs-number">1000000003</span> Fun4All Jim Jones<br><span class="hljs-number">1000000003</span> Fun4All     Denise L. Stephens<br></code></pre></td></tr></table></figure><ul><li>自联结形式上就是将一个表分别命名为不同的两个表，然后对其进行等值联结。</li><li>等值联结的列名的选取需要根据需要来选。比如本节就是根据一名联络人<strong>选择同一个企业</strong> 下的不同联络人。（本代码有无<code>cust_id</code>的结果是一样的）</li></ul><blockquote><p>自联结就是数据表与自身联结。</p></blockquote><h3 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h3><p>自然联结是一种特殊的等值联结，他要求两个关系中进行比较的分列必须是相同的属性组，并且在结果中把重复的属性列去掉。</p><p>自然联结要求只能选择那些唯一的列，一般通过对一个表使用通配符<code>*</code>，而对其他表的列使用明确的子集来完成。</p><p>下面举一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> C.<span class="hljs-operator">*</span>, O.order_num,O.order_date, <br>OI.item_price, OI.prod_id, OI.quantity<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> C, orders <span class="hljs-keyword">AS</span> O, orderitems <span class="hljs-keyword">AS</span> OI<br><span class="hljs-keyword">where</span> C.cust_id <span class="hljs-operator">=</span> O.cust_id <br><span class="hljs-keyword">and</span> O.order_num <span class="hljs-operator">=</span> OI.order_num<br>    <span class="hljs-keyword">and</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>; <br></code></pre></td></tr></table></figure><h3 id="外联结"><a href="#外联结" class="headerlink" title="外联结"></a>外联结</h3><p>许多联结将一个表中的行与另一个表中的行相关联，但有时候细节要包含没有关联的那些行。<br>例如，需要使用联结完成以下工作：</p><ol><li>对每个顾客下的订单进行计数，包括那些至今尚未下订单的顾客；</li><li>列出所有产品以及订购数量，包括那些没有人订购的产品；</li><li>计算平均销售规模，包括那些至今尚未下订单的顾客。</li></ol><p>在上述例子中，联结包含了那些在相关表中没有关联的行。这种联结称为外联结。</p><p>对于上述问题，我首先想到的是<code>NOT</code>指令，然我们看看可不可以完成呢？</p><ol><li>首先找到所有下订单的客户<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> C.cust_name, O.orders_num<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> C, orders <span class="hljs-keyword">AS</span> O<br><span class="hljs-keyword">where</span> C.cust_id <span class="hljs-operator">=</span> O.cust_id;<br></code></pre></td></tr></table></figure></li><li>使用<code>NOT</code>指令</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> C.cust_name<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">as</span> C, orders <span class="hljs-keyword">AS</span> O<br><span class="hljs-keyword">where</span> C.cust_id <span class="hljs-operator">=</span> O.cust_id);<br></code></pre></td></tr></table></figure><p>将上述两个代码合并才可以得到问题中想找到的所有的客户，并且还要在第二段代码现实空值。</p><p>这样的代码操作本质上还是内联结。</p><p>现在我们使用外联结。<br>  <em><strong>INPUT</strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> customers.cust_id, customers.cust_name, orders.order_num<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> orders<br><span class="hljs-keyword">on</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id;<br></code></pre></td></tr></table></figure><p><em><strong>OUTPUT</strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">customers.cust_id  customers.cust_name  orders.order_num<br><span class="hljs-comment">------------------- -------------------------------------</span><br><span class="hljs-number">1000000001</span>        Village Toys    <span class="hljs-number">20005</span><br><span class="hljs-number">1000000001</span>        Village Toys    <span class="hljs-number">20009</span><br><span class="hljs-number">1000000002</span>        Kids Place<br><span class="hljs-number">1000000003</span>        Fun4All            <span class="hljs-number">20006</span><br><span class="hljs-number">1000000004</span>        Fun4All            <span class="hljs-number">20007</span><br><span class="hljs-number">1000000005</span>        The Toy Store    <span class="hljs-number">20008</span><br></code></pre></td></tr></table></figure><blockquote><p>外部联结是有方向的。<code>LEFT OUTER JOIN</code> 联结左边的表，<code>RIGHT OUTER JOIN</code> 联结右边的表（代表最终输出结果包括左边\右边的为被联结的行）<br>全联结<code>FULL OUTER JOIN</code>代表最终输出结果包括左边和右边的全部联结的和未被联结的行。</p></blockquote><h2 id="使用带聚集函数的联结"><a href="#使用带聚集函数的联结" class="headerlink" title="使用带聚集函数的联结"></a>使用带聚集函数的联结</h2><p>使用联结时可以正常使用聚集函数，不过需要使用完全限定列名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> customers.cust_id,<br><span class="hljs-built_in">count</span>(orders.order_num) <span class="hljs-keyword">as</span> num_ord<br><span class="hljs-keyword">from</span> customers <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> orders<br><span class="hljs-keyword">on</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> customers.cust_id;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本课是上一课的延续，两节课讲述完SQL中的联结。</p><ul><li>联结可以分为两类：内联结、外联结；</li><li>内联结包括简单的等值联结、自联结、自然联结；</li><li>外联结包括左外联结、右外联结、全联结；</li><li>使用联结时的一个小技巧为使用表别名。</li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--联结表</title>
    <link href="/2021/05/19/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9512/"/>
    <url>/2021/05/19/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9512/</url>
    
    <content type="html"><![CDATA[<h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><p>这一课还是跨表操作，我们上一节课讲的是子查询。由于我们的表格在之前就已经为我们设计好，因此，我们不用去思考，为什么我们可以使用子查询？</p><h2 id="联结简介"><a href="#联结简介" class="headerlink" title="联结简介"></a>联结简介</h2><p>联结表是SQL最强大功能之一。联结是<strong>利用SQL的SELECT</strong>能执行的最重要的操作。<br>在理解联结前，必须联结关系表以及关系数据库的一些基础知识。</p><h3 id="什么是关系表"><a href="#什么是关系表" class="headerlink" title="什么是关系表"></a>什么是关系表</h3><blockquote><p>关系表的设计就是要把信息分解成多个表，一类数据一个表。各表通过某些共同的值相互关联。<br>由关系表组成的数据库就是关系数据库咯。</p></blockquote><p>理解关系表，最好看个例子。<br>有一个包含产品目录的数据库表，其中每类物品占一行。对于每一种物品，要储存的信息包括产品描述、价格，以及生产该产品的供应商。<br>现在有同一个供应商生产的多种物品，那么在何处储存供应商名、地址、联系方式等供应商信息呢？将这些数据与产品分开的依据是什么？</p><ul><li>同一供应商生产的每个产品，其供应商信息都是相同的，对每个产品重复此信息既浪费时间又浪费储存空间；</li><li>如果供应商信息发生变化，只需修改一处即可。</li><li>如果数据重复则很难保证多次输入该数据的方式都相同。不一致的数据有不可利用。</li></ul><p>基于以上原因，我们需要分类将各式各样的信息分别储存在多个表中，但是，每个表又不能完全与其他表不同。具体的关系表设计（基于举例的演示）如下：</p><blockquote><p>在这个例子中，可以建立两个表：一个储存供应商信息，另一个储存产品信息。<br>Vendors表包含所有供应商信息，每个供应商占一行，具有唯一的标识。此标识键称为主键(primary key)，可以是供应商ID或任何其他唯一值。<br>Products表只储存产品信息，除了储存供应商ID（Vendors表主键）外，不储存其他有关供应商的信息。<br>Vendors表的主键将两个表关联，利用主键可以在Vendors中找出相应供应商的详细信息。</p></blockquote><h3 id="为什么使用联结"><a href="#为什么使用联结" class="headerlink" title="为什么使用联结"></a>为什么使用联结</h3><p>如上所述，将数据分解成多个表能更有效地储存，更方便得处理，并且可伸缩性更好。但是这些好处都是有代价的。</p><p>这个代价就是，我们不能一条简单的指令就显示出关于某个产品的所有的详细信息。</p><p>那怎么办呢？就是在<code>SELECT()</code>检索数据时，使用联结。</p><h2 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h2><p>创建联结非常简单，指定要联结的所有表以及关联他们的方式即可。请看例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, prod_name, prod_price<br><span class="hljs-keyword">from</span> vendors, products<br><span class="hljs-keyword">WHERE</span> products.vend_id <span class="hljs-operator">=</span> vendors.vend_id;<br></code></pre></td></tr></table></figure><ul><li><code>SELECT()</code>指定的三列分处于两表；</li><li><code>FROM</code>后不仅跟一个表，而是将涉及的表都写上，表示将要联结的两个表；</li><li><code>WHERE</code>语句后跟完全限定列名，指示关联规则。</li></ul><blockquote><p>在前几课已经讲过关于完全限定列的双循环原理，因此，WHERE语句中等号左右两边顺序与位置不重要。<br>但是，为了规范，以后我还是将具有主键性质的完全限定列名(如vendors.vend_id)放在右边。</p></blockquote><h3 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h3><p>上述联结为等值联结(equijion)，也被称为内联结(inner jion)。<br>上述代码的形似是等值联结们可以换个形式表示相同的命令,返回相同的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, prod_name, prod_price<br><span class="hljs-keyword">from</span> vendors <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> products <br>     <span class="hljs-keyword">on</span> vendors.vend_id <span class="hljs-operator">=</span> products.vend_id;<br></code></pre></td></tr></table></figure><h3 id="联结多个表"><a href="#联结多个表" class="headerlink" title="联结多个表"></a>联结多个表</h3><p>同样按照上述思路来做。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, prod_name, prod_price, order_num<br><span class="hljs-keyword">from</span> vendors, products, orderitems <br><span class="hljs-keyword">where</span> vendors.vend_id <span class="hljs-operator">=</span> products.vend_id <span class="hljs-keyword">and</span><br>products.prod_id <span class="hljs-operator">=</span> orderitems.prod_id; <br></code></pre></td></tr></table></figure><p>一开始想要按照内联结的方式来做，但是总是不成功，于是按照这种简单的等值联结，这一尝试，确实不错，简单，易懂。</p><p>再展示一个上节课讲子查询时的例子，检索订购产品RGAN01的顾客列表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name, cust_contact<br><span class="hljs-keyword">from</span> customers, orders, orderitems <br><span class="hljs-keyword">where</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id <br><span class="hljs-keyword">and</span> orders.order_num <span class="hljs-operator">=</span> orderitems.order_num<br>    <span class="hljs-keyword">and</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>; <br></code></pre></td></tr></table></figure><p>这里多了一个过滤条件<code>prod_id = &#39;RGAN01&#39;</code>，理解为，前两个<code>WHERE</code>指令关联表中所有信息，最后一条指令过滤具体信息。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在实际中，细分表列是常见的。因此，跨表操作必须熟悉。</p><p>本课，讲的只是一种常见的简单的联结形式，想一想，有没有其他形式的联结呢？</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--子查询</title>
    <link href="/2021/05/18/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9511/"/>
    <url>/2021/05/18/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9511/</url>
    
    <content type="html"><![CDATA[<h1 id="第十一课-使用子查询"><a href="#第十一课-使用子查询" class="headerlink" title="第十一课 使用子查询"></a>第十一课 使用子查询</h1><p>在前十课中，我们所有的操作、指令都是在一张表列中执行，现在，欢迎进入多表联动的世界！</p><h2 id="什么是子查询"><a href="#什么是子查询" class="headerlink" title="什么是子查询"></a>什么是子查询</h2><p>SELECT语句是SQL的查询。<br>我们之前看到的所有的SELECT语句都是简单查询，即从单个数据库表中检索数据的单条语句。<br>SQL还允许创建子查询。</p><blockquote><p>子查询(subquery)即嵌套在其他查询中的查询。</p></blockquote><h2 id="如何利用子查询进行过滤"><a href="#如何利用子查询进行过滤" class="headerlink" title="如何利用子查询进行过滤"></a>如何利用子查询进行过滤</h2><p>目前，我将SQL语句分为主语句和条件语句。主语句就是<code>select...from...</code>，而在其之后的就属于条件语句。</p><p>利用子查询进行过滤就是在过滤数据时，即条件语句处使用子查询。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name, cust_address<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">select</span> cust_id<br>  <span class="hljs-keyword">from</span> orders<br>                  <span class="hljs-keyword">where</span> order_date <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2020-02-01&#x27;</span> );<br></code></pre></td></tr></table></figure><p>这条指令的含义是检索2020-02-01之后下订单的客户姓名和客户地址。</p><ul><li>作为子查询的SELECT语句只能查询单列；</li><li>MySQL系统中子查询不能使用<code>LIMIT</code>指令。</li></ul><h2 id="作为计算字段使用子查询"><a href="#作为计算字段使用子查询" class="headerlink" title="作为计算字段使用子查询"></a>作为计算字段使用子查询</h2><p>与上类似，作为计算字段使用子查询，即在主语句中使用子查询语句。例如：</p><p>先看一个检索顾客1000000001订单次数总数的代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">order</span><br><span class="hljs-keyword">from</span> Orders<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000000001&#x27;</span>;<br></code></pre></td></tr></table></figure><p>如果不仅仅对顾客1000000001执行count(*)，而且还要检索每一个顾客对应的总订单次数，需要使用子查询。请看下面代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name,<br>   cust_state,<br>       (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">from</span> orders<br>        <span class="hljs-keyword">where</span> orders.cust_id <span class="hljs-operator">=</span> Customers.cust_id) <span class="hljs-keyword">as</span> orders<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_name;<br></code></pre></td></tr></table></figure><blockquote><p>Tips:在有可能混淆列名的情况下，必须使用完全限定列名。<br>完全限定列名：表名.列名(customers.cust_id)</p></blockquote><p>在这里必须使用完全限定列名的原因就在与，如果不这样做，那么DBMS系统将默认cust_id = cust_id是处于同一张表列内，那么这就是绝对成立的了，于是返回的数字固定等于该列总行数。</p><p>可能还是有同学看不懂这条代码，我们深入解读以下。</p><p>首先，去除子查询语句，单单看这一个简单的查询语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_name,<br>    cust_state<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_name;<br></code></pre></td></tr></table></figure><p>这简单的查询语句返回的结果就是<strong>按照cust_name排序</strong>的cust_name,cust_state两列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">cust_name    cust_state<br><span class="hljs-comment">---------    ----------</span><br>Fun4All        <span class="hljs-keyword">IN</span><br>Fun4All        AZ<br>Kids Place    OH<br>The Toy StoreIL<br>Village ToysMI<br></code></pre></td></tr></table></figure><p>然后，我们再看子查询语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">   (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">from</span> orders<br>   <span class="hljs-keyword">where</span> orders.cust_id <span class="hljs-operator">=</span> Customers.cust_id) <span class="hljs-keyword">as</span> orders<br></code></pre></td></tr></table></figure><p>这句简单的子查询语句本质上是双循环语句。<br>内循环是order表列，外循环为customers表列。<br><strong>按照cust_name排序</strong>，第一行的customers.cust_id=(cust_name=Fun4All时对应的id，假设100000001)，此时上述的代码就变换为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">   (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">from</span> orders<br>   <span class="hljs-keyword">where</span> orders.cust_id <span class="hljs-operator">=</span> <span class="hljs-number">1000000001</span>) <span class="hljs-keyword">as</span> orders<br></code></pre></td></tr></table></figure><p>经过上述代码的运行，第一行记录就出来了，然后继续<strong>按照cust_name排序</strong>循环，直到遍历数据库表<code>customers</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">cust_name    cust_state    orders<br><span class="hljs-comment">---------    ----------    ------</span><br>Fun4All        <span class="hljs-keyword">IN</span>            <span class="hljs-number">1</span><br>Fun4All        AZ            <span class="hljs-number">1</span><br>Kids Place    OH            <span class="hljs-number">0</span><br>The Toy StoreIL            <span class="hljs-number">1</span><br>Village ToysMI            <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>跨表操作中的子查询的两种形式：作为过滤条件的子查询和作为计算字段的子查询。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--分组数据</title>
    <link href="/2021/05/17/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/"/>
    <url>/2021/05/17/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/</url>
    
    <content type="html"><![CDATA[<h2 id="第十课-分组数据"><a href="#第十课-分组数据" class="headerlink" title="第十课 分组数据"></a>第十课 分组数据</h2><p>前面两课，我们已经学习了数据分析函数，在此时，我们回想一下所学内容，是不是我们所学的函数，基本都处于<code>SELECT</code>语句后面呢。也就是我常说的主语句之中。那么在条件语句中，有没有什么数据处理方式呢？今天介绍两种。</p><p>目前为止，我们所有的计算都是在表的所有数据或者匹配特定的<code>WHERE</code>子句的数据基础上进行的。</p><p>如果要返回每个供应商提供的产品数目，该怎么办？或者返回只提供一个产品的所有供应商名单，怎么办？</p><p>这时候就需要分组大显身手了。使用分组可以将数据分为多个逻辑组，对每个数据组进行聚集计算。</p><h2 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h2><p>在学习之前，我以为分组子句<code>GROUP()</code>有多么复杂，还需要自己去思考如何对表进行逻辑分析和分组等等。</p><p>结果等我看例子时，我才发现我错的离谱，，，</p><p>首先看下面:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_id,<br>   <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> num_vend,<br>       vend_address<br><span class="hljs-keyword">from</span> vendors<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> vend_id;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: BRE02<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">500</span> Park Street<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">2.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: BRS01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">123</span> Main Street<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">3.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: DLL01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">555</span> High Street<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">4.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: FNG01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">42</span> Galaxy Road<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">5.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: FRB01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">1000</span> <span class="hljs-number">5</span>th Avenue<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">6.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: JTS01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">1</span> Rue Amusement<br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><p>上面的输出结果是按照记录形式单条记录的输出，在<code>MySQL</code>中使用快捷键<code>CTRL+ALT+ENTER</code>。</p><p>下面是表格形式输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_id  num_vend   vend_address<br><span class="hljs-comment">------------------------------------</span><br>BRE02    <span class="hljs-number">1</span>    <span class="hljs-number">500</span> Park Street<br>BRS01    <span class="hljs-number">1</span>    <span class="hljs-number">123</span> Main Street<br>DLL01    <span class="hljs-number">1</span>    <span class="hljs-number">555</span> High Street<br>FNG01    <span class="hljs-number">1</span>    <span class="hljs-number">42</span> Galaxy Road<br>FRB01    <span class="hljs-number">1</span>    <span class="hljs-number">1000</span> <span class="hljs-number">5</span>th Avenue<br>JTS01    <span class="hljs-number">1</span>    <span class="hljs-number">1</span> Rue Amusement<br></code></pre></td></tr></table></figure><p>使用$group \quad by$子句前，需要知道一些重要规定。</p><ul><li>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行分组。</li><li>如果嵌套分组，数据将在最后制定的分组上进行汇总。</li><li>GROUP BY 子句中列出的每列必须是检索列或有效的表达式（聚集函数除外）。</li><li>除去聚集函数外，SELECT的每一列必须在GROUP BY中列出。</li></ul><blockquote><p>虽然分组子句可以拼接，但是，一般情况下，也就是只对单列进行分组并计算出现的次数。再高阶一点，就是对A列进行分组，并呈现B列聚集函数。<br>突然感觉没那么香了，甚至有一些鸡肋？好吧，不算鸡肋，只是作用比我想象的要小很多了。</p></blockquote><h2 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h2><p><code>HAVING</code>子句过滤分组</p><p>在进行分组后，可能还需要过滤一些分组，使其不出现。</p><p>提到过滤数据，可能想到<code>WHERE</code>子句，但是在这里却不管用。</p><blockquote><p>因为：WHERE子句过滤行，而HAVING子句过滤分组</p></blockquote><p>事实上</p><blockquote><p>目前为止所学的WHERE子句指令方式都可以用到HAVING子句中。</p></blockquote><p>WHERE 和 HAVING的具体区别：</p><blockquote><p>这里有另外一种理解方法，WHERE在数据分组前进行过滤，而HAVING在数据分组后进行过滤。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_country, cust_address,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_country <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;USA&#x27;</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cust_country, cust_address<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(cust_address) <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>这段代码的含义是先过滤出来美国客户，然后对客户国籍和客户地址进行分类，最后过滤出只出现一次的地址。</p><h2 id="SELECT子句顺序"><a href="#SELECT子句顺序" class="headerlink" title="SELECT子句顺序"></a>SELECT子句顺序</h2><p>目前为止，我们已经学习了多条指令，那么这些指令在SQL语言中是否应该有排序，以便规范编写及运行代码呢？</p><p>SELECT子句及其顺序</p><table><thead><tr><th align="center">子句</th><th align="center">说明</th><th align="center">是否必须使用</th></tr></thead><tbody><tr><td align="center">SELECT</td><td align="center">要返回的列或表达式</td><td align="center">是</td></tr><tr><td align="center">FROM</td><td align="center">从中检索数据的表</td><td align="center">仅在从表选择数据时使用</td></tr><tr><td align="center">WHERE</td><td align="center">行级过滤</td><td align="center">否</td></tr><tr><td align="center">GROUP</td><td align="center">分组说明</td><td align="center">仅在按组计算聚集时使用</td></tr><tr><td align="center">HAVING</td><td align="center">组级过滤</td><td align="center">否</td></tr><tr><td align="center">ORDER</td><td align="center">输出排序顺序</td><td align="center">否</td></tr></tbody></table><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>越写越慢了，慢慢的出现需要思考一会才能理解的指令了。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--汇总数据</title>
    <link href="/2021/05/16/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%959/"/>
    <url>/2021/05/16/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%959/</url>
    
    <content type="html"><![CDATA[<h1 id="第九课-汇总数据"><a href="#第九课-汇总数据" class="headerlink" title="第九课 汇总数据"></a>第九课 汇总数据</h1><p>本课接着上一节课，继续讲解函数。相对于上一节课中各种不同类型的函数，本节课中的函数在数据分析时也更常用，且基本具有可移植性。</p><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><p>在实际需求中，我们经常需要把某列的数据汇总起来寻找我们需要的特定数值，但是却又不需要把所有数值检索出来。</p><p>比如，我们寻找某一列的最大值，我们首先需要遍历该列，然后进行比较，最后只是输出一个数值而已。</p><p>这些便是聚集函数(aggregate function)的作用：遍历某列中特定行，计算并返回一个值。</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">AVG()</td><td align="center">返回某列平均值</td></tr><tr><td align="center">COUNT()</td><td align="center">返回某列的行数</td></tr><tr><td align="center">MAX()</td><td align="center">返回某列最大值</td></tr><tr><td align="center">MIN()</td><td align="center">返回某列最小值</td></tr><tr><td align="center">SUM()</td><td align="center">返回某列值之和</td></tr></tbody></table><h3 id="AVG-函数"><a href="#AVG-函数" class="headerlink" title="AVG()函数"></a><code>AVG()</code>函数</h3><ol><li>求某列所有行数值的平均值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">avg_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">6.823333</span><br></code></pre></td></tr></table></figure><ol start="2"><li>求某列有条件的特定行行数值的平均值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br>   <span class="hljs-keyword">from</span> products<br>   <span class="hljs-keyword">where</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">avg_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">3.865000</span><br></code></pre></td></tr></table></figure><blockquote><p>每一个<code>AVG()</code>函数只能用于一列，求多列平均值，请用多个<code>AVG()</code>函数；<br><code>AVG()</code>函数忽略列值为 NULL 的行。</p></blockquote><h3 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT()函数"></a><code>COUNT()</code>函数</h3><p><code>COUNT()</code>函数有两种命令模式，<code>COUNT(*)</code>和<code>COUNT(COLUMN)</code>。</p><ol><li><code>COUNT(*)</code>计算所有行数，无论行中数值样式，包括NULL值。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>COUNT(COLUMN)</code>计算某一列中的行数，此时，自动忽略NULL值。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(prod_id)<br>   <span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(prod_id)<br>   <span class="hljs-keyword">FROM</span> products<br>   <span class="hljs-keyword">where</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="MAX-函数"><a href="#MAX-函数" class="headerlink" title="MAX()函数"></a><code>MAX()</code>函数</h3><ol><li>求某列所有行数值的最大值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(prod_price) <span class="hljs-keyword">AS</span> max_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">max_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">11.99</span><br></code></pre></td></tr></table></figure><ol start="2"><li>求某列有条件的特定行行数值的最大值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(prod_price) <span class="hljs-keyword">AS</span> max_price<br>   <span class="hljs-keyword">from</span> products<br>   <span class="hljs-keyword">where</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>; <br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">max_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">4.99</span><br></code></pre></td></tr></table></figure><blockquote><p>忽略NULL值；<br>可用于数值数据、日期数据和文本数据；<br>当用于文本数据后，返回排序最后位置的数值。</p></blockquote><h3 id="MIN-函数"><a href="#MIN-函数" class="headerlink" title="MIN()函数"></a><code>MIN()</code>函数</h3><ol><li>求某列所有行数值的最小值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(prod_price) <span class="hljs-keyword">AS</span> min_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">min_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">3.49</span><br></code></pre></td></tr></table></figure><ol start="2"><li>求某列有条件的特定行行数值的最小值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(prod_price) <span class="hljs-keyword">AS</span> min_price<br>   <span class="hljs-keyword">from</span> products<br>   <span class="hljs-keyword">where</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>; <br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">min_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">3.49</span><br></code></pre></td></tr></table></figure><blockquote><p>忽略NULL值；<br>可用于数值数据、日期数据和文本数据；<br>当用于文本数据后，返回排序最前位置的数值。</p></blockquote><h3 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM()函数"></a><code>SUM()</code>函数</h3><ol><li>普通某列全部数值之和</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(prod_price) <span class="hljs-keyword">as</span> sum_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><ol start="2"><li>有条件的过滤后数据数值之和</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(prod_price) <span class="hljs-keyword">as</span> sum_price<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-number">20005</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>过滤后经过算术计算的数据数值之和</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(prod_price<span class="hljs-operator">*</span>quality) <span class="hljs-keyword">as</span> total_price<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-number">20005</span>;<br></code></pre></td></tr></table></figure><blockquote><p>忽略NULL值</p></blockquote><h2 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h2><p>以上5各聚集函数都可以如下使用：</p><ul><li>指定ALL参数（默认，可不指定）</li><li>制定DISTINCT参数</li></ul><h3 id="不指定参数时："><a href="#不指定参数时：" class="headerlink" title="不指定参数时："></a>不指定参数时：</h3><p><strong>输入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">avg_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">6.823333</span><br></code></pre></td></tr></table></figure><hr><h3 id="制定DISTINCT参数："><a href="#制定DISTINCT参数：" class="headerlink" title="制定DISTINCT参数："></a>制定DISTINCT参数：</h3><p><strong>输入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(<span class="hljs-keyword">distinct</span> prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">avg_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">7.490000</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>DISTINCT不能用于<code>COUNT(*)</code>,但可用于<code>COUNT(column)</code>；<br>DISTINCT从技术上可以用于<code>MIN()</code>和<code>MAX()</code>,但是没必要；</p></blockquote><h2 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h2><ul><li>组合聚集函数，也就是说一个SELECT语句可以包含多个聚集函数。</li><li>但是，需要记住为每一个聚集函数子句使用不同别名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_price<br>       <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> num_items<br>       <span class="hljs-built_in">COUNT</span>(Prod_price) <span class="hljs-keyword">as</span> num_price<br>       <span class="hljs-built_in">MIN</span>(prod_price) <span class="hljs-keyword">as</span> min_price<br>       <span class="hljs-built_in">MAX</span>(prod_price) <span class="hljs-keyword">as</span> max_price<br>       <span class="hljs-built_in">AVG</span>(<span class="hljs-keyword">DISTINCT</span> PROD_PRICE) <span class="hljs-keyword">AS</span> Dis_avg_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文看似学了很多，但是细分下来，也就是几点。</p><ol><li>5个聚集函数的基本使用；</li><li>5个聚集函数与过滤函数的配合使用；</li><li>5个聚集函数与取值参数的配合使用；</li><li>5个聚集函数的组合使用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--函数</title>
    <link href="/2021/05/15/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%958/"/>
    <url>/2021/05/15/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%958/</url>
    
    <content type="html"><![CDATA[<h1 id="第八课-使用函数处理数据"><a href="#第八课-使用函数处理数据" class="headerlink" title="第八课 使用函数处理数据"></a>第八课 使用函数处理数据</h1><p>在本节课开始之前，我们首先大致回顾一下目前为止，我们所学过的知识及其内在逻辑。</p><p>首先我们知道，本文的初始点，并不是如何从无到有建立一个新的数据库。而是，默认我们目前已经有了一个数据库。</p><p>在有了数据库之后，我们首先需要知道，数据库里有什么？即数据检索（<code>SELECT</code>语句，<code>LIMIT</code>语句，<code>ORDER</code>语句）和数据过滤（<code>WHERE</code>子句、组合过滤、通配符过滤）。</p><p>在了解数据库里有什么之后，从第七课数据拼接与执行算术计算开始，就已经进入了数据处理的世界。</p><p>本课就进一步介绍SQL语言中处理数据的一项便利但又不便利的工具–函数。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>如果，你之前学过其他计算机语言，那么你对计算机中的函数概念想必也有一些了解。</p><p>在特定的DBMS中，函数为数据处理带来的便利性是毋庸置疑 的。</p><p>但是，目前存在的最大的问题就在于，虽然SQL语句被几乎所有的DBMS都等同地支持，但是，却仅有相当少的一部分SQL函数也享有相同的待遇。</p><p>各大厂商在基本的SQL语句和函数的基础上各自设计出不同的函数以便利DBMS客户的使用。最终的结果就是，明明具有相同功能的函数，在不同的DBMS中，却有不同的命名。因此大部分SQL函数代码，不可移植。</p><p>在下面，我们将介绍集中可移植的SQL函数。</p><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><p>大多数SQL实现支持以下类型的函数：</p><ul><li>用于处理文本字符串（如删除或填充，转换为大写或小写）的文本函数。</li><li>用于在数值数据上进行的算术操作（如返回绝对值，进行代数运算）的数值函数。</li><li>用于处理日期和时间值并从这些值中提取特定成分（如返回两个日期之差，检查日期有效性）的日期和时间函数。</li><li>返回DBMS正使用的特殊信息（如返回用户登录信息）的系统函数。</li></ul><h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><p>在上一课中，我们使用到了去掉列值右边空格的函数<code>RTRIM()</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_name,<br>       prod_id,<br>       RTRIM(prod_name<span class="hljs-operator">+</span>prod_id)<br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><blockquote><p>以上函数在MySQL中是不正确的，因为该系统中字段拼接方式为特定的函数<code>CONCAT()</code>，而该函数自带空格消除术。当然<code>RTRIM()</code>还是可以用的。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_name,<br>          prod_id,<br>          concat(prod_name, prod_id)<br>   <span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><p>除此之外，再举一个文本处理函数的例子<code>UPPER()</code>。</p><p><strong>输入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, <span class="hljs-built_in">upper</span>(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   --------------</span><br>Bear EmporiumBEAR EMPORIUM<br>Bears R Us    BEARS R US<br>Doll House Inc.DOLL HOUSE INC.<br>Fun <span class="hljs-keyword">and</span> GamesFUN <span class="hljs-keyword">AND</span> GAMES<br>Furball Inc.FURBALL INC.<br>Jouets et oursJOUETS ET OURS<br></code></pre></td></tr></table></figure><p>在下表中罗列出常用的通用的文本处理函数。</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">LEFT()</td><td align="center">返回字符串左边的字符</td></tr><tr><td align="center">LENGTH()</td><td align="center">返回字符串长度</td></tr><tr><td align="center">LOWER()</td><td align="center">将字符串转换成小写</td></tr><tr><td align="center">LTRIM()</td><td align="center">去掉字符串左边的字符</td></tr><tr><td align="center">RIGHT()</td><td align="center">返回字符串右边的字符</td></tr><tr><td align="center">RTRIM()</td><td align="center">去掉字符串右边的字符</td></tr><tr><td align="center">SOUNDEX()</td><td align="center">返回字符串的SOUNDEX值</td></tr><tr><td align="center">UPPER()</td><td align="center">将字符串转换成大写</td></tr></tbody></table><p><code>LENGTH()</code>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, length(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   -----------------</span><br>Bear Emporium<span class="hljs-number">13</span><br>Bears R Us    <span class="hljs-number">10</span><br>Doll House Inc.<span class="hljs-number">15</span><br>Fun <span class="hljs-keyword">and</span> Games<span class="hljs-number">13</span><br>Furball Inc.<span class="hljs-number">12</span><br>Jouets et ours<span class="hljs-number">14</span><br><br></code></pre></td></tr></table></figure><p><code>LOWER()</code>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, <span class="hljs-built_in">lower</span>(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   -----------------</span><br>Bear Emporiumbear emporium<br>Bears R Us  bears r us<br>Doll House Inc.doll house inc.<br>Fun <span class="hljs-keyword">and</span> Gamesfun <span class="hljs-keyword">and</span> games<br>Furball Inc.furball inc.<br>Jouets et oursjouets et ours<br><br></code></pre></td></tr></table></figure><p><code>LTRIM()</code>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, ltrim(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   -----------------</span><br>Bear EmporiumBear Emporium<br>Bears R Us    Bears R Us<br>Doll House Inc.Doll House Inc.<br>Fun <span class="hljs-keyword">and</span> GamesFun <span class="hljs-keyword">and</span> Games<br>Furball Inc.Furball Inc.<br>Jouets et oursJouets et ours<br><br></code></pre></td></tr></table></figure><p><code>LTRIM()</code>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, SOUNDEX(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   -----------------</span><br>Bear EmporiumB65165<br>Bears R Us    B6262<br>Doll House Inc.D4252<br>Fun <span class="hljs-keyword">and</span> GamesF53252<br>Furball Inc.F61452<br>Jouets et oursJ32362<br></code></pre></td></tr></table></figure><blockquote><p><code>SOUNDEX()</code>是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。</p></blockquote><p>下面这个例子呢，很好玩，也充分说明了该函数的作用。</p><ul><li>假如，我们有一个客户名为<em>Michael Green</em>；</li><li>但是，我们在储存数据时误将其存为<em>Michelle Green</em>。</li><li>所以，我们应如何将其检索出来呢？</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> CUST_NAME, cust_contact<br> <span class="hljs-keyword">from</span> customers<br> <span class="hljs-keyword">where</span> soundex(cust_contact) <span class="hljs-operator">=</span> soundex(<span class="hljs-string">&#x27;Michael Green&#x27;</span>);<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">CUST_NAME   cust_contact<br><span class="hljs-comment">---------   ------------</span><br>Kids PlaceMichelle Green<br></code></pre></td></tr></table></figure><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><p>各个数据库管理系统基本都不相同，因此，不在这里学了。以后专门学习某一固定的DBMS时候再说吧。</p><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><p>数值处理函数仅处理数值数据。</p><p>这些函数一般主要用于代数、三角或几何运算，因此不像字符串或日期-时间处理函数那么频繁使用。</p><p>具有讽刺意味的是，在主要的DBMS的函数中，数值函数是最一致、最统一的函数。</p><p>在下表中列出常用数值处理函数。</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ABS()</td><td align="center">返回一个数的绝对值</td></tr><tr><td align="center">COS()</td><td align="center">返回一个角度的余弦</td></tr><tr><td align="center">EXP()</td><td align="center">返回一个数的指数值</td></tr><tr><td align="center">PI()</td><td align="center">返回圆周率</td></tr><tr><td align="center">SIN()</td><td align="center">返回一个监督的正弦</td></tr><tr><td align="center">SQRT()</td><td align="center">返回一个数的平方根</td></tr><tr><td align="center">TAN()</td><td align="center">返回一个角度的正切</td></tr></tbody></table><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本课中，主要的函数具有的可移植性不强，应该在日后选择某个具体的DBMS时，深入学习。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--计算字段</title>
    <link href="/2021/05/14/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%957/"/>
    <url>/2021/05/14/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%957/</url>
    
    <content type="html"><![CDATA[<h1 id="第七课-创建计算字段"><a href="#第七课-创建计算字段" class="headerlink" title="第七课 创建计算字段"></a>第七课 创建计算字段</h1><p>前面几章，除去DISTINCT指令，其他全部指令都是在主语句（select…from…）之后，添加条件指令（限制，排序，过滤）。那么说在主语句有没有什么骚操作呢？</p><p>请看本章，SELECT语句内的爱恨情仇。</p><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><p>计算字段是运行时在SELECT语句内创建的。</p><blockquote><p>字段(field)基本上与列(column)的意思相同，经常相互使用，不过数据库列一般成为列，而术语字段通常与计算字段一起使用。</p></blockquote><p>为什么使用计算字段呢？或者说什么情况下使用计算字段呢？</p><ul><li>需要显示公司名，同时显示公司地址，但是这两个信息存储在不同表列中。</li><li>公司名和公司地址这两个字段在同一各表列中，但是在打印程序时需要把他们作为有恰当格式的一个字段检索出来。</li><li>列数据中大小写混合，但是在打印中需要把所有数据按大写表示出来。</li><li>需要根据表数据进行加减乘除等运算（总价格等）。</li></ul><p>在上面几个例子中，我们发现，储存在表中的数据往往并不与现实中的需求一一对应。我们需要直接从数据库中检索出转换、计算或格式化过的数据，而不是检索出数据，然后再在客户端应用程序中二次操作，重新格式化。</p><p>简单归纳为拼接字段与算术计算。</p><p>这，就是计算字段所起到的作用。</p><h2 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h2><h3 id="字段拼接"><a href="#字段拼接" class="headerlink" title="字段拼接"></a>字段拼接</h3><p>字段拼接即将同一表列中两个及以上的字段的数据拼接为一个整体进行输出表示。</p><blockquote><p>在不同DEMS中，略有差异。</p></blockquote><p>Access 和 SQL Server 中的字段拼接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> cust_name <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span><br><span class="hljs-keyword">from</span> customers<br>limit <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>DB2, Oracle, PostgreSQL, SQLite 和 Open Office Base中的字段拼接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_id <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">||</span> cust_name <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;)&#x27;</span><br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_id;<br></code></pre></td></tr></table></figure><p>相信大多数朋友已经看出来两者的区别了，就是拼接符号分别为<code>+</code>和 <code>||</code>。</p><p>但是还有一类DBMS具有和这两类的拼接方式不一样，这就是MySQL 和 MarialDB。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> concat (cust_id, <span class="hljs-string">&#x27;(&#x27;</span>, cust_name, <span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10000004</span>;<br></code></pre></td></tr></table></figure><p>还需要特别注意一点，在上述三类字段拼接指令中，除了第三类使用特定函数来字段拼接外，其他两种方式在输出结果上都包含了大量的空格，需要使用特定函数<code>RTRIM()</code>来去掉空格。</p><p>如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> RTRIM( cust_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> cust_name <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> )<br><span class="hljs-keyword">from</span> customers<br>limit <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h3><p>使用以上的方法进行字段拼接时输出结果的字段名或者没有或者就是一大段文字例如<code>concat (cust_id, &#39;(&#39;, cust_name, &#39;)&#39;)</code>   ，这样输出的结果实际上只是一个值，我们在接下来的客户端是无非直接引用这种值的。那么我们可不可以直接对他们进行命名后输出呢？</p><p>这就要提到这一小节要讲的知识了–列别名。</p><p>别名(alias)是一个字段或值的替换名。别名用关键字<code>AS</code>赋予。<br>在所有DBMS中都可以使用类似以下的方法进行列别名命名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> RTRIM( cust_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> cust_name <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> ) <span class="hljs-keyword">AS</span> cust_nid<br><span class="hljs-keyword">from</span> customers<br>limit <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL">cust_nid<br><span class="hljs-comment">----------------------</span><br><span class="hljs-number">1000000003</span>(Fun4All)<br><span class="hljs-number">1000000004</span>(Fun4All)<br><span class="hljs-number">1000000005</span>(The Toy Store)<br></code></pre></td></tr></table></figure><h2 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h2><p>在实际应用中，我们常常需要对表中数据进行各种运算。为了避免二次运算，我们可以在DEMS中使用SQL进行运算后输出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,<br>       quantity,<br>       item_price,<br>       quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">AS</span> expanded_price<br><span class="hljs-keyword">from</span> OrderItems<br><span class="hljs-keyword">where</span> order_num <span class="hljs-operator">=</span> <span class="hljs-number">20008</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">prod_id quantity item_price quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">AS</span> expanded_price<br><span class="hljs-comment">--------------------------------------------------------------------</span><br>RGAN01    <span class="hljs-number">5</span>    <span class="hljs-number">4.99</span>        <span class="hljs-number">24.95</span><br>BR03    <span class="hljs-number">5</span>    <span class="hljs-number">11.99</span>        <span class="hljs-number">59.95</span><br>BNBG01    <span class="hljs-number">10</span>    <span class="hljs-number">3.49</span>        <span class="hljs-number">34.90</span><br>BNBG02    <span class="hljs-number">10</span>    <span class="hljs-number">3.49</span>        <span class="hljs-number">34.90</span><br>BNBG03    <span class="hljs-number">10</span>    <span class="hljs-number">3.49</span>        <span class="hljs-number">34.90</span><br></code></pre></td></tr></table></figure><p>上面只是举了一个乘法的例子来说明SQL的算术计算是如何进行的，同样的方法可以用在<code>+,- *, /</code>中，也可以对其进行混合运算，优先级为先乘除后加减，使用<code>()</code>可以改变优先级。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文首先讲解了主语句<code>SELECT</code>处的拼接字段与别名命名，然后又讲了同样处于<code>SELECT</code>指令内的字段算术计算。</p><p>从本文开始，属于SQL语法的入门阶段了。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--通配符</title>
    <link href="/2021/05/13/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%956/"/>
    <url>/2021/05/13/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%956/</url>
    
    <content type="html"><![CDATA[<h1 id="第六课-用通配符进行过滤"><a href="#第六课-用通配符进行过滤" class="headerlink" title="第六课 用通配符进行过滤"></a>第六课 用通配符进行过滤</h1><p>通配符进行过滤是是在WHERE指令中使用的对前面几章所学的过滤规则的补充，主要是由于前面所学的过滤规则必须使用已知的特定的准确的值。</p><p>当我们只知道一个词，但是想要找到包含这个词的数据值时，通配符就有了作用。</p><p>本课介绍三种用以过滤的通配符：百分号% 及下划线 _ 和方括号[]。</p><h2 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a>LIKE操作符</h2><blockquote><p>通配符(wildcard)：用来匹配值的一部分的特殊字符。</p></blockquote><blockquote><p>搜索模式(search pattern)：由字面值、通配符或两者组合构成的搜索条件。</p></blockquote><blockquote><p>为在搜索子句中使用通配符，必须使用LIKE操作符。</p></blockquote><blockquote><p>通配符只能用于文本字段（字符串）。</p></blockquote><h3 id="百分号-通配符"><a href="#百分号-通配符" class="headerlink" title="百分号(%)通配符"></a>百分号(%)通配符</h3><blockquote><p>百分号(%)通配符表示任何字符出现任意次数。</p></blockquote><p>使用方法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;fish%&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>与前面的指令不同在于LIKE实际上是动词，因此不需要等于号(=)。</li><li>有的DEMS在搜索时区分大小写，因此通配符中可能会出现’fish%’&lt;&gt;’Fish%’的情况。</li><li>通配符不匹配空值(NULL)</li><li>%不仅可以放在后面，还可以放在需要匹配的单词的前面，中间，都可以。</li><li>一个(%)代表多个字符。</li></ul><h3 id="下划线-通配符"><a href="#下划线-通配符" class="headerlink" title="下划线(_)通配符"></a>下划线(_)通配符</h3><p>下划线(_)通配符与百分号(%)通配符的作用功能一样，但它只匹配单个字符，而不是多个字符。</p><p>即每一个(_)代表一个字符，遇到特殊情况可以多写两个，但是，不好区分写了几个，最好少用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_name, prod_id<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;__ inch bear toy&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>一个(_)只能代表一个字符，比如上面指令的输出结果只能是类似于’12 inch bear toy’的prod_name被过滤出来，但是’8 inch bear toy’就被排除在外了</li></ul><h3 id="方括号-通配符"><a href="#方括号-通配符" class="headerlink" title="方括号([])通配符"></a>方括号([])通配符</h3><blockquote><p>只有ACCESS和SQL Sever 支持该通配符。</p></blockquote><p>干巴巴的解释比较费劲，下面直接看一个例子。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> cust_name<br><span class="hljs-keyword">from</span> customs<br><span class="hljs-keyword">where</span> cust_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;[JM]%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">cust_name<br><span class="hljs-comment">---------</span><br>Jone ln<br>Joko leon<br>Mike Joe<br></code></pre></td></tr></table></figure><p>实际上也就是一个OR的功能。</p><blockquote><p>‘[JM]%’ = J% OR M%</p></blockquote><h2 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h2><p>SQL的通配符有用但是代价就是耗时更长。</p><ul><li>不要过度使用通配符。如果其他操作符可以到达相同作用，应使用其他操作符。</li><li>在确实需要使用通配符时，尽量不要放在搜索模式的开始处，在开始处搜索起来最慢。</li><li>仔细注意通配符的位置以及实际数据中的空格。如果放错地方，可能不会返回想要的数据。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通配符虽好，可不要贪杯哦！</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--高级数据过滤</title>
    <link href="/2021/05/12/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/"/>
    <url>/2021/05/12/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/</url>
    
    <content type="html"><![CDATA[<h1 id="第五课-高级数据过滤"><a href="#第五课-高级数据过滤" class="headerlink" title="第五课 高级数据过滤"></a>第五课 高级数据过滤</h1><p>先透露一下，本课就是在学习了WHERE子句基础指令后，结合AND\OR\IN\NOT四种运算符进行组合应用。</p><h2 id="组合WHERE子句（AND-OR）"><a href="#组合WHERE子句（AND-OR）" class="headerlink" title="组合WHERE子句（AND+OR）"></a>组合WHERE子句（AND+OR）</h2><p>先不去看课本，我们想象一下，如果让我们来做，AND符号应该如何应用呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> t1<br><span class="hljs-keyword">where</span> c1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> c2 <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>看，就是这么简单。</p><p>这是从数字角度的两个相等检验的组合，那我们还能怎么做，相等和不相等和大于小于等等之间的并列组合都可以使用这一条命令的呢。具体如何组合就看我们实际需求了。</p><p>同样的道理，我们已经学会了AND运算符的使用，相同层次的OR运算符，我们是不是已经掌握了呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_state<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c1 <span class="hljs-operator">=</span> &quot;US&quot; <span class="hljs-keyword">OR</span> c2 <span class="hljs-operator">=</span> &quot;DOWN&quot;;<br></code></pre></td></tr></table></figure><p>现在，一个问题摆到了我们面前。单独的<strong>AND</strong>运算我们会了，单独的<strong>OR</strong>运算我们也会了，但是如果既有<strong>AND</strong>又有<strong>OR</strong>该如何呢？运算顺序又是怎样的呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_id<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c1_name <span class="hljs-operator">=</span> &quot;Joneln&quot; <span class="hljs-keyword">and</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140025</span><br>      <span class="hljs-keyword">or</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140035</span><br></code></pre></td></tr></table></figure><p>这一条指令输出的是什么结果呢？</p><p>这一条指令其实还好理解，就是我们所看到的，先执行AND组合，再执行OR组合。</p><p>那么下面这一条呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_id<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140035</span> <span class="hljs-keyword">or</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140025</span> <br>      <span class="hljs-keyword">and</span> c1_name <span class="hljs-operator">=</span> &quot;Joneln&quot;<br></code></pre></td></tr></table></figure><p>这一条指令还是和上面一样从左到右依次执行吗？先执行OR运算在执行AND运算？事实证明，并非如此。</p><blockquote><p><em><strong>在大多数计算机语言中，AND操作符的优先级高于OR操作符。</strong></em></p></blockquote><p>此问题的解决方法就是，用括号将AND操作符两边操作条件括起来，就可以了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_id<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140035</span> <span class="hljs-keyword">or</span> (c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140025</span> <br>      <span class="hljs-keyword">and</span> c1_name <span class="hljs-operator">=</span> &quot;Joneln&quot;);<br></code></pre></td></tr></table></figure><h2 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h2><p>首先说明的是，在很大情况下，IN操作符完成的是与OR操作符相同的功能。</p><p>比如下面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_state<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140035</span> <span class="hljs-keyword">or</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140025</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_state<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">20140035</span>, <span class="hljs-number">20140025</span>);<br></code></pre></td></tr></table></figure><p>虽然在功能上IN操作符可以被OR操作符取代，但是，我们还是要学习并习惯使用IN操作符，理由如下：</p><ul><li>在很多合法选项中，IN操作符的语法更清楚，更直观。</li><li>在与其他AND和OR操作符组合使用IN时，求值顺序更容易管理。</li><li>IN操作符一般比一组OR操作符执行得更快，性能更好（尤其在大型数据库中取值时）。</li><li>IN的最大的优点在于可以包含其他SELECT语句，能够更动态地建立WHERE子句（在第11课详细讲解）。</li></ul><h2 id="NOT操作符"><a href="#NOT操作符" class="headerlink" title="NOT操作符"></a>NOT操作符</h2><p>WHERE子句的NOT操作符有且只有一个功能，就是否定其后所跟的任何条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_country,prod_price<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">NOT</span> prod_country <span class="hljs-operator">=</span> &quot;USA&quot;<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_price<br></code></pre></td></tr></table></figure><p>与IN操作符相似，NOT是不是貌似也可以用我们之前学习到的某个操作符来替代呢？没错就是不等于&lt;&gt;。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_country,prod_price<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span>  prod_country <span class="hljs-operator">&lt;&gt;</span> &quot;USA&quot;<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_price<br></code></pre></td></tr></table></figure><p>那么，为什么我们还要将这些操作符，甚至单独开一章来讲它们呢？</p><ul><li><em><strong>AND\OR\IN\NOT操作符的关键并不在于单独的某一个操作符的使用，而在于，相互组合后，发挥的强大作用。</strong></em></li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--过滤数据</title>
    <link href="/2021/05/12/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/"/>
    <url>/2021/05/12/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/</url>
    
    <content type="html"><![CDATA[<h1 id="第四课-过滤数据"><a href="#第四课-过滤数据" class="headerlink" title="第四课 过滤数据"></a>第四课 过滤数据</h1><p>这一节课比较简单，只是关于WHERE子句的简单介绍。但是呢，介绍起来很简单，使用起来作用很大。</p><h2 id="使用WHERE子句"><a href="#使用WHERE子句" class="headerlink" title="使用WHERE子句"></a>使用WHERE子句</h2><p>先来一个简单的列子开开胃。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2 <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>这一看就知道什么意思了吧。显示c2=3时的所有c1列的记录。</p><p>那么如果我们想要检索的是某一列等于某个字符串而非数字的情况该如何操作呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2 <span class="hljs-operator">=</span> &quot;我爱罗&quot;；<br></code></pre></td></tr></table></figure><p>**注意相等检验为字符串时需要加双引号。</p><p>甚至于以我们目前的知识还可以把前面几章串联起来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_name<br><span class="hljs-keyword">from</span> table1_name<br><span class="hljs-keyword">where</span> c3_name <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c1_name <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>在实际中，由于数据库中数据量之大，我们很少需要检索表中的所有行，此时，对数据进行过滤显得尤为重要。</p><h2 id="WHERE子句操作符"><a href="#WHERE子句操作符" class="headerlink" title="WHERE子句操作符"></a>WHERE子句操作符</h2><p>在前面通过一个例子，我们也知道了WHERE子句大概怎么用。下面呢，列出了WHERE所有的条件操作符。</p><table><thead><tr><th align="center">操作符</th><th>说明</th><th align="center">操作符</th><th>说明</th></tr></thead><tbody><tr><td align="center">=</td><td>等于</td><td align="center">&gt;</td><td>大于</td></tr><tr><td align="center">&lt;&gt;</td><td>不等于</td><td align="center">&gt;=</td><td>大于等于</td></tr><tr><td align="center">!=</td><td>不等于</td><td align="center">!&gt;</td><td>不大于</td></tr><tr><td align="center">&lt;</td><td>小于</td><td align="center">BETWEEN</td><td>在两者之间</td></tr><tr><td align="center">&lt;=</td><td>小于等于</td><td align="center">IS NULL</td><td>为NULL值</td></tr><tr><td align="center">!&lt;</td><td>不小于</td><td align="center"></td><td></td></tr></tbody></table><p>等于或者不等于之类的操作符与上面的例子一样的使用，这里再解释一下<strong>BETWEEN</strong>和<strong>IS NULL</strong>条件操作符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2 <span class="hljs-keyword">between</span> <span class="hljs-number">4</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span>；<br></code></pre></td></tr></table></figure><p>使用between操作符需要设定好范围内最小值和最大值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">where</span> c2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>在企业数据库中，由于各种原因，某一条记录中的某一列可能没有被赋值，于是成为空值。使用该指令可以检索出某一列的空值行。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--排序检索数据</title>
    <link href="/2021/05/11/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/"/>
    <url>/2021/05/11/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</url>
    
    <content type="html"><![CDATA[<h1 id="第三课-排序检索数据"><a href="#第三课-排序检索数据" class="headerlink" title="第三课 排序检索数据"></a>第三课 排序检索数据</h1><h2 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name<br><span class="hljs-keyword">from</span> table_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> column123_name;<br></code></pre></td></tr></table></figure><p>按照column123_name这一列的数字+字母顺序对输出结果column_name这一列进行排序。</p><p>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出来的数据的顺序有任何意义。</p><blockquote><p><strong>ORDER BY语句若存在，则必须为该命令的最后一个指令。</strong></p></blockquote><h2 id="按多个列排序"><a href="#按多个列排序" class="headerlink" title="按多个列排序"></a>按多个列排序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name<br><span class="hljs-keyword">from</span> t1_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c1_name, c2_name;<br></code></pre></td></tr></table></figure><p>首先按照c1_name的数字字母进行排序，若c1_name列各值唯一，绝不相同，则仅按照c1_name顺序对选择结果进行排序；</p><p>当且仅当c1_name列存在相同值时，才会再按照c2_name列的排序方式对c1_name相同值的记录进行排序。</p><h2 id="按列位置排序"><a href="#按列位置排序" class="headerlink" title="按列位置排序"></a>按列位置排序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name<br><span class="hljs-keyword">from</span> t1_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>，<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>这一个大概不怎么用了，我在MySQL上操作的时候没有成功，而且，在知乎也没有搜到这一条指令。</p><p>而且，我想我也不会再使用这一条命令，因为如若按照书本上来说，这一条命令很奇怪。他首先按照2列进行排序，再按照1列进行排序。</p><h2 id="指定排序方向"><a href="#指定排序方向" class="headerlink" title="指定排序方向"></a>指定排序方向</h2><p>在DEMS中，当使用ORDER BY指令时，默认检索数据排序方式为升序（ASC），也就是0-9-A-Z（不区分大小写）。</p><p>当然，我们也可以使用降序指令，指定排序方向。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name<br><span class="hljs-keyword">from</span> t1_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c1_name <span class="hljs-keyword">DESC</span>, c2_name;<br></code></pre></td></tr></table></figure><p>首先按照c1_name列进行降序排序，若有重复值，按照c2_name进行升序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name<br><span class="hljs-keyword">from</span> t1_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c1_name, c2_name <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>首先按照c1_name列进行升序排序，若有重复值，按照c2_name进行降序排序。</p><blockquote><p>DESC只作用于直接位于其前的一个列名。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--检索数据</title>
    <link href="/2021/05/11/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/"/>
    <url>/2021/05/11/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</url>
    
    <content type="html"><![CDATA[<h1 id="第二课-检索数据"><a href="#第二课-检索数据" class="headerlink" title="第二课 检索数据"></a>第二课 检索数据</h1><p>这一章介绍的是<em>SQL</em>最简单的<em>SELECT</em>语句。</p><p>在开始正文之前，首先介绍两条必备知识。</p><blockquote><p>多条SQL语句必须一分号（;）分割；<br>SQL语句不区分大小写。</p></blockquote><p>1.检索单个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name<br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>2.检索多个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_name<br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>3.检索所有列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>4.检索某一列中不同的值，即剔除重复值。<br>——比如，在供应产品表中每个供应商有多条记录，但是，我只想看我们一共有多少供应商，不想同一个供应商重复多次出现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> c_name<br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p> <strong>注意</strong>:<em>distinct</em>作用于其后的所有列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> c1_name, c2_name, c3_name<br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>5.限制结果<br>—–限制返回结果的行数，比如返回从第3行开始的两条记录。<br><strong>目前主要学习的是MySQL，故以下公式可在MySQL上运行，但是在其他数据库管理系统上不一定可以运行。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_name<br><span class="hljs-keyword">from</span> table_name<br>limit <span class="hljs-number">2</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_name<br><span class="hljs-keyword">from</span> table_name<br>limit <span class="hljs-number">3</span>, <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>上述公式都表示返回的结果从第三行开始，一共返回两行记录。若第三行后没有记录则返回一行。<br><strong>编程人员熟知，计算机是从0开始的，所以本处第三行是我们所看见的表格中的第四行。</strong></p><p>6 使用注释<br>—–在SQL语句中主要提供了三种注释方法。</p><p>单行注释：</p><blockquote><p>– 两杠加空格为单行注释</p></blockquote><h1 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h1><p>多行注释：</p><blockquote><p>/* 多行注释<br>任意位置*/</p></blockquote><p>以上即为第二章内容。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》--了解SQL</title>
    <link href="/2021/05/11/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
    <url>/2021/05/11/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    
    <content type="html"><![CDATA[<h1 id="第一课-了解SQL"><a href="#第一课-了解SQL" class="headerlink" title="第一课 了解SQL"></a>第一课 了解SQL</h1><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>数据库(database):  保存有组织的数据的容器，通常指一个文件或者一组文件。</p><p>数据库管理系统(DBMS):数据库软件。</p><p>表(table)：某种特定类型的结构化清单。储存在表中的数据是同一类型的数据和清单。</p><blockquote><p>同一数据库下，表名唯一。<br>同一表下，数据类型同一。</p></blockquote><p>列(column)：表中的一个字段。所有表都是由一个或多个列组成。</p><p>行(row)：数据按照行来存储，每一行为一条记录。</p><p>主键(primary key)：一列（或一组列），其值能够唯一标识表中的每一行。</p><blockquote><p>主键列中每一行记录都不重复，具有唯一性；<br>任意两行都不具有相同的主键值；<br>每一行也必须具有一个主键值；<br>主键值不允许为NULL值；<br>主键值不能重用（即使删除了某一行记录也不能将该记录的主键值赋予其他记录）。</p></blockquote><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><p>SQL的全拼为<em>Structured Query Language</em>，发音为字母<strong>S-Q-L</strong>或者英文单词<strong>sequel</strong>，这是一种专门用来与数据库沟通的语言。</p><blockquote><p>这是语言，和python\C++\Java等一样属于计算机语言，虽然是不同功能的语言。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>画龙七式</title>
    <link href="/2021/05/10/%E7%94%BB%E9%BE%99%E4%B8%83%E5%BC%8F/%E7%94%BB%E9%BE%99%E4%B8%83%E5%BC%8F%E5%86%99%E4%BD%9C%E6%B3%95/"/>
    <url>/2021/05/10/%E7%94%BB%E9%BE%99%E4%B8%83%E5%BC%8F/%E7%94%BB%E9%BE%99%E4%B8%83%E5%BC%8F%E5%86%99%E4%BD%9C%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="画龙七式写作法"><a href="#画龙七式写作法" class="headerlink" title="画龙七式写作法"></a>画龙七式写作法</h1><h2 id="第一式-冥想"><a href="#第一式-冥想" class="headerlink" title="第一式  冥想"></a>第一式  冥想</h2><p>在画龙正式开始前，首先要做的不是去做，而是去想。这一片文章的写作目的、写作目标和写作方式等。</p><h2 id="第二式-画骨"><a href="#第二式-画骨" class="headerlink" title="第二式  画骨"></a>第二式  画骨</h2><p>画龙画虎难画骨，画骨这一节可谓是重中之重，甚至直接决定了你的文章的质量。什么是文章的骨？拿我现在写的这一片综述性质的文章来说，文章的骨也就是框架，并不是你这一篇综述里每一篇文章具体写的是什么，而在于，你如何选择的文章，以及文章大致写的是什么。</p><p>这一节的表现形式就是标题，把每一篇文章的标题罗列出来，画骨就算完成了。</p><h2 id="第三式-充肌"><a href="#第三式-充肌" class="headerlink" title="第三式  充肌"></a>第三式  充肌</h2><p>本节的目标在于充实你的文章的骨架。</p><p>就本综述而言，大致包括每一篇文章的关键词、主客体、研究方法和核心观点等。</p><h2 id="第四式-描皮"><a href="#第四式-描皮" class="headerlink" title="第四式  描皮"></a>第四式  描皮</h2><p>“皮”就是最外部的表现形式了，也是对于文章的直观区分。而皮与皮之间既有相似连续性又有相对中断性，就如本综述所想，在众多文章中寻找其继承性如同一理论，同一问题下的A对B的补充；又如针对同一问题的不同研究方法、不同视角的对立或相互论证。</p><h2 id="第五式-雕头"><a href="#第五式-雕头" class="headerlink" title="第五式  雕头"></a>第五式  雕头</h2><p>头是统领。雕头即是对前述步骤的总结与概括。</p><h2 id="第六式-收尾"><a href="#第六式-收尾" class="headerlink" title="第六式  收尾"></a>第六式  收尾</h2><p>尾部最不受关注，但却最能提升龙像精气神的地方。收尾要注意灵活。具体到综述中，可评、可述、可点、可叹。</p><h2 id="第七式-点睛"><a href="#第七式-点睛" class="headerlink" title="第七式  点睛"></a>第七式  点睛</h2><p>人人说画龙点睛，这眼睛一点，龙即飞走。所以这眼睛可点，但不可让人看见你点。搜着藏着自己看，不要发表出来。因为这一部分，对应的综述中，就是对自己的研究的参悟。也就是自己本文章对自己研究的重要性。</p>]]></content>
    
    
    <categories>
      
      <category>Paper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/10/hello-world/"/>
    <url>/2021/05/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
