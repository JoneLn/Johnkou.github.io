<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录4</title>
    <link href="/2021/05/12/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/"/>
    <url>/2021/05/12/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/</url>
    
    <content type="html"><![CDATA[<h1 id="第四章-过滤数据"><a href="#第四章-过滤数据" class="headerlink" title="第四章 过滤数据"></a>第四章 过滤数据</h1><p>这一节课比较简单，只是关于WHERE子句的简单介绍。但是呢，介绍起来很简单，使用起来作用很大。</p><h2 id="使用WHERE子句"><a href="#使用WHERE子句" class="headerlink" title="使用WHERE子句"></a>使用WHERE子句</h2><p>先来一个简单的列子开开胃。</p><blockquote><p>select c1<br>from table1<br>where c2 = 3;</p></blockquote><p>这一看就知道什么意思了吧。显示c2=3时的所有c1列的记录。</p><p>那么如果我们想要检索的是某一列等于某个字符串而非数字的情况该如何操作呢？</p><blockquote><p>select c1<br>from table1<br>where c2 = “我爱罗”；</p></blockquote><p>**注意相等检验为字符串时需要加双引号。</p><p>甚至于以我们目前的知识还可以把前面几章串联起来。</p><blockquote><p>select c1_name, c2_name<br>from table1_name<br>where c3_name = 5<br>order by c1_name DESC;</p></blockquote><p>在实际中，由于数据库中数据量之大，我们很少需要检索表中的所有行，此时，对数据进行过滤显得尤为重要。</p><h2 id="WHERE子句操作符"><a href="#WHERE子句操作符" class="headerlink" title="WHERE子句操作符"></a>WHERE子句操作符</h2><p>在前面通过一个例子，我们也知道了WHERE子句大概怎么用。下面呢，列出了WHERE所有的条件操作符。</p><table><thead><tr><th align="center">操作符</th><th>说明</th><th align="center">操作符</th><th>说明</th></tr></thead><tbody><tr><td align="center">=</td><td>等于</td><td align="center">&gt;</td><td>大于</td></tr><tr><td align="center">&lt;&gt;</td><td>不等于</td><td align="center">&gt;=</td><td>大于等于</td></tr><tr><td align="center">!=</td><td>不等于</td><td align="center">!&gt;</td><td>不大于</td></tr><tr><td align="center">&lt;</td><td>小于</td><td align="center">BETWEEN</td><td>在两者之间</td></tr><tr><td align="center">&lt;=</td><td>小于等于</td><td align="center">IS NULL</td><td>为NULL值</td></tr><tr><td align="center">!&lt;</td><td>不小于</td><td align="center"></td><td></td></tr></tbody></table><p>等于或者不等于之类的操作符与上面的例子一样的使用，这里再解释一下<strong>BETWEEN</strong>和<strong>IS NULL</strong>条件操作符。</p><blockquote><p>select c1<br>from table1<br>where c2 between 4 and 10；</p></blockquote><p>使用between操作符需要设定好范围内最小值和最大值。</p><blockquote><p>select c1<br>from table<br>where c2 is null;</p></blockquote><p>在企业数据库中，由于各种原因，某一条记录中的某一列可能没有被赋值，于是成为空值。使用该指令可以检索出某一列的空值行。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录3</title>
    <link href="/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/"/>
    <url>/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章-排序检索数据"><a href="#第三章-排序检索数据" class="headerlink" title="第三章 排序检索数据"></a>第三章 排序检索数据</h1><h2 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h2><blockquote><p>select column_name<br>from table_name<br>order by column123_name;</p></blockquote><p>按照column123_name这一列的数字+字母顺序对输出结果column_name这一列进行排序。</p><p>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出来的数据的顺序有任何意义。</p><blockquote><p><strong>ORDER BY语句若存在，则必须为该命令的最后一个指令。</strong></p></blockquote><h2 id="按多个列排序"><a href="#按多个列排序" class="headerlink" title="按多个列排序"></a>按多个列排序</h2><blockquote><p>select c1_name<br>from t1_name<br>order by c1_name, c2_name;</p></blockquote><p>首先按照c1_name的数字字母进行排序，若c1_name列各值唯一，绝不相同，则仅按照c1_name顺序对选择结果进行排序；</p><p>当且仅当c1_name列存在相同值时，才会再按照c2_name列的排序方式对c1_name相同值的记录进行排序。</p><h2 id="按列位置排序"><a href="#按列位置排序" class="headerlink" title="按列位置排序"></a>按列位置排序</h2><blockquote><p>select c1_name<br>from t1_name<br>order by 1，2;</p></blockquote><p>这一个大概不怎么用了，我在MySQL上操作的时候没有成功，而且，在知乎也没有搜到这一条指令。</p><p>而且，我想我也不会再使用这一条命令，因为如若按照书本上来说，这一条命令很奇怪。他首先按照2列进行排序，再按照1列进行排序。</p><h2 id="指定排序方向"><a href="#指定排序方向" class="headerlink" title="指定排序方向"></a>指定排序方向</h2><p>在DEMS中，当使用ORDER BY指令时，默认检索数据排序方式为升序（ASC），也就是0-9-A-Z（不区分大小写）。</p><p>当然，我们也可以使用降序指令，指定排序方向。</p><blockquote><p>select c1_name<br>from t1_name<br>order by c1_name DESC, c2_name;</p></blockquote><p>首先按照c1_name列进行降序排序，若有重复值，按照c2_name进行升序排序。</p><blockquote><p>select c1_name<br>from t1_name<br>order by c1_name, c2_name DESC;</p></blockquote><p>首先按照c1_name列进行升序排序，若有重复值，按照c2_name进行降序排序。</p><blockquote><p>DESC只作用于直接位于其前的一个列名。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录2</title>
    <link href="/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/"/>
    <url>/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-检索数据"><a href="#第二章-检索数据" class="headerlink" title="第二章 检索数据"></a>第二章 检索数据</h1><p>这一章介绍的是<em>SQL</em>最简单的<em>SELECT</em>语句。</p><p>在开始正文之前，首先介绍两条必备知识。</p><blockquote><p>多条SQL语句必须一分号（;）分割；<br>SQL语句不区分大小写。</p></blockquote><p>1.检索单个列</p><blockquote><p>select column_name<br>from table_name;</p></blockquote><p>或者</p><blockquote><p>select column_name from table_name;</p></blockquote><p>2.检索多个列</p><blockquote><p>select c1_name, c2_name<br>from table_name;</p></blockquote><p>3.检索所有列</p><blockquote><p>select *<br>from table_name;</p></blockquote><p>4.检索某一列中不同的值，即剔除重复值。<br>——比如，在供应产品表中每个供应商有多条记录，但是，我只想看我们一共有多少供应商，不想同一个供应商重复多次出现。</p><blockquote><p>select distinct c_name<br>from table_name;</p></blockquote><p> <strong>注意</strong>:<em>distinct</em>作用于其后的所有列</p><blockquote><p>select distinct c1_name, c2_name, c3_name<br>from table_name;</p></blockquote><p>5.限制结果<br>—–限制返回结果的行数，比如返回从第3行开始的两条记录。<br><strong>目前主要学习的是MySQL，故以下公式可在MySQL上运行，但是在其他数据库管理系统上不一定可以运行。</strong></p><blockquote><p>select c1_name, c2_name<br>from table_name<br>limit 2 offset 3;</p></blockquote><blockquote><p>select c1_name, c2_name<br>from table_name<br>limit 3, 2;</p></blockquote><p>上述公式都表示返回的结果从第三行开始，一共返回两行记录。若第三行后没有记录则返回一行。<br><strong>编程人员熟知，计算机是从0开始的，所以本处第三行是我们所看见的表格中的第四行。</strong></p><p>6 使用注释<br>—–在SQL语句中主要提供了三种注释方法。</p><p>单行注释：</p><blockquote><p>– 两杠加空格为单行注释</p><h1 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h1></blockquote><p>多行注释：</p><blockquote><p>/* 多行注释<br>任意位置*/</p></blockquote><p>以上即为第二章内容。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录1</title>
    <link href="/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
    <url>/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-了解SQL"><a href="#第一章-了解SQL" class="headerlink" title="第一章 了解SQL"></a>第一章 了解SQL</h1><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>数据库(database):  保存有组织的数据的容器，通常指一个文件或者一组文件。</p><p>数据库管理系统(DBMS):数据库软件。</p><p>表(table)：某种特定类型的结构化清单。储存在表中的数据是同一类型的数据和清单。</p><blockquote><p>同一数据库下，表名唯一。<br>同一表下，数据类型同一。</p></blockquote><p>列(column)：表中的一个字段。所有表都是由一个或多个列组成。</p><p>行(row)：数据按照行来存储，每一行为一条记录。</p><p>主键(primary key)：一列（或一组列），其值能够唯一标识表中的每一行。</p><blockquote><p>主键列中每一行记录都不重复，具有唯一性；<br>任意两行都不具有相同的主键值；<br>每一行也必须具有一个主键值；<br>主键值不允许为NULL值；<br>主键值不能重用（即使删除了某一行记录也不能将该记录的主键值赋予其他记录）。</p></blockquote><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><p>SQL的全拼为<em>Structured Query Language</em>，发音为字母<strong>S-Q-L</strong>或者英文单词<strong>sequel</strong>，这是一种专门用来与数据库沟通的语言。</p><blockquote><p>这是语言，和python\C++\Java等一样属于计算机语言，虽然是不同功能的语言。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>画龙七式</title>
    <link href="/2021/05/10/%E7%94%BB%E9%BE%99%E4%B8%83%E5%BC%8F%E5%86%99%E4%BD%9C%E6%B3%95/"/>
    <url>/2021/05/10/%E7%94%BB%E9%BE%99%E4%B8%83%E5%BC%8F%E5%86%99%E4%BD%9C%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="画龙七式写作法"><a href="#画龙七式写作法" class="headerlink" title="画龙七式写作法"></a>画龙七式写作法</h1><h2 id="第一式-冥想"><a href="#第一式-冥想" class="headerlink" title="第一式  冥想"></a>第一式  冥想</h2><p>在画龙正式开始前，首先要做的不是去做，而是去想。这一片文章的写作目的、写作目标和写作方式等。</p><h2 id="第二式-画骨"><a href="#第二式-画骨" class="headerlink" title="第二式  画骨"></a>第二式  画骨</h2><p>画龙画虎难画骨，画骨这一节可谓是重中之重，甚至直接决定了你的文章的质量。什么是文章的骨？拿我现在写的这一片综述性质的文章来说，文章的骨也就是框架，并不是你这一篇综述里每一篇文章具体写的是什么，而在于，你如何选择的文章，以及文章大致写的是什么。</p><p>这一节的表现形式就是标题，把每一篇文章的标题罗列出来，画骨就算完成了。</p><h2 id="第三式-充肌"><a href="#第三式-充肌" class="headerlink" title="第三式  充肌"></a>第三式  充肌</h2><p>本节的目标在于充实你的文章的骨架。</p><p>就本综述而言，大致包括每一篇文章的关键词、主客体、研究方法和核心观点等。</p><h2 id="第四式-描皮"><a href="#第四式-描皮" class="headerlink" title="第四式  描皮"></a>第四式  描皮</h2><p>“皮”就是最外部的表现形式了，也是对于文章的直观区分。而皮与皮之间既有相似连续性又有相对中断性，就如本综述所想，在众多文章中寻找其继承性如同一理论，同一问题下的A对B的补充；又如针对同一问题的不同研究方法、不同视角的对立或相互论证。</p><h2 id="第五式-雕头"><a href="#第五式-雕头" class="headerlink" title="第五式  雕头"></a>第五式  雕头</h2><p>头是统领。雕头即是对前述步骤的总结与概括。</p><h2 id="第六式-收尾"><a href="#第六式-收尾" class="headerlink" title="第六式  收尾"></a>第六式  收尾</h2><p>尾部最不受关注，但却最能提升龙像精气神的地方。收尾要注意灵活。具体到综述中，可评、可述、可点、可叹。</p><h2 id="第七式-点睛"><a href="#第七式-点睛" class="headerlink" title="第七式  点睛"></a>第七式  点睛</h2><p>人人说画龙点睛，这眼睛一点，龙即飞走。所以这眼睛可点，但不可让人看见你点。搜着藏着自己看，不要发表出来。因为这一部分，对应的综述中，就是对自己的研究的参悟。也就是自己本文章对自己研究的重要性。</p>]]></content>
    
    
    <categories>
      
      <category>Paper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/10/hello-world/"/>
    <url>/2021/05/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
