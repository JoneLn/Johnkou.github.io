<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录10</title>
    <link href="/2021/05/17/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/"/>
    <url>/2021/05/17/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/</url>
    
    <content type="html"><![CDATA[<h2 id="第十课-分组数据"><a href="#第十课-分组数据" class="headerlink" title="第十课 分组数据"></a>第十课 分组数据</h2><p>前面两课，我们已经学习了数据分析函数，在此时，我们回想一下所学内容，是不是我们所学的函数，基本都处于<code>SELECT</code>语句后面呢。也就是我常说的主语句之中。那么在条件语句中，有没有什么数据处理方式呢？今天介绍两种。</p><p>目前为止，我们所有的计算都是在表的所有数据或者匹配特定的<code>WHERE</code>子句的数据基础上进行的。</p><p>如果要返回每个供应商提供的产品数目，该怎么办？或者返回只提供一个产品的所有供应商名单，怎么办？</p><p>这时候就需要分组大显身手了。使用分组可以将数据分为多个逻辑组，对每个数据组进行聚集计算。</p><h2 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h2><p>在学习之前，我以为分组子句<code>GROUP()</code>有多么复杂，还需要自己去思考如何对表进行逻辑分析和分组等等。</p><p>结果等我看例子时，我才发现我错的离谱，，，</p><p>首先看下面:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_id,<br>   <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> num_vend,<br>       vend_address<br><span class="hljs-keyword">from</span> vendors<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> vend_id<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: BRE02<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">500</span> Park Street<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">2.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: BRS01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">123</span> Main Street<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">3.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: DLL01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">555</span> High Street<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">4.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: FNG01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">42</span> Galaxy Road<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">5.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: FRB01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">1000</span> <span class="hljs-number">5</span>th Avenue<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">6.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>     vend_id: JTS01<br>    num_vend: <span class="hljs-number">1</span><br>vend_address: <span class="hljs-number">1</span> Rue Amusement<br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><p>上面的输出结果是按照记录形式单条记录的输出，在<code>MySQL</code>中使用快捷键<code>CTRL+ALT+ENTER</code>。</p><p>下面是表格形式输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_id  num_vend   vend_address<br><span class="hljs-comment">------------------------------------</span><br>BRE02    <span class="hljs-number">1</span>    <span class="hljs-number">500</span> Park Street<br>BRS01    <span class="hljs-number">1</span>    <span class="hljs-number">123</span> Main Street<br>DLL01    <span class="hljs-number">1</span>    <span class="hljs-number">555</span> High Street<br>FNG01    <span class="hljs-number">1</span>    <span class="hljs-number">42</span> Galaxy Road<br>FRB01    <span class="hljs-number">1</span>    <span class="hljs-number">1000</span> <span class="hljs-number">5</span>th Avenue<br>JTS01    <span class="hljs-number">1</span>    <span class="hljs-number">1</span> Rue Amusement<br></code></pre></td></tr></table></figure><blockquote><p>虽然分组子句可以拼接，但是，一般情况下，也就是只对单列进行分组并计算出现的次数。再高阶一点，就是对A列进行分组，并呈现B列聚集函数。<br>突然感觉没那么香了，甚至有一些鸡肋？好吧，不算鸡肋，只是作用比我想象的要小很多了。</p></blockquote><p>使用$group \quad by$子句前，需要知道一些重要规定。</p><ul><li>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行分组。</li><li>如果嵌套分组，数据将在最后制定的分组上进行汇总。</li><li>GROUP BY 子句中列出的每列必须是检索列或有效的表达式（聚集函数除外）。</li><li>除去聚集函数外，SELECT的每一列必须在GROUP BY中列出。</li></ul><h2 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h2><p><code>HAVING</code>子句过滤分组</p><p>在进行分组后，可能还需要过滤一些分组，使其不出现。</p><p>提到过滤数据，可能想到<code>WHERE</code>子句，但是在这一却不管用。因为</p><blockquote><p>WHERE子句过滤行，而HAVING子句过滤分组</p></blockquote><p>事实上</p><blockquote><p>目前为止所学的WHERE子句指令方式都可以用到HAVING子句中。</p></blockquote><p>WHERE 和 HAVING的具体区别：</p><blockquote><p>这里有另外一种理解方法，WHERE在数据分组前进行过滤，而HAVING在数据分组后进行过滤。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_country, cust_address,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_country <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;USA&#x27;</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cust_country, cust_address<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(cust_address) <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>这段代码的含义是先过滤出来美国客户，然后对客户国籍和客户地址进行分类，最后过滤出只出现一次的地址。</p><h2 id="SELECT子句顺序"><a href="#SELECT子句顺序" class="headerlink" title="SELECT子句顺序"></a>SELECT子句顺序</h2><p>目前为止，我们已经学习了多条指令，那么这些指令在SQL语言中是否应该有排序，以便规范编写及运行代码呢？</p><p>SELECT子句及其顺序<br>|  子句  |        说明        |      是否必须使用      |<br>| :—-: | :—————-: | :——————–: |<br>| SELECT | 要返回的列或表达式 |           是           |<br>|  FROM  |  从中检索数据的表  | 仅在从表选择数据时使用 |<br>| WHERE  |      行级过滤      |           否           |<br>| GROUP  |      分组说明      | 仅在安祖计算聚集时使用 |<br>| HAVING |      组级过滤      |           否           |<br>| ORDER  |    输出排序顺序    |           否           |</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>越写越慢了，慢慢的出现需要思考一会才能理解的指令了。</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录9</title>
    <link href="/2021/05/16/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%959/"/>
    <url>/2021/05/16/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%959/</url>
    
    <content type="html"><![CDATA[<h1 id="第九课-汇总数据"><a href="#第九课-汇总数据" class="headerlink" title="第九课 汇总数据"></a>第九课 汇总数据</h1><p>本课接着上一节课，继续讲解函数。相对于上一节课中各种不同类型的函数，本节课中的函数在数据分析时也更常用，且基本具有可移植性。</p><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><p>在实际需求中，我们经常需要把某列的数据汇总起来寻找我们需要的特定数值，但是却又不需要把所有数值检索出来。</p><p>比如，我们寻找某一列的最大值，我们首先需要遍历该列，然后进行比较，最后只是输出一个数值而已。</p><p>这些便是聚集函数(aggregate function)的作用：遍历某列中特定行，计算并返回一个值。</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">AVG()</td><td align="center">返回某列平均值</td></tr><tr><td align="center">COUNT()</td><td align="center">返回某列的行数</td></tr><tr><td align="center">MAX()</td><td align="center">返回某列最大值</td></tr><tr><td align="center">MIN()</td><td align="center">返回某列最小值</td></tr><tr><td align="center">SUM()</td><td align="center">返回某列值之和</td></tr></tbody></table><h3 id="AVG-函数"><a href="#AVG-函数" class="headerlink" title="AVG()函数"></a><code>AVG()</code>函数</h3><ol><li>求某列所有行数值的平均值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">avg_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">6.823333</span><br></code></pre></td></tr></table></figure><ol start="2"><li>求某列有条件的特定行行数值的平均值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br>   <span class="hljs-keyword">from</span> products<br>   <span class="hljs-keyword">where</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">avg_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">3.865000</span><br></code></pre></td></tr></table></figure><blockquote><p>每一个<code>AVG()</code>函数只能用于一列，求多列平均值，请用多个<code>AVG()</code>函数；<br><code>AVG()</code>函数忽略列值为 NULL 的行。</p></blockquote><h3 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT()函数"></a><code>COUNT()</code>函数</h3><p><code>COUNT()</code>函数有两种命令模式，<code>COUNT(*)</code>和<code>COUNT(COLUMN)</code>。</p><ol><li><code>COUNT(*)</code>计算所有行数，无论行中数值样式，包括NULL值。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>COUNT(COLUMN)</code>计算某一列中的行数，此时，自动忽略NULL值。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(prod_id)<br>   <span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(prod_id)<br>   <span class="hljs-keyword">FROM</span> products<br>   <span class="hljs-keyword">where</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="MAX-函数"><a href="#MAX-函数" class="headerlink" title="MAX()函数"></a><code>MAX()</code>函数</h3><ol><li>求某列所有行数值的最大值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(prod_price) <span class="hljs-keyword">AS</span> max_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">max_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">11.99</span><br></code></pre></td></tr></table></figure><ol start="2"><li>求某列有条件的特定行行数值的最大值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(prod_price) <span class="hljs-keyword">AS</span> max_price<br>   <span class="hljs-keyword">from</span> products<br>   <span class="hljs-keyword">where</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>; <br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">max_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">4.99</span><br></code></pre></td></tr></table></figure><blockquote><p>忽略NULL值；<br>可用于数值数据、日期数据和文本数据；<br>当用于文本数据后，返回排序最后位置的数值。</p></blockquote><h3 id="MIN-函数"><a href="#MIN-函数" class="headerlink" title="MIN()函数"></a><code>MIN()</code>函数</h3><ol><li>求某列所有行数值的最小值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(prod_price) <span class="hljs-keyword">AS</span> min_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">min_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">3.49</span><br></code></pre></td></tr></table></figure><ol start="2"><li>求某列有条件的特定行行数值的最小值</li></ol><p><strong>输入：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(prod_price) <span class="hljs-keyword">AS</span> min_price<br>   <span class="hljs-keyword">from</span> products<br>   <span class="hljs-keyword">where</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>; <br></code></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">min_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">3.49</span><br></code></pre></td></tr></table></figure><blockquote><p>忽略NULL值；<br>可用于数值数据、日期数据和文本数据；<br>当用于文本数据后，返回排序最前位置的数值。</p></blockquote><h3 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM()函数"></a><code>SUM()</code>函数</h3><ol><li>普通某列全部数值之和</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(prod_price) <span class="hljs-keyword">as</span> sum_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><ol start="2"><li>有条件的过滤后数据数值之和</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(prod_price) <span class="hljs-keyword">as</span> sum_price<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-number">20005</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>过滤后经过算术计算的数据数值之和</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(prod_price<span class="hljs-operator">*</span>quality) <span class="hljs-keyword">as</span> total_price<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-number">20005</span>;<br></code></pre></td></tr></table></figure><blockquote><p>忽略NULL值</p></blockquote><h2 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h2><p>以上5各聚集函数都可以如下使用：</p><ul><li>指定ALL参数（默认，可不指定）</li><li>制定DISTINCT参数</li></ul><h3 id="不指定参数时："><a href="#不指定参数时：" class="headerlink" title="不指定参数时："></a>不指定参数时：</h3><p><strong>输入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">avg_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">6.823333</span><br></code></pre></td></tr></table></figure><hr><h3 id="制定DISTINCT参数："><a href="#制定DISTINCT参数：" class="headerlink" title="制定DISTINCT参数："></a>制定DISTINCT参数：</h3><p><strong>输入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(<span class="hljs-keyword">distinct</span> prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">avg_price<br><span class="hljs-comment">---------</span><br><span class="hljs-number">7.490000</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>DISTINCT不能用于<code>COUNT(*)</code>,但可用于<code>COUNT(column)</code>；<br>DISTINCT从技术上可以用于<code>MIN()</code>和<code>MAX()</code>,但是没必要；</p></blockquote><h2 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h2><ul><li>组合聚集函数，也就是说一个SELECT语句可以包含多个聚集函数。</li><li>但是，需要记住为每一个聚集函数子句使用不同别名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> prod_price<br>       <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> num_items<br>       <span class="hljs-built_in">COUNT</span>(Prod_price) <span class="hljs-keyword">as</span> num_price<br>       <span class="hljs-built_in">MIN</span>(prod_price) <span class="hljs-keyword">as</span> min_price<br>       <span class="hljs-built_in">MAX</span>(prod_price) <span class="hljs-keyword">as</span> max_price<br>       <span class="hljs-built_in">AVG</span>(<span class="hljs-keyword">DISTINCT</span> PROD_PRICE) <span class="hljs-keyword">AS</span> Dis_avg_price<br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文看似学了很多，但是细分下来，也就是几点。</p><ol><li>5个聚集函数的基本使用；</li><li>5个聚集函数与过滤函数的配合使用；</li><li>5个聚集函数与取值参数的配合使用；</li><li>5个聚集函数的组合使用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录8</title>
    <link href="/2021/05/15/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%958/"/>
    <url>/2021/05/15/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%958/</url>
    
    <content type="html"><![CDATA[<h1 id="第八课-使用函数处理数据"><a href="#第八课-使用函数处理数据" class="headerlink" title="第八课 使用函数处理数据"></a>第八课 使用函数处理数据</h1><p>在本节课开始之前，我们首先大致回顾一下目前为止，我们所学过的知识及其内在逻辑。</p><p>首先我们知道，本文的初始点，并不是如何从无到有建立一个新的数据库。而是，默认我们目前已经有了一个数据库。</p><p>在有了数据库之后，我们首先需要知道，数据库里有什么？即数据检索（<code>SELECT</code>语句，<code>LIMIT</code>语句，<code>ORDER</code>语句）和数据过滤（<code>WHERE</code>子句、组合过滤、通配符过滤）。</p><p>在了解数据库里有什么之后，从第七课数据拼接与执行算术计算开始，就已经进入了数据处理的世界。</p><p>本课就进一步介绍SQL语言中处理数据的一项便利但又不便利的工具–函数。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>如果，你之前学过其他计算机语言，那么你对计算机中的函数概念想必也有一些了解。</p><p>在特定的DBMS中，函数为数据处理带来的便利性是毋庸置疑 的。</p><p>但是，目前存在的最大的问题就在于，虽然SQL语句被几乎所有的DBMS都等同地支持，但是，却仅有相当少的一部分SQL函数也享有相同的待遇。</p><p>各大厂商在基本的SQL语句和函数的基础上各自设计出不同的函数以便利DBMS客户的使用。最终的结果就是，明明具有相同功能的函数，在不同的DBMS中，却有不同的命名。因此大部分SQL函数代码，不可移植。</p><p>在下面，我们将介绍集中可移植的SQL函数。</p><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><p>大多数SQL实现支持以下类型的函数：</p><ul><li>用于处理文本字符串（如删除或填充，转换为大写或小写）的文本函数。</li><li>用于在数值数据上进行的算术操作（如返回绝对值，进行代数运算）的数值函数。</li><li>用于处理日期和时间值并从这些值中提取特定成分（如返回两个日期之差，检查日期有效性）的日期和时间函数。</li><li>返回DBMS正使用的特殊信息（如返回用户登录信息）的系统函数。</li></ul><h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><p>在上一课中，我们使用到了去掉列值右边空格的函数<code>RTRIM()</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_name,<br>       prod_id,<br>       RTRIM(prod_name<span class="hljs-operator">+</span>prod_id)<br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><blockquote><p>以上函数在MySQL中是不正确的，因为该系统中字段拼接方式为特定的函数<code>CONCAT()</code>，而该函数自带空格消除术。当然<code>RTRIM()</code>还是可以用的。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> prod_name,<br>          prod_id,<br>          concat(prod_name, prod_id)<br>   <span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><p>除此之外，再举一个文本处理函数的例子<code>UPPER()</code>。</p><p><strong>输入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, <span class="hljs-built_in">upper</span>(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   --------------</span><br>Bear EmporiumBEAR EMPORIUM<br>Bears R Us    BEARS R US<br>Doll House Inc.DOLL HOUSE INC.<br>Fun <span class="hljs-keyword">and</span> GamesFUN <span class="hljs-keyword">AND</span> GAMES<br>Furball Inc.FURBALL INC.<br>Jouets et oursJOUETS ET OURS<br></code></pre></td></tr></table></figure><p>在下表中罗列出常用的通用的文本处理函数。</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">LEFT()</td><td align="center">返回字符串左边的字符</td></tr><tr><td align="center">LENGTH()</td><td align="center">返回字符串长度</td></tr><tr><td align="center">LOWER()</td><td align="center">将字符串转换成小写</td></tr><tr><td align="center">LTRIM()</td><td align="center">去掉字符串左边的字符</td></tr><tr><td align="center">RIGHT()</td><td align="center">返回字符串右边的字符</td></tr><tr><td align="center">RTRIM()</td><td align="center">去掉字符串右边的字符</td></tr><tr><td align="center">SOUNDEX()</td><td align="center">返回字符串的SOUNDEX值</td></tr><tr><td align="center">UPPER()</td><td align="center">将字符串转换成大写</td></tr></tbody></table><p><code>LENGTH()</code>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, length(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   -----------------</span><br>Bear Emporium<span class="hljs-number">13</span><br>Bears R Us    <span class="hljs-number">10</span><br>Doll House Inc.<span class="hljs-number">15</span><br>Fun <span class="hljs-keyword">and</span> Games<span class="hljs-number">13</span><br>Furball Inc.<span class="hljs-number">12</span><br>Jouets et ours<span class="hljs-number">14</span><br><br></code></pre></td></tr></table></figure><p><code>LOWER()</code>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, <span class="hljs-built_in">lower</span>(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   -----------------</span><br>Bear Emporiumbear emporium<br>Bears R Us  bears r us<br>Doll House Inc.doll house inc.<br>Fun <span class="hljs-keyword">and</span> Gamesfun <span class="hljs-keyword">and</span> games<br>Furball Inc.furball inc.<br>Jouets et oursjouets et ours<br><br></code></pre></td></tr></table></figure><p><code>LTRIM()</code>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, ltrim(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   -----------------</span><br>Bear EmporiumBear Emporium<br>Bears R Us    Bears R Us<br>Doll House Inc.Doll House Inc.<br>Fun <span class="hljs-keyword">and</span> GamesFun <span class="hljs-keyword">and</span> Games<br>Furball Inc.Furball Inc.<br>Jouets et oursJouets et ours<br><br></code></pre></td></tr></table></figure><p><code>LTRIM()</code>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> vend_name, SOUNDEX(vend_name) <span class="hljs-keyword">as</span> vend_name_upcase<br><span class="hljs-keyword">from</span> Vendors<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> vend_name;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">vend_name       vend_name_upcase<br><span class="hljs-comment">-------------   -----------------</span><br>Bear EmporiumB65165<br>Bears R Us    B6262<br>Doll House Inc.D4252<br>Fun <span class="hljs-keyword">and</span> GamesF53252<br>Furball Inc.F61452<br>Jouets et oursJ32362<br></code></pre></td></tr></table></figure><blockquote><p><code>SOUNDEX()</code>是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。</p></blockquote><p>下面这个例子呢，很好玩，也充分说明了该函数的作用。</p><ul><li>假如，我们有一个客户名为<em>Michael Green</em>；</li><li>但是，我们在储存数据时误将其存为<em>Michelle Green</em>。</li><li>所以，我们应如何将其检索出来呢？</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> CUST_NAME, cust_contact<br> <span class="hljs-keyword">from</span> customers<br> <span class="hljs-keyword">where</span> soundex(cust_contact) <span class="hljs-operator">=</span> soundex(<span class="hljs-string">&#x27;Michael Green&#x27;</span>);<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">CUST_NAME   cust_contact<br><span class="hljs-comment">---------   ------------</span><br>Kids PlaceMichelle Green<br></code></pre></td></tr></table></figure><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><p>各个数据库管理系统基本都不相同，因此，不在这里学了。以后专门学习某一固定的DBMS时候再说吧。</p><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><p>数值处理函数仅处理数值数据。</p><p>这些函数一般主要用于代数、三角或几何运算，因此不像字符串或日期-时间处理函数那么频繁使用。</p><p>具有讽刺意味的是，在主要的DBMS的函数中，数值函数是最一致、最统一的函数。</p><p>在下表中列出常用数值处理函数。</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ABS()</td><td align="center">返回一个数的绝对值</td></tr><tr><td align="center">COS()</td><td align="center">返回一个角度的余弦</td></tr><tr><td align="center">EXP()</td><td align="center">返回一个数的指数值</td></tr><tr><td align="center">PI()</td><td align="center">返回圆周率</td></tr><tr><td align="center">SIN()</td><td align="center">返回一个监督的正弦</td></tr><tr><td align="center">SQRT()</td><td align="center">返回一个数的平方根</td></tr><tr><td align="center">TAN()</td><td align="center">返回一个角度的正切</td></tr></tbody></table><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本课中，主要的函数具有的可移植性不强，应该在日后选择某个具体的DBMS时，深入学习。</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录7</title>
    <link href="/2021/05/14/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%957/"/>
    <url>/2021/05/14/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%957/</url>
    
    <content type="html"><![CDATA[<h1 id="第七课-创建计算字段"><a href="#第七课-创建计算字段" class="headerlink" title="第七课 创建计算字段"></a>第七课 创建计算字段</h1><p>前面几章，除去DISTINCT指令，其他全部指令都是在主语句（select…from…）之后，添加条件指令（限制，排序，过滤）。那么说在主语句有没有什么骚操作呢？</p><p>请看本章，SELECT语句内的爱恨情仇。</p><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><p>计算字段是运行时在SELECT语句内创建的。</p><blockquote><p>字段(field)基本上与列(column)的意思相同，经常相互使用，不过数据库列一般成为列，而术语字段通常与计算字段一起使用。</p></blockquote><p>为什么使用计算字段呢？或者说什么情况下使用计算字段呢？</p><ul><li>需要显示公司名，同时显示公司地址，但是这两个信息存储在不同表列中。</li><li>公司名和公司地址这两个字段在同一各表列中，但是在打印程序时需要把他们作为有恰当格式的一个字段检索出来。</li><li>列数据中大小写混合，但是在打印中需要把所有数据按大写表示出来。</li><li>需要根据表数据进行加减乘除等运算（总价格等）。</li></ul><p>在上面几个例子中，我们发现，储存在表中的数据往往并不与现实中的需求一一对应。我们需要直接从数据库中检索出转换、计算或格式化过的数据，而不是检索出数据，然后再在客户端应用程序中二次操作，重新格式化。</p><p>简单归纳为拼接字段与算术计算。</p><p>这，就是计算字段所起到的作用。</p><h2 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h2><h3 id="字段拼接"><a href="#字段拼接" class="headerlink" title="字段拼接"></a>字段拼接</h3><p>字段拼接即将同一表列中两个及以上的字段的数据拼接为一个整体进行输出表示。</p><blockquote><p>在不同DEMS中，略有差异。</p></blockquote><p>Access 和 SQL Server 中的字段拼接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> cust_name <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span><br><span class="hljs-keyword">from</span> customers<br>limit <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>DB2, Oracle, PostgreSQL, SQLite 和 Open Office Base中的字段拼接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> cust_id <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">||</span> cust_name <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;)&#x27;</span><br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cust_id;<br></code></pre></td></tr></table></figure><p>相信大多数朋友已经看出来两者的区别了，就是拼接符号分别为<code>+</code>和 <code>||</code>。</p><p>但是还有一类DBMS具有和这两类的拼接方式不一样，这就是MySQL 和 MarialDB。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> concat (cust_id, <span class="hljs-string">&#x27;(&#x27;</span>, cust_name, <span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">from</span> customers<br><span class="hljs-keyword">where</span> cust_id <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10000004</span>;<br></code></pre></td></tr></table></figure><p>还需要特别注意一点，在上述三类字段拼接指令中，除了第三类使用特定函数来字段拼接外，其他两种方式在输出结果上都包含了大量的空格，需要使用特定函数<code>RTRIM()</code>来去掉空格。</p><p>如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> RTRIM( cust_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> cust_name <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> )<br><span class="hljs-keyword">from</span> customers<br>limit <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h3><p>使用以上的方法进行字段拼接时输出结果的字段名或者没有或者就是一大段文字例如<code>concat (cust_id, &#39;(&#39;, cust_name, &#39;)&#39;)</code>   ，这样输出的结果实际上只是一个值，我们在接下来的客户端是无非直接引用这种值的。那么我们可不可以直接对他们进行命名后输出呢？</p><p>这就要提到这一小节要讲的知识了–列别名。</p><p>别名(alias)是一个字段或值的替换名。别名用关键字<code>AS</code>赋予。<br>在所有DBMS中都可以使用类似以下的方法进行列别名命名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> RTRIM( cust_id <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> cust_name <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> ) <span class="hljs-keyword">AS</span> cust_nid<br><span class="hljs-keyword">from</span> customers<br>limit <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL">cust_nid<br><span class="hljs-comment">----------------------</span><br><span class="hljs-number">1000000003</span>(Fun4All)<br><span class="hljs-number">1000000004</span>(Fun4All)<br><span class="hljs-number">1000000005</span>(The Toy Store)<br></code></pre></td></tr></table></figure><h2 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h2><p>在实际应用中，我们常常需要对表中数据进行各种运算。为了避免二次运算，我们可以在DEMS中使用SQL进行运算后输出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,<br>       quantity,<br>       item_price,<br>       quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">AS</span> expanded_price<br><span class="hljs-keyword">from</span> OrderItems<br><span class="hljs-keyword">where</span> order_num <span class="hljs-operator">=</span> <span class="hljs-number">20008</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">prod_id quantity item_price quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">AS</span> expanded_price<br><span class="hljs-comment">--------------------------------------------------------------------</span><br>RGAN01    <span class="hljs-number">5</span>    <span class="hljs-number">4.99</span>        <span class="hljs-number">24.95</span><br>BR03    <span class="hljs-number">5</span>    <span class="hljs-number">11.99</span>        <span class="hljs-number">59.95</span><br>BNBG01    <span class="hljs-number">10</span>    <span class="hljs-number">3.49</span>        <span class="hljs-number">34.90</span><br>BNBG02    <span class="hljs-number">10</span>    <span class="hljs-number">3.49</span>        <span class="hljs-number">34.90</span><br>BNBG03    <span class="hljs-number">10</span>    <span class="hljs-number">3.49</span>        <span class="hljs-number">34.90</span><br></code></pre></td></tr></table></figure><p>上面只是举了一个乘法的例子来说明SQL的算术计算是如何进行的，同样的方法可以用在<code>+,- *, /</code>中，也可以对其进行混合运算，优先级为先乘除后加减，使用<code>()</code>可以改变优先级。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文首先讲解了主语句<code>SELECT</code>处的拼接字段与别名命名，然后又讲了同样处于<code>SELECT</code>指令内的字段算术计算。</p><p>从本文开始，属于SQL语法的入门阶段了。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录6</title>
    <link href="/2021/05/13/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%956/"/>
    <url>/2021/05/13/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%956/</url>
    
    <content type="html"><![CDATA[<h1 id="第六课-用通配符进行过滤"><a href="#第六课-用通配符进行过滤" class="headerlink" title="第六课 用通配符进行过滤"></a>第六课 用通配符进行过滤</h1><p>通配符进行过滤是是在WHERE指令中使用的对前面几章所学的过滤规则的补充，主要是由于前面所学的过滤规则必须使用已知的特定的准确的值。</p><p>当我们只知道一个词，但是想要找到包含这个词的数据值时，通配符就有了作用。</p><p>本课介绍三种用以过滤的通配符：百分号% 及下划线 _ 和方括号[]。</p><h2 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a>LIKE操作符</h2><blockquote><p>通配符(wildcard)：用来匹配值的一部分的特殊字符。</p></blockquote><blockquote><p>搜索模式(search pattern)：由字面值、通配符或两者组合构成的搜索条件。</p></blockquote><blockquote><p>为在搜索子句中使用通配符，必须使用LIKE操作符。</p></blockquote><blockquote><p>通配符只能用于文本字段（字符串）。</p></blockquote><h3 id="百分号-通配符"><a href="#百分号-通配符" class="headerlink" title="百分号(%)通配符"></a>百分号(%)通配符</h3><blockquote><p>百分号(%)通配符表示任何字符出现任意次数。</p></blockquote><p>使用方法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;fish%&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>与前面的指令不同在于LIKE实际上是动词，因此不需要等于号(=)。</li><li>有的DEMS在搜索时区分大小写，因此通配符中可能会出现’fish%’&lt;&gt;’Fish%’的情况。</li><li>通配符不匹配空值(NULL)</li><li>%不仅可以放在后面，还可以放在需要匹配的单词的前面，中间，都可以。</li><li>一个(%)代表多个字符。</li></ul><h3 id="下划线-通配符"><a href="#下划线-通配符" class="headerlink" title="下划线(_)通配符"></a>下划线(_)通配符</h3><p>下划线(_)通配符与百分号(%)通配符的作用功能一样，但它只匹配单个字符，而不是多个字符。</p><p>即每一个(_)代表一个字符，遇到特殊情况可以多写两个，但是，不好区分写了几个，最好少用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_name, prod_id<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;__ inch bear toy&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>一个(_)只能代表一个字符，比如上面指令的输出结果只能是类似于’12 inch bear toy’的prod_name被过滤出来，但是’8 inch bear toy’就被排除在外了</li></ul><h3 id="方括号-通配符"><a href="#方括号-通配符" class="headerlink" title="方括号([])通配符"></a>方括号([])通配符</h3><blockquote><p>只有ACCESS和SQL Sever 支持该通配符。</p></blockquote><p>干巴巴的解释比较费劲，下面直接看一个例子。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> cust_name<br><span class="hljs-keyword">from</span> customs<br><span class="hljs-keyword">where</span> cust_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;[JM]%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">cust_name<br><span class="hljs-comment">---------</span><br>Jone ln<br>Joko leon<br>Mike Joe<br></code></pre></td></tr></table></figure><p>实际上也就是一个OR的功能。</p><blockquote><p>‘[JM]%’ = J% OR M%</p></blockquote><h2 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h2><p>SQL的通配符有用但是代价就是耗时更长。</p><ul><li>不要过度使用通配符。如果其他操作符可以到达相同作用，应使用其他操作符。</li><li>在确实需要使用通配符时，尽量不要放在搜索模式的开始处，在开始处搜索起来最慢。</li><li>仔细注意通配符的位置以及实际数据中的空格。如果放错地方，可能不会返回想要的数据。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通配符虽好，可不要贪杯哦！</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录5</title>
    <link href="/2021/05/12/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/"/>
    <url>/2021/05/12/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/</url>
    
    <content type="html"><![CDATA[<h1 id="第五课-高级数据过滤"><a href="#第五课-高级数据过滤" class="headerlink" title="第五课 高级数据过滤"></a>第五课 高级数据过滤</h1><p>先透露一下，本课就是在学习了WHERE子句基础指令后，结合AND\OR\IN\NOT四种运算符进行组合应用。</p><h2 id="组合WHERE子句（AND-OR）"><a href="#组合WHERE子句（AND-OR）" class="headerlink" title="组合WHERE子句（AND+OR）"></a>组合WHERE子句（AND+OR）</h2><p>先不去看课本，我们想象一下，如果让我们来做，AND符号应该如何应用呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> t1<br><span class="hljs-keyword">where</span> c1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> c2 <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>看，就是这么简单。</p><p>这是从数字角度的两个相等检验的组合，那我们还能怎么做，相等和不相等和大于小于等等之间的并列组合都可以使用这一条命令的呢。具体如何组合就看我们实际需求了。</p><p>同样的道理，我们已经学会了AND运算符的使用，相同层次的OR运算符，我们是不是已经掌握了呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_state<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c1 <span class="hljs-operator">=</span> &quot;US&quot; <span class="hljs-keyword">OR</span> c2 <span class="hljs-operator">=</span> &quot;DOWN&quot;;<br></code></pre></td></tr></table></figure><p>现在，一个问题摆到了我们面前。单独的<strong>AND</strong>运算我们会了，单独的<strong>OR</strong>运算我们也会了，但是如果既有<strong>AND</strong>又有<strong>OR</strong>该如何呢？运算顺序又是怎样的呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_id<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c1_name <span class="hljs-operator">=</span> &quot;Joneln&quot; <span class="hljs-keyword">and</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140025</span><br>      <span class="hljs-keyword">or</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140035</span><br></code></pre></td></tr></table></figure><p>这一条指令输出的是什么结果呢？</p><p>这一条指令其实还好理解，就是我们所看到的，先执行AND组合，再执行OR组合。</p><p>那么下面这一条呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_id<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140035</span> <span class="hljs-keyword">or</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140025</span> <br>      <span class="hljs-keyword">and</span> c1_name <span class="hljs-operator">=</span> &quot;Joneln&quot;<br></code></pre></td></tr></table></figure><p>这一条指令还是和上面一样从左到右依次执行吗？先执行OR运算在执行AND运算？事实证明，并非如此。</p><blockquote><p><em><strong>在大多数计算机语言中，AND操作符的优先级高于OR操作符。</strong></em></p></blockquote><p>此问题的解决方法就是，用括号将AND操作符两边操作条件括起来，就可以了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_id<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140035</span> <span class="hljs-keyword">or</span> (c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140025</span> <br>      <span class="hljs-keyword">and</span> c1_name <span class="hljs-operator">=</span> &quot;Joneln&quot;);<br></code></pre></td></tr></table></figure><h2 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h2><p>首先说明的是，在很大情况下，IN操作符完成的是与OR操作符相同的功能。</p><p>比如下面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_state<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140035</span> <span class="hljs-keyword">or</span> c2_id <span class="hljs-operator">=</span> <span class="hljs-number">20140025</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_state<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">20140035</span>, <span class="hljs-number">20140025</span>);<br></code></pre></td></tr></table></figure><p>虽然在功能上IN操作符可以被OR操作符取代，但是，我们还是要学习并习惯使用IN操作符，理由如下：</p><ul><li>在很多合法选项中，IN操作符的语法更清楚，更直观。</li><li>在与其他AND和OR操作符组合使用IN时，求值顺序更容易管理。</li><li>IN操作符一般比一组OR操作符执行得更快，性能更好（尤其在大型数据库中取值时）。</li><li>IN的最大的优点在于可以包含其他SELECT语句，能够更动态地建立WHERE子句（在第11课详细讲解）。</li></ul><h2 id="NOT操作符"><a href="#NOT操作符" class="headerlink" title="NOT操作符"></a>NOT操作符</h2><p>WHERE子句的NOT操作符有且只有一个功能，就是否定其后所跟的任何条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_country,prod_price<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">NOT</span> prod_country <span class="hljs-operator">=</span> &quot;USA&quot;<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_price<br></code></pre></td></tr></table></figure><p>与IN操作符相似，NOT是不是貌似也可以用我们之前学习到的某个操作符来替代呢？没错就是不等于&lt;&gt;。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_country,prod_price<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span>  prod_country <span class="hljs-operator">&lt;&gt;</span> &quot;USA&quot;<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_price<br></code></pre></td></tr></table></figure><p>那么，为什么我们还要将这些操作符，甚至单独开一章来讲它们呢？</p><ul><li><em><strong>AND\OR\IN\NOT操作符的关键并不在于单独的某一个操作符的使用，而在于，相互组合后，发挥的强大作用。</strong></em></li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录4</title>
    <link href="/2021/05/12/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/"/>
    <url>/2021/05/12/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/</url>
    
    <content type="html"><![CDATA[<h1 id="第四课-过滤数据"><a href="#第四课-过滤数据" class="headerlink" title="第四课 过滤数据"></a>第四课 过滤数据</h1><p>这一节课比较简单，只是关于WHERE子句的简单介绍。但是呢，介绍起来很简单，使用起来作用很大。</p><h2 id="使用WHERE子句"><a href="#使用WHERE子句" class="headerlink" title="使用WHERE子句"></a>使用WHERE子句</h2><p>先来一个简单的列子开开胃。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2 <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>这一看就知道什么意思了吧。显示c2=3时的所有c1列的记录。</p><p>那么如果我们想要检索的是某一列等于某个字符串而非数字的情况该如何操作呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2 <span class="hljs-operator">=</span> &quot;我爱罗&quot;；<br></code></pre></td></tr></table></figure><p>**注意相等检验为字符串时需要加双引号。</p><p>甚至于以我们目前的知识还可以把前面几章串联起来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_name<br><span class="hljs-keyword">from</span> table1_name<br><span class="hljs-keyword">where</span> c3_name <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c1_name <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>在实际中，由于数据库中数据量之大，我们很少需要检索表中的所有行，此时，对数据进行过滤显得尤为重要。</p><h2 id="WHERE子句操作符"><a href="#WHERE子句操作符" class="headerlink" title="WHERE子句操作符"></a>WHERE子句操作符</h2><p>在前面通过一个例子，我们也知道了WHERE子句大概怎么用。下面呢，列出了WHERE所有的条件操作符。</p><table><thead><tr><th align="center">操作符</th><th>说明</th><th align="center">操作符</th><th>说明</th></tr></thead><tbody><tr><td align="center">=</td><td>等于</td><td align="center">&gt;</td><td>大于</td></tr><tr><td align="center">&lt;&gt;</td><td>不等于</td><td align="center">&gt;=</td><td>大于等于</td></tr><tr><td align="center">!=</td><td>不等于</td><td align="center">!&gt;</td><td>不大于</td></tr><tr><td align="center">&lt;</td><td>小于</td><td align="center">BETWEEN</td><td>在两者之间</td></tr><tr><td align="center">&lt;=</td><td>小于等于</td><td align="center">IS NULL</td><td>为NULL值</td></tr><tr><td align="center">!&lt;</td><td>不小于</td><td align="center"></td><td></td></tr></tbody></table><p>等于或者不等于之类的操作符与上面的例子一样的使用，这里再解释一下<strong>BETWEEN</strong>和<strong>IS NULL</strong>条件操作符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">where</span> c2 <span class="hljs-keyword">between</span> <span class="hljs-number">4</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span>；<br></code></pre></td></tr></table></figure><p>使用between操作符需要设定好范围内最小值和最大值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1<br><span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">where</span> c2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>在企业数据库中，由于各种原因，某一条记录中的某一列可能没有被赋值，于是成为空值。使用该指令可以检索出某一列的空值行。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录3</title>
    <link href="/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/"/>
    <url>/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</url>
    
    <content type="html"><![CDATA[<h1 id="第三课-排序检索数据"><a href="#第三课-排序检索数据" class="headerlink" title="第三课 排序检索数据"></a>第三课 排序检索数据</h1><h2 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name<br><span class="hljs-keyword">from</span> table_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> column123_name;<br></code></pre></td></tr></table></figure><p>按照column123_name这一列的数字+字母顺序对输出结果column_name这一列进行排序。</p><p>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出来的数据的顺序有任何意义。</p><blockquote><p><strong>ORDER BY语句若存在，则必须为该命令的最后一个指令。</strong></p></blockquote><h2 id="按多个列排序"><a href="#按多个列排序" class="headerlink" title="按多个列排序"></a>按多个列排序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name<br><span class="hljs-keyword">from</span> t1_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c1_name, c2_name;<br></code></pre></td></tr></table></figure><p>首先按照c1_name的数字字母进行排序，若c1_name列各值唯一，绝不相同，则仅按照c1_name顺序对选择结果进行排序；</p><p>当且仅当c1_name列存在相同值时，才会再按照c2_name列的排序方式对c1_name相同值的记录进行排序。</p><h2 id="按列位置排序"><a href="#按列位置排序" class="headerlink" title="按列位置排序"></a>按列位置排序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name<br><span class="hljs-keyword">from</span> t1_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>，<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>这一个大概不怎么用了，我在MySQL上操作的时候没有成功，而且，在知乎也没有搜到这一条指令。</p><p>而且，我想我也不会再使用这一条命令，因为如若按照书本上来说，这一条命令很奇怪。他首先按照2列进行排序，再按照1列进行排序。</p><h2 id="指定排序方向"><a href="#指定排序方向" class="headerlink" title="指定排序方向"></a>指定排序方向</h2><p>在DEMS中，当使用ORDER BY指令时，默认检索数据排序方式为升序（ASC），也就是0-9-A-Z（不区分大小写）。</p><p>当然，我们也可以使用降序指令，指定排序方向。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name<br><span class="hljs-keyword">from</span> t1_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c1_name <span class="hljs-keyword">DESC</span>, c2_name;<br></code></pre></td></tr></table></figure><p>首先按照c1_name列进行降序排序，若有重复值，按照c2_name进行升序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name<br><span class="hljs-keyword">from</span> t1_name<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c1_name, c2_name <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>首先按照c1_name列进行升序排序，若有重复值，按照c2_name进行降序排序。</p><blockquote><p>DESC只作用于直接位于其前的一个列名。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录2</title>
    <link href="/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/"/>
    <url>/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</url>
    
    <content type="html"><![CDATA[<h1 id="第二课-检索数据"><a href="#第二课-检索数据" class="headerlink" title="第二课 检索数据"></a>第二课 检索数据</h1><p>这一章介绍的是<em>SQL</em>最简单的<em>SELECT</em>语句。</p><p>在开始正文之前，首先介绍两条必备知识。</p><blockquote><p>多条SQL语句必须一分号（;）分割；<br>SQL语句不区分大小写。</p></blockquote><p>1.检索单个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name<br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>2.检索多个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_name<br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>3.检索所有列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>4.检索某一列中不同的值，即剔除重复值。<br>——比如，在供应产品表中每个供应商有多条记录，但是，我只想看我们一共有多少供应商，不想同一个供应商重复多次出现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> c_name<br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p> <strong>注意</strong>:<em>distinct</em>作用于其后的所有列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> c1_name, c2_name, c3_name<br><span class="hljs-keyword">from</span> table_name;<br></code></pre></td></tr></table></figure><p>5.限制结果<br>—–限制返回结果的行数，比如返回从第3行开始的两条记录。<br><strong>目前主要学习的是MySQL，故以下公式可在MySQL上运行，但是在其他数据库管理系统上不一定可以运行。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_name<br><span class="hljs-keyword">from</span> table_name<br>limit <span class="hljs-number">2</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c1_name, c2_name<br><span class="hljs-keyword">from</span> table_name<br>limit <span class="hljs-number">3</span>, <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>上述公式都表示返回的结果从第三行开始，一共返回两行记录。若第三行后没有记录则返回一行。<br><strong>编程人员熟知，计算机是从0开始的，所以本处第三行是我们所看见的表格中的第四行。</strong></p><p>6 使用注释<br>—–在SQL语句中主要提供了三种注释方法。</p><p>单行注释：</p><blockquote><p>– 两杠加空格为单行注释</p><h1 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h1></blockquote><p>多行注释：</p><blockquote><p>/* 多行注释<br>任意位置*/</p></blockquote><p>以上即为第二章内容。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SQL必知必会》学习记录1</title>
    <link href="/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
    <url>/2021/05/11/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    
    <content type="html"><![CDATA[<h1 id="第一课-了解SQL"><a href="#第一课-了解SQL" class="headerlink" title="第一课 了解SQL"></a>第一课 了解SQL</h1><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>数据库(database):  保存有组织的数据的容器，通常指一个文件或者一组文件。</p><p>数据库管理系统(DBMS):数据库软件。</p><p>表(table)：某种特定类型的结构化清单。储存在表中的数据是同一类型的数据和清单。</p><blockquote><p>同一数据库下，表名唯一。<br>同一表下，数据类型同一。</p></blockquote><p>列(column)：表中的一个字段。所有表都是由一个或多个列组成。</p><p>行(row)：数据按照行来存储，每一行为一条记录。</p><p>主键(primary key)：一列（或一组列），其值能够唯一标识表中的每一行。</p><blockquote><p>主键列中每一行记录都不重复，具有唯一性；<br>任意两行都不具有相同的主键值；<br>每一行也必须具有一个主键值；<br>主键值不允许为NULL值；<br>主键值不能重用（即使删除了某一行记录也不能将该记录的主键值赋予其他记录）。</p></blockquote><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><p>SQL的全拼为<em>Structured Query Language</em>，发音为字母<strong>S-Q-L</strong>或者英文单词<strong>sequel</strong>，这是一种专门用来与数据库沟通的语言。</p><blockquote><p>这是语言，和python\C++\Java等一样属于计算机语言，虽然是不同功能的语言。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>画龙七式</title>
    <link href="/2021/05/10/%E7%94%BB%E9%BE%99%E4%B8%83%E5%BC%8F%E5%86%99%E4%BD%9C%E6%B3%95/"/>
    <url>/2021/05/10/%E7%94%BB%E9%BE%99%E4%B8%83%E5%BC%8F%E5%86%99%E4%BD%9C%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="画龙七式写作法"><a href="#画龙七式写作法" class="headerlink" title="画龙七式写作法"></a>画龙七式写作法</h1><h2 id="第一式-冥想"><a href="#第一式-冥想" class="headerlink" title="第一式  冥想"></a>第一式  冥想</h2><p>在画龙正式开始前，首先要做的不是去做，而是去想。这一片文章的写作目的、写作目标和写作方式等。</p><h2 id="第二式-画骨"><a href="#第二式-画骨" class="headerlink" title="第二式  画骨"></a>第二式  画骨</h2><p>画龙画虎难画骨，画骨这一节可谓是重中之重，甚至直接决定了你的文章的质量。什么是文章的骨？拿我现在写的这一片综述性质的文章来说，文章的骨也就是框架，并不是你这一篇综述里每一篇文章具体写的是什么，而在于，你如何选择的文章，以及文章大致写的是什么。</p><p>这一节的表现形式就是标题，把每一篇文章的标题罗列出来，画骨就算完成了。</p><h2 id="第三式-充肌"><a href="#第三式-充肌" class="headerlink" title="第三式  充肌"></a>第三式  充肌</h2><p>本节的目标在于充实你的文章的骨架。</p><p>就本综述而言，大致包括每一篇文章的关键词、主客体、研究方法和核心观点等。</p><h2 id="第四式-描皮"><a href="#第四式-描皮" class="headerlink" title="第四式  描皮"></a>第四式  描皮</h2><p>“皮”就是最外部的表现形式了，也是对于文章的直观区分。而皮与皮之间既有相似连续性又有相对中断性，就如本综述所想，在众多文章中寻找其继承性如同一理论，同一问题下的A对B的补充；又如针对同一问题的不同研究方法、不同视角的对立或相互论证。</p><h2 id="第五式-雕头"><a href="#第五式-雕头" class="headerlink" title="第五式  雕头"></a>第五式  雕头</h2><p>头是统领。雕头即是对前述步骤的总结与概括。</p><h2 id="第六式-收尾"><a href="#第六式-收尾" class="headerlink" title="第六式  收尾"></a>第六式  收尾</h2><p>尾部最不受关注，但却最能提升龙像精气神的地方。收尾要注意灵活。具体到综述中，可评、可述、可点、可叹。</p><h2 id="第七式-点睛"><a href="#第七式-点睛" class="headerlink" title="第七式  点睛"></a>第七式  点睛</h2><p>人人说画龙点睛，这眼睛一点，龙即飞走。所以这眼睛可点，但不可让人看见你点。搜着藏着自己看，不要发表出来。因为这一部分，对应的综述中，就是对自己的研究的参悟。也就是自己本文章对自己研究的重要性。</p>]]></content>
    
    
    <categories>
      
      <category>Paper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/10/hello-world/"/>
    <url>/2021/05/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
